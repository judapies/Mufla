CCS PCH C Compiler, Version 4.104, 5967               23-ene.-20 13:58

               Filename: D:\Laboratorio\Mufla\2019\Mufla 16L Avantika #004588073 OP2019142\Firmware Calificación\Mufla.lst

               ROM used: 52548 bytes (53%)
                         Largest free fragment is 32768
               RAM used: 2148 (65%) at main() level
                         2206 (66%) worst case
               Stack:    6 worst case (5 in main + 1 for interrupts)

*
00000:  GOTO   67F6
*
00008:  MOVWF  04
0000A:  MOVFF  FD8,05
0000E:  MOVFF  FE0,06
00012:  MOVLB  0
00014:  MOVFF  FE9,0C
00018:  MOVFF  FEA,07
0001C:  MOVFF  FE1,08
00020:  MOVFF  FE2,09
00024:  MOVFF  FD9,0A
00028:  MOVFF  FDA,0B
0002C:  MOVFF  FF3,12
00030:  MOVFF  FF4,13
00034:  MOVFF  FFA,14
00038:  MOVFF  FFB,15
0003C:  MOVFF  00,0E
00040:  MOVFF  01,0F
00044:  MOVFF  02,10
00048:  MOVFF  03,11
0004C:  BTFSS  F9D.0
0004E:  GOTO   0058
00052:  BTFSC  F9E.0
00054:  GOTO   12DC
00058:  MOVFF  0E,00
0005C:  MOVFF  0F,01
00060:  MOVFF  10,02
00064:  MOVFF  11,03
00068:  MOVFF  0C,FE9
0006C:  MOVFF  07,FEA
00070:  BSF    07.7
00072:  MOVFF  08,FE1
00076:  MOVFF  09,FE2
0007A:  MOVFF  0A,FD9
0007E:  MOVFF  0B,FDA
00082:  MOVFF  12,FF3
00086:  MOVFF  13,FF4
0008A:  MOVFF  14,FFA
0008E:  MOVFF  15,FFB
00092:  MOVF   04,W
00094:  MOVFF  06,FE0
00098:  MOVFF  05,FD8
0009C:  RETFIE 0
.................... // Control para mufla con rampas  
.................... // Se pueden programar 5 Programas de 10 Segmentos cada Uno. 
.................... // En un segmento se puede programar una rampa o una meseta. 
....................  
....................  
.................... #include <18F4685.h> 
.................... //////// Standard Header file for the PIC18F4685 device //////////////// 
.................... #device PIC18F4685 
.................... #list 
....................  
.................... #device adc=10 
.................... #fuses HS,NOWDT,NOPROTECT,NOLVP,NODEBUG,NOSTVREN,NOPUT,NOCPD,NOWRT,NOIESO,NOFCMEN,NOPBADEN,NOWRTC,NOWRTB,NOEBTR,NOEBTRB,NOCPB,NOXINST,NOLPT1OSC,NOMCLR 
.................... #use delay(clock=20000000) 
*
01390:  MOVLW  08
01392:  MOVWF  FEA
01394:  MOVLW  68
01396:  MOVWF  FE9
01398:  MOVF   FEF,W
0139A:  BZ    13B6
0139C:  MOVLW  06
0139E:  MOVWF  01
013A0:  CLRF   00
013A2:  DECFSZ 00,F
013A4:  BRA    13A2
013A6:  DECFSZ 01,F
013A8:  BRA    13A0
013AA:  MOVLW  7B
013AC:  MOVWF  00
013AE:  DECFSZ 00,F
013B0:  BRA    13AE
013B2:  DECFSZ FEF,F
013B4:  BRA    139C
013B6:  RETLW  00
.................... #include "HDM64GS12.c" 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                           HDM64GS12.c                           //// 
.................... ////                                                                 //// 
.................... //// This file contains drivers for using a Hantronix HDM64GS12 with //// 
.................... //// a KS0108 display controller. The HDM64GS12 is 128 by 64 pixels. //// 
.................... //// The driver treats the upper left pixel as (0,0).                //// 
.................... ////                                                                 //// 
.................... //// Use #define FAST_GLCD if the target chip has at least 1k of RAM //// 
.................... //// to decrease the time it takes to update the display.            //// 
.................... //// glcd_update() must then be called to update the display after   //// 
.................... //// changing the pixel information.                                 //// 
.................... //// See ex_glcd.c for suggested usage.                              //// 
.................... //// See KS0108.c for controlling a single 64 by 64 display          //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... //// LCD Pin connections:                                            //// 
.................... //// (These can be changed as needed in the following defines).      //// 
.................... ////  * 1: VSS is connected to GND                                   //// 
.................... ////  * 2: VDD is connected to +5V                                   //// 
.................... ////  * 3: V0  - LCD operating voltage (Constrast adjustment)        //// 
.................... ////  * 4: D/I - Data or Instruction is connected to B2              //// 
.................... ////  * 5: R/W - Read or Write is connected to B4                    //// 
.................... ////  * 6: Enable is connected to B5                                 //// 
.................... ////  *7-14: Data Bus 0 to 7 is connected to port d                  //// 
.................... ////  *15: Chip Select 1 is connected to B0                          //// 
.................... ////  *16: Chip Select 2 is connected to B1                          //// 
.................... ////  *17: Reset is connected to C0                                  //// 
.................... ////  *18: Negative voltage is also connected to the 20k Ohm POT     //// 
.................... ////  *19: Positive voltage for LED backlight is connected to +5V    //// 
.................... ////  *20: Negavtive voltage for LED backlight is connected to GND   //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... ////  glcd_init(mode)                                                //// 
.................... ////     * Must be called before any other function.                 //// 
.................... ////       - mode can be ON or OFF to turn the LCD on or off         //// 
.................... ////                                                                 //// 
.................... ////  glcd_pixel(x,y,color)                                          //// 
.................... ////     * Sets the pixel to the given color.                        //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_fillScreen(color)                                         //// 
.................... ////     * Fills the entire LCD with the given color.                //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_update()                                                  //// 
.................... ////     * Write the display data stored in RAM to the LCD           //// 
.................... ////     * Only available if FAST_GLCD is defined                    //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2004 Custom Computer Services        //// 
.................... //// This source code may only be used by licensed users of the CCS  //// 
.................... //// C compiler.  This source code may only be distributed to other  //// 
.................... //// licensed users of the CCS C compiler.  No other use,            //// 
.................... //// reproduction or distribution is permitted without written       //// 
.................... //// permission.  Derivative programs created using this software    //// 
.................... //// in object code form are not restricted in any way.              //// 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
....................  
.................... #ifndef HDM64GS12 
.................... #define HDM64GS12 
....................  
.................... #ifndef FAST_GLCD 
.................... #define FAST_GLCD 
....................  
.................... #ifndef GLCD_WIDTH 
.................... #define GLCD_WIDTH   128 
.................... #endif 
....................  
.................... #ifndef GLCD_CS1 
.................... #define GLCD_CS1     PIN_B2   // Chip Selection 1 
.................... #endif 
....................  
.................... #ifndef GLCD_CS2 
.................... #define GLCD_CS2     PIN_B3   // Chip Selection 2 
.................... #endif 
....................  
.................... #ifndef GLCD_DI 
.................... #define GLCD_DI      PIN_B5   // Data or Instruction input 
.................... #endif 
....................  
.................... #ifndef GLCD_RW 
.................... #define GLCD_RW      PIN_B6   // Read/Write 
.................... #endif 
....................  
.................... #ifndef GLCD_E 
.................... #define GLCD_E       PIN_B7   // Enable 
.................... #endif 
....................  
.................... #ifndef GLCD_RST 
.................... #define GLCD_RST     PIN_B4   // Reset 
.................... #endif 
....................  
.................... #define GLCD_LEFT    0 
.................... #define GLCD_RIGHT   1 
....................  
.................... #ifndef ON 
.................... #define ON           1 
.................... #endif 
....................  
.................... #ifndef OFF 
.................... #define OFF          0 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Function Prototypes 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... void glcd_init(int1 mode); 
.................... void glcd_pixel(int8 x, int8 y, int1 color); 
.................... void glcd_fillScreen(int1 color); 
.................... void glcd_writeByte(int1 side, BYTE data); 
.................... BYTE glcd_readByte(int1 side); 
.................... void glcd_update(); 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifdef FAST_GLCD 
.................... struct 
.................... { 
....................    int8 left[512]; 
....................    int8 right[512]; 
.................... } displayData; 
.................... #endif 
....................  
....................  
.................... // Purpose:       Initialize the LCD. 
.................... //                Call before using any other LCD function. 
.................... // Inputs:        OFF - Turns the LCD off 
.................... //                ON  - Turns the LCD on 
.................... void glcd_init(int1 mode) 
.................... { 
....................    // Initialze some pins 
....................    output_high(GLCD_RST); 
*
01522:  BCF    F93.4
01524:  BSF    F8A.4
....................    output_low(GLCD_E); 
01526:  BCF    F93.7
01528:  BCF    F8A.7
....................    output_low(GLCD_CS1); 
0152A:  BCF    F93.2
0152C:  BCF    F8A.2
....................    output_low(GLCD_CS2); 
0152E:  BCF    F93.3
01530:  BCF    F8A.3
....................  
....................    output_low(GLCD_DI);                 // Set for instruction 
01532:  BCF    F93.5
01534:  BCF    F8A.5
....................    glcd_writeByte(GLCD_LEFT,  0xC0);    // Specify first RAM line at the top 
01536:  MOVLB  8
01538:  CLRF   x7D
0153A:  MOVLW  C0
0153C:  MOVWF  x7E
0153E:  MOVLB  0
01540:  RCALL  13DA
....................    glcd_writeByte(GLCD_RIGHT, 0xC0);    //   of the screen 
01542:  MOVLW  01
01544:  MOVLB  8
01546:  MOVWF  x7D
01548:  MOVLW  C0
0154A:  MOVWF  x7E
0154C:  MOVLB  0
0154E:  RCALL  13DA
....................    glcd_writeByte(GLCD_LEFT,  0x40);    // Set the column address to 0 
01550:  MOVLB  8
01552:  CLRF   x7D
01554:  MOVLW  40
01556:  MOVWF  x7E
01558:  MOVLB  0
0155A:  RCALL  13DA
....................    glcd_writeByte(GLCD_RIGHT, 0x40); 
0155C:  MOVLW  01
0155E:  MOVLB  8
01560:  MOVWF  x7D
01562:  MOVLW  40
01564:  MOVWF  x7E
01566:  MOVLB  0
01568:  RCALL  13DA
....................    glcd_writeByte(GLCD_LEFT,  0xB8);    // Set the page address to 0 
0156A:  MOVLB  8
0156C:  CLRF   x7D
0156E:  MOVLW  B8
01570:  MOVWF  x7E
01572:  MOVLB  0
01574:  RCALL  13DA
....................    glcd_writeByte(GLCD_RIGHT, 0xB8); 
01576:  MOVLW  01
01578:  MOVLB  8
0157A:  MOVWF  x7D
0157C:  MOVLW  B8
0157E:  MOVWF  x7E
01580:  MOVLB  0
01582:  RCALL  13DA
....................  
....................    if(mode == ON) 
01584:  MOVLB  8
01586:  DECFSZ x60,W
01588:  BRA    15A6
....................    { 
....................       glcd_writeByte(GLCD_LEFT,  0x3F); // Turn the display on 
0158A:  CLRF   x7D
0158C:  MOVLW  3F
0158E:  MOVWF  x7E
01590:  MOVLB  0
01592:  RCALL  13DA
....................       glcd_writeByte(GLCD_RIGHT, 0x3F); 
01594:  MOVLW  01
01596:  MOVLB  8
01598:  MOVWF  x7D
0159A:  MOVLW  3F
0159C:  MOVWF  x7E
0159E:  MOVLB  0
015A0:  RCALL  13DA
....................    } 
....................    else 
015A2:  BRA    15BE
015A4:  MOVLB  8
....................    { 
....................       glcd_writeByte(GLCD_LEFT,  0x3E); // Turn the display off 
015A6:  CLRF   x7D
015A8:  MOVLW  3E
015AA:  MOVWF  x7E
015AC:  MOVLB  0
015AE:  RCALL  13DA
....................       glcd_writeByte(GLCD_RIGHT, 0x3E); 
015B0:  MOVLW  01
015B2:  MOVLB  8
015B4:  MOVWF  x7D
015B6:  MOVLW  3E
015B8:  MOVWF  x7E
015BA:  MOVLB  0
015BC:  RCALL  13DA
....................    } 
....................  
....................    glcd_fillScreen(OFF);                // Clear the display 
015BE:  MOVLB  8
015C0:  CLRF   x67
015C2:  MOVLB  0
015C4:  RCALL  1410
....................  
....................    #ifdef FAST_GLCD 
....................    glcd_update(); 
015C6:  RCALL  146A
....................    #endif 
.................... } 
015C8:  RETLW  00
....................  
....................  
.................... // Purpose:    Update the LCD with data from the display arrays 
.................... #ifdef FAST_GLCD 
.................... void glcd_update() 
.................... { 
....................    int8 i, j; 
....................    int8 *p1, *p2; 
....................  
....................    p1 = displayData.left; 
*
0146A:  MOVLB  8
0146C:  CLRF   x79
0146E:  MOVLW  17
01470:  MOVWF  x78
....................    p2 = displayData.right; 
01472:  MOVLW  02
01474:  MOVWF  x7B
01476:  MOVLW  17
01478:  MOVWF  x7A
....................  
....................    // Loop through the vertical pages 
....................    for(i = 0; i < 8; ++i) 
0147A:  CLRF   x76
0147C:  MOVF   x76,W
0147E:  SUBLW  07
01480:  BNC   151E
....................    { 
....................       output_low(GLCD_DI);                      // Set for instruction 
01482:  BCF    F93.5
01484:  BCF    F8A.5
....................       glcd_writeByte(GLCD_LEFT, 0x40);          // Set horizontal address to 0 
01486:  CLRF   x7D
01488:  MOVLW  40
0148A:  MOVWF  x7E
0148C:  MOVLB  0
0148E:  RCALL  13DA
....................       glcd_writeByte(GLCD_RIGHT, 0x40); 
01490:  MOVLW  01
01492:  MOVLB  8
01494:  MOVWF  x7D
01496:  MOVLW  40
01498:  MOVWF  x7E
0149A:  MOVLB  0
0149C:  RCALL  13DA
....................       glcd_writeByte(GLCD_LEFT, i | 0xB8);      // Set page address 
0149E:  MOVLB  8
014A0:  MOVF   x76,W
014A2:  IORLW  B8
014A4:  MOVWF  x7C
014A6:  CLRF   x7D
014A8:  MOVWF  x7E
014AA:  MOVLB  0
014AC:  RCALL  13DA
....................       glcd_writeByte(GLCD_RIGHT, i | 0xB8); 
014AE:  MOVLB  8
014B0:  MOVF   x76,W
014B2:  IORLW  B8
014B4:  MOVWF  x7C
014B6:  MOVLW  01
014B8:  MOVWF  x7D
014BA:  MOVFF  87C,87E
014BE:  MOVLB  0
014C0:  RCALL  13DA
....................       output_high(GLCD_DI);                     // Set for data 
014C2:  BCF    F93.5
014C4:  BSF    F8A.5
....................  
....................       // Loop through the horizontal sections 
....................       for(j = 0; j < 64; ++j) 
014C6:  MOVLB  8
014C8:  CLRF   x77
014CA:  MOVF   x77,W
014CC:  SUBLW  3F
014CE:  BNC   151A
....................       { 
....................          glcd_writeByte(GLCD_LEFT, *p1++);      // Turn pixels on or off 
014D0:  MOVFF  879,03
014D4:  MOVF   x78,W
014D6:  INCF   x78,F
014D8:  BTFSC  FD8.2
014DA:  INCF   x79,F
014DC:  MOVWF  FE9
014DE:  MOVFF  03,FEA
014E2:  MOVFF  FEF,87C
014E6:  CLRF   x7D
014E8:  MOVFF  87C,87E
014EC:  MOVLB  0
014EE:  RCALL  13DA
....................          glcd_writeByte(GLCD_RIGHT, *p2++);     // Turn pixels on or off 
014F0:  MOVLB  8
014F2:  MOVFF  87B,03
014F6:  MOVF   x7A,W
014F8:  INCF   x7A,F
014FA:  BTFSC  FD8.2
014FC:  INCF   x7B,F
014FE:  MOVWF  FE9
01500:  MOVFF  03,FEA
01504:  MOVFF  FEF,87C
01508:  MOVLW  01
0150A:  MOVWF  x7D
0150C:  MOVFF  87C,87E
01510:  MOVLB  0
01512:  RCALL  13DA
....................       } 
01514:  MOVLB  8
01516:  INCF   x77,F
01518:  BRA    14CA
....................    } 
0151A:  INCF   x76,F
0151C:  BRA    147C
.................... } 
0151E:  MOVLB  0
01520:  RETLW  00
.................... #endif 
....................  
....................  
.................... // Purpose:    Turn a pixel on a graphic LCD on or off 
.................... // Inputs:     1) x - the x coordinate of the pixel 
.................... //             2) y - the y coordinate of the pixel 
.................... //             3) color - ON or OFF 
.................... void glcd_pixel(int8 x, int8 y, int1 color) 
.................... #ifdef FAST_GLCD 
.................... { 
....................    int8* p; 
....................    int16 temp; 
....................    temp =  y/8; 
*
015CA:  MOVLB  8
015CC:  CLRF   x9A
015CE:  RRCF   x95,W
015D0:  MOVWF  x99
015D2:  RRCF   x99,F
015D4:  RRCF   x99,F
015D6:  MOVLW  1F
015D8:  ANDWF  x99,F
....................    temp *= 64; 
015DA:  RLCF   x99,F
015DC:  RLCF   x9A,F
015DE:  RLCF   x99,F
015E0:  RLCF   x9A,F
015E2:  RLCF   x99,F
015E4:  RLCF   x9A,F
015E6:  RLCF   x99,F
015E8:  RLCF   x9A,F
015EA:  RLCF   x99,F
015EC:  RLCF   x9A,F
015EE:  RLCF   x99,F
015F0:  RLCF   x9A,F
015F2:  MOVLW  C0
015F4:  ANDWF  x99,F
....................    temp += x; 
015F6:  MOVF   x94,W
015F8:  ADDWF  x99,F
015FA:  MOVLW  00
015FC:  ADDWFC x9A,F
....................  
....................    if(x > 63) 
015FE:  MOVF   x94,W
01600:  SUBLW  3F
01602:  BC    161E
....................    { 
....................       p = displayData.right + temp - 64; 
01604:  MOVLW  17
01606:  ADDWF  x99,W
01608:  MOVWF  x9B
0160A:  MOVLW  02
0160C:  ADDWFC x9A,W
0160E:  MOVWF  x9C
01610:  MOVLW  40
01612:  SUBWF  x9B,W
01614:  MOVWF  x97
01616:  MOVLW  00
01618:  SUBWFB x9C,W
0161A:  MOVWF  x98
....................    } 
....................    else 
0161C:  BRA    162A
....................    { 
....................       p = displayData.left + temp; 
0161E:  MOVLW  17
01620:  ADDWF  x99,W
01622:  MOVWF  x97
01624:  MOVLW  00
01626:  ADDWFC x9A,W
01628:  MOVWF  x98
....................    } 
....................  
....................    if(color) 
0162A:  MOVF   x96,F
0162C:  BZ    1658
....................    { 
....................       bit_set(*p, y%8); 
0162E:  MOVFF  898,03
01632:  MOVFF  897,FE9
01636:  MOVFF  898,FEA
0163A:  MOVF   x95,W
0163C:  ANDLW  07
0163E:  MOVWF  x9B
01640:  MOVLW  01
01642:  MOVWF  00
01644:  MOVF   x9B,W
01646:  MOVWF  01
01648:  BZ    1652
0164A:  BCF    FD8.0
0164C:  RLCF   00,F
0164E:  DECFSZ 01,F
01650:  BRA    164A
01652:  MOVF   00,W
01654:  IORWF  FEF,F
....................    } 
....................    else 
01656:  BRA    1682
....................    { 
....................       bit_clear(*p, y%8); 
01658:  MOVFF  898,03
0165C:  MOVFF  897,FE9
01660:  MOVFF  898,FEA
01664:  MOVF   x95,W
01666:  ANDLW  07
01668:  MOVWF  x9B
0166A:  MOVLW  01
0166C:  MOVWF  00
0166E:  MOVF   x9B,W
01670:  MOVWF  01
01672:  BZ    167C
01674:  BCF    FD8.0
01676:  RLCF   00,F
01678:  DECFSZ 01,F
0167A:  BRA    1674
0167C:  MOVF   00,W
0167E:  XORLW  FF
01680:  ANDWF  FEF,F
....................    } 
.................... } 
01682:  MOVLB  0
01684:  RETLW  00
.................... #else 
.................... { 
....................    BYTE data; 
....................    int1 side = GLCD_LEFT;  // Stores which chip to use on the LCD 
....................  
....................    if(x > 63)              // Check for first or second display area 
....................    { 
....................       x -= 64; 
....................       side = GLCD_RIGHT; 
....................    } 
....................  
....................    output_low(GLCD_DI);                         // Set for instruction 
....................    bit_clear(x,7);                              // Clear the MSB. Part of an instruction code 
....................    bit_set(x,6);                                // Set bit 6. Also part of an instruction code 
....................    glcd_writeByte(side, x);                     // Set the horizontal address 
....................    glcd_writeByte(side, (y/8 & 0xBF) | 0xB8);   // Set the vertical page address 
....................    output_high(GLCD_DI);                        // Set for data 
....................    glcd_readByte(side);                         // Need two reads to get data 
....................    data = glcd_readByte(side);                  //  at new address 
....................  
....................    if(color == ON) 
....................       bit_set(data, y%8);        // Turn the pixel on 
....................    else                          // or 
....................       bit_clear(data, y%8);      // turn the pixel off 
....................  
....................    output_low(GLCD_DI);          // Set for instruction 
....................    glcd_writeByte(side, x);      // Set the horizontal address 
....................    output_high(GLCD_DI);         // Set for data 
....................    glcd_writeByte(side, data);   // Write the pixel data 
.................... } 
.................... #endif 
....................  
....................  
.................... // Purpose:    Fill the LCD screen with the passed in color 
.................... // Inputs:     ON  - turn all the pixels on 
.................... //             OFF - turn all the pixels off 
.................... void glcd_fillScreen(int1 color) 
.................... #ifdef FAST_GLCD 
.................... { 
....................    int8  data; 
....................    int8  *p1, *p2; 
....................    int16 i; 
....................  
....................    p1 = displayData.left; 
*
01410:  MOVLB  8
01412:  CLRF   x6A
01414:  MOVLW  17
01416:  MOVWF  x69
....................    p2 = displayData.right; 
01418:  MOVLW  02
0141A:  MOVWF  x6C
0141C:  MOVLW  17
0141E:  MOVWF  x6B
....................    data = 0xFF * color; 
01420:  MOVF   x67,W
01422:  MULLW  FF
01424:  MOVFF  FF3,868
....................  
....................    for(i=0; i<512; ++i) 
01428:  CLRF   x6E
0142A:  CLRF   x6D
0142C:  MOVF   x6E,W
0142E:  SUBLW  01
01430:  BNC   1466
....................    { 
....................       *p1++ = data; 
01432:  MOVFF  86A,03
01436:  MOVF   x69,W
01438:  INCF   x69,F
0143A:  BTFSC  FD8.2
0143C:  INCF   x6A,F
0143E:  MOVWF  FE9
01440:  MOVFF  03,FEA
01444:  MOVFF  868,FEF
....................       *p2++ = data; 
01448:  MOVFF  86C,03
0144C:  MOVF   x6B,W
0144E:  INCF   x6B,F
01450:  BTFSC  FD8.2
01452:  INCF   x6C,F
01454:  MOVWF  FE9
01456:  MOVFF  03,FEA
0145A:  MOVFF  868,FEF
....................    } 
0145E:  INCF   x6D,F
01460:  BTFSC  FD8.2
01462:  INCF   x6E,F
01464:  BRA    142C
.................... } 
01466:  MOVLB  0
01468:  RETLW  00
.................... #else 
.................... { 
....................    int8 i, j; 
....................  
....................    // Loop through the vertical pages 
....................    for(i = 0; i < 8; ++i) 
....................    { 
....................       output_low(GLCD_DI);                      // Set for instruction 
....................       glcd_writeByte(GLCD_LEFT, 0b01000000);    // Set horizontal address to 0 
....................       glcd_writeByte(GLCD_RIGHT, 0b01000000); 
....................       glcd_writeByte(GLCD_LEFT, i | 0b10111000);// Set page address 
....................       glcd_writeByte(GLCD_RIGHT, i | 0b10111000); 
....................       output_high(GLCD_DI);                     // Set for data 
....................  
....................       // Loop through the horizontal sections 
....................       for(j = 0; j < 64; ++j) 
....................       { 
....................          glcd_writeByte(GLCD_LEFT, 0xFF*color);  // Turn pixels on or off 
....................          glcd_writeByte(GLCD_RIGHT, 0xFF*color); // Turn pixels on or off 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
....................  
.................... // Purpose:    Write a byte of data to the specified chip 
.................... // Inputs:     1) chipSelect - which chip to write the data to 
.................... //             2) data - the byte of data to write 
.................... void glcd_writeByte(int1 side, BYTE data) 
.................... { 
....................    if(side)                   // Choose which side to write to 
*
013DA:  MOVLB  8
013DC:  MOVF   x7D,F
013DE:  BZ    13E6
....................       output_high(GLCD_CS2); 
013E0:  BCF    F93.3
013E2:  BSF    F8A.3
....................    else 
013E4:  BRA    13EA
....................       output_high(GLCD_CS1); 
013E6:  BCF    F93.2
013E8:  BSF    F8A.2
....................  
....................    output_low(GLCD_RW);       // Set for writing 
013EA:  BCF    F93.6
013EC:  BCF    F8A.6
....................    output_d(data);            // Put the data on the port 
013EE:  CLRF   F95
013F0:  MOVFF  87E,F8C
....................    delay_cycles(1); 
013F4:  NOP   
....................    output_high(GLCD_E);       // Pulse the enable pin 
013F6:  BCF    F93.7
013F8:  BSF    F8A.7
....................    delay_cycles(5); 
013FA:  BRA    13FC
013FC:  BRA    13FE
013FE:  NOP   
....................    output_low(GLCD_E); 
01400:  BCF    F93.7
01402:  BCF    F8A.7
....................  
....................    output_low(GLCD_CS1);      // Reset the chip select lines 
01404:  BCF    F93.2
01406:  BCF    F8A.2
....................    output_low(GLCD_CS2); 
01408:  BCF    F93.3
0140A:  BCF    F8A.3
.................... } 
0140C:  MOVLB  0
0140E:  RETLW  00
....................  
....................  
.................... // Purpose:    Reads a byte of data from the specified chip 
.................... // Ouputs:     A byte of data read from the chip 
.................... BYTE glcd_readByte(int1 side) 
.................... { 
....................    BYTE data;                 // Stores the data read from the LCD 
....................  
....................    set_tris_d(0xFF);          // Set port d to input 
....................    output_high(GLCD_RW);      // Set for reading 
....................  
....................    if(side)                   // Choose which side to write to 
....................       output_high(GLCD_CS2); 
....................    else 
....................       output_high(GLCD_CS1); 
....................  
....................    delay_cycles(1); 
....................    output_high(GLCD_E);       // Pulse the enable pin 
....................    delay_cycles(4); 
....................    data = input_d();          // Get the data from the display's output register 
....................    output_low(GLCD_E); 
....................  
....................    output_low(GLCD_CS1);      // Reset the chip select lines 
....................    output_low(GLCD_CS2); 
....................    return data;               // Return the read data 
.................... } 
....................  
.................... #endif 
....................  
.................... #include "GRAPHICS.c" 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                          graphics.c                             //// 
.................... ////                                                                 //// 
.................... ////   This file contains functions to draw lines, rectangles, bars, //// 
.................... ////   circles and text to a display. A function which draws a       //// 
.................... ////   single pixel must be defined before calling the functions in  //// 
.................... ////   this file. Call it glcd_pixel(x, y, color) where x is the     //// 
.................... ////   horizontal coordinate, y is the vertical coordinate, and      //// 
.................... ////   color is 1 bit to turn the pixel on or off.                   //// 
.................... ////                                                                 //// 
.................... ////   * Note: (0, 0) is treated as the upper left corner            //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... ////  glcd_line(x1, y1, x2, y2, color)                               //// 
.................... ////     * Draws a line from the first point to the second point     //// 
.................... ////       with the given color                                      //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_rect(x1, y1, x2, y2, fill, color)                         //// 
.................... ////     * Draws a rectangle with one corner at point (x1,y1) and    //// 
.................... ////       the other corner at point (x2,y2)                         //// 
.................... ////       - fill can be YES or NO                                   //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_bar(x1, y1, x2, y2, width, color)                         //// 
.................... ////     * Draws a bar (wide line) from the first point to the       //// 
.................... ////       second point                                              //// 
.................... ////       - width is the number of pixels wide                      //// 
.................... ////       - color is ON or OFF                                      //// 
.................... ////                                                                 //// 
.................... ////  glcd_circle(x, y, radius, fill, color)                         //// 
.................... ////     * Draws a circle with center at (x,y)                       //// 
.................... ////       - fill can be YES or NO                                   //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_text57(x, y, textptr, size, color)                        //// 
.................... ////     * Write the null terminated text pointed to by textptr with //// 
.................... ////       the upper left coordinate of the first character at (x,y) //// 
.................... ////       Characters are 5 pixels wide and 7 pixels tall            //// 
.................... ////       - size is an integer that scales the size of the text     //// 
.................... ////       - color is ON or OFF                                      //// 
.................... ////     * Note - This function wraps characters to the next line    //// 
.................... ////              use #define GLCD_WIDTH to specify a display width  //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2004 Custom Computer Services        //// 
.................... //// This source code may only be used by licensed users of the CCS  //// 
.................... //// C compiler.  This source code may only be distributed to other  //// 
.................... //// licensed users of the CCS C compiler.  No other use,            //// 
.................... //// reproduction or distribution is permitted without written       //// 
.................... //// permission.  Derivative programs created using this software    //// 
.................... //// in object code form are not restricted in any way.              //// 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifndef GRAPHICS_DRAWING_FUNCTIONS 
.................... #define GRAPHICS_DRAWING_FUNCTIONS 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifndef ON 
.................... #define ON  1 
.................... #endif 
....................  
.................... #ifndef OFF 
.................... #define OFF 0 
.................... #endif 
....................  
.................... #ifndef YES 
.................... #define YES 1 
.................... #endif 
....................  
.................... #ifndef NO 
.................... #define NO  0 
.................... #endif 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... //// Defines a 5x7 font 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... const int8 FONT[51][5] ={0x00, 0x00, 0x00, 0x00, 0x00, // SPACE 
....................                          0x00, 0x00, 0x5F, 0x00, 0x00, // ! 
....................                          0x00, 0x03, 0x00, 0x03, 0x00, // " 
....................                          0x14, 0x3E, 0x14, 0x3E, 0x14, // # 
....................                          0x24, 0x2A, 0x7F, 0x2A, 0x12, // $ 
....................                          0x43, 0x33, 0x08, 0x66, 0x61, // % 
....................                          0x36, 0x49, 0x55, 0x22, 0x50, // & 
....................                          0x00, 0x05, 0x03, 0x00, 0x00, // ' 
....................                          0x00, 0x1C, 0x22, 0x41, 0x00, // ( 
....................                          0x00, 0x41, 0x22, 0x1C, 0x00, // ) 
....................                          0x14, 0x08, 0x3E, 0x08, 0x14, // * 
....................                          0x08, 0x08, 0x3E, 0x08, 0x08, // + 
....................                          0x00, 0x50, 0x30, 0x00, 0x00, // , 
....................                          0x08, 0x08, 0x08, 0x08, 0x08, // - 
....................                          0x00, 0x60, 0x60, 0x00, 0x00, // . 
....................                          0x20, 0x10, 0x08, 0x04, 0x02, // / 
....................                          0x3E, 0x51, 0x49, 0x45, 0x3E, // 0 
....................                          0x00, 0x04, 0x02, 0x7F, 0x00, // 1 
....................                          0x42, 0x61, 0x51, 0x49, 0x46, // 2 
....................                          0x22, 0x41, 0x49, 0x49, 0x36, // 3 
....................                          0x18, 0x14, 0x12, 0x7F, 0x10, // 4 
....................                          0x27, 0x45, 0x45, 0x45, 0x39, // 5 
....................                          0x3E, 0x49, 0x49, 0x49, 0x32, // 6 
....................                          0x01, 0x01, 0x71, 0x09, 0x07, // 7 
....................                          0x36, 0x49, 0x49, 0x49, 0x36, // 8 
....................                          0x26, 0x49, 0x49, 0x49, 0x3E, // 9 
....................                          0x00, 0x36, 0x36, 0x00, 0x00, // : 
....................                          0x00, 0x56, 0x36, 0x00, 0x00, // ; 
....................                          0x08, 0x14, 0x22, 0x41, 0x00, // < 
....................                          0x14, 0x14, 0x14, 0x14, 0x14, // = 
....................                          0x00, 0x41, 0x22, 0x14, 0x08, // > 
....................                          0x02, 0x01, 0x51, 0x09, 0x06, // ? 
....................                          0x3E, 0x41, 0x59, 0x55, 0x5E, // @ 
....................                          0x7E, 0x09, 0x09, 0x09, 0x7E, // A 
....................                          0x7F, 0x49, 0x49, 0x49, 0x36, // B 
....................                          0x3E, 0x41, 0x41, 0x41, 0x22, // C 
....................                          0x7F, 0x41, 0x41, 0x41, 0x3E, // D 
....................                          0x7F, 0x49, 0x49, 0x49, 0x41, // E 
....................                          0x7F, 0x09, 0x09, 0x09, 0x01, // F 
....................                          0x3E, 0x41, 0x41, 0x49, 0x3A, // G 
....................                          0x7F, 0x08, 0x08, 0x08, 0x7F, // H 
....................                          0x00, 0x41, 0x7F, 0x41, 0x00, // I 
....................                          0x30, 0x40, 0x40, 0x40, 0x3F, // J 
....................                          0x7F, 0x08, 0x14, 0x22, 0x41, // K 
....................                          0x7F, 0x40, 0x40, 0x40, 0x40, // L 
....................                          0x7F, 0x02, 0x0C, 0x02, 0x7F, // M 
....................                          0x7F, 0x02, 0x04, 0x08, 0x7F, // N 
....................                          0x3E, 0x41, 0x41, 0x41, 0x3E, // O 
....................                          0x7F, 0x09, 0x09, 0x09, 0x06, // P 
....................                          0x1E, 0x21, 0x21, 0x21, 0x5E, // Q 
....................                          0x7F, 0x09, 0x09, 0x09, 0x76};// R 
....................  
.................... const int8 FONT2[44][5]={0x26, 0x49, 0x49, 0x49, 0x32, // S 
....................                          0x01, 0x01, 0x7F, 0x01, 0x01, // T 
....................                          0x3F, 0x40, 0x40, 0x40, 0x3F, // U 
....................                          0x1F, 0x20, 0x40, 0x20, 0x1F, // V 
....................                          0x7F, 0x20, 0x10, 0x20, 0x7F, // W 
....................                          0x41, 0x22, 0x1C, 0x22, 0x41, // X 
....................                          0x07, 0x08, 0x70, 0x08, 0x07, // Y 
....................                          0x61, 0x51, 0x49, 0x45, 0x43, // Z 
....................                          0x00, 0x7F, 0x41, 0x00, 0x00, // [ 
....................                          0x02, 0x04, 0x08, 0x10, 0x20, // \ 
....................                          0x00, 0x00, 0x41, 0x7F, 0x00, // ] 
....................                          0x04, 0x02, 0x01, 0x02, 0x04, // ^ 
....................                          0x40, 0x40, 0x40, 0x40, 0x40, // _ 
....................                          0x00, 0x01, 0x02, 0x04, 0x00, // ` 
....................                          0x20, 0x54, 0x54, 0x54, 0x78, // a 
....................                          0x7F, 0x44, 0x44, 0x44, 0x38, // b 
....................                          0x38, 0x44, 0x44, 0x44, 0x44, // c 
....................                          0x38, 0x44, 0x44, 0x44, 0x7F, // d 
....................                          0x38, 0x54, 0x54, 0x54, 0x18, // e 
....................                          0x04, 0x04, 0x7E, 0x05, 0x05, // f 
....................                          0x08, 0x54, 0x54, 0x54, 0x3C, // g 
....................                          0x7F, 0x08, 0x04, 0x04, 0x78, // h 
....................                          0x00, 0x44, 0x7D, 0x40, 0x00, // i 
....................                          0x20, 0x40, 0x44, 0x3D, 0x00, // j 
....................                          0x7F, 0x10, 0x28, 0x44, 0x00, // k 
....................                          0x00, 0x41, 0x7F, 0x40, 0x00, // l 
....................                          0x7C, 0x04, 0x78, 0x04, 0x78, // m 
....................                          0x7C, 0x08, 0x04, 0x04, 0x78, // n 
....................                          0x38, 0x44, 0x44, 0x44, 0x38, // o 
....................                          0x7C, 0x14, 0x14, 0x14, 0x08, // p 
....................                          0x08, 0x14, 0x14, 0x14, 0x7C, // q 
....................                          0x00, 0x7C, 0x08, 0x04, 0x04, // r 
....................                          0x48, 0x54, 0x54, 0x54, 0x20, // s 
....................                          0x04, 0x04, 0x3F, 0x44, 0x44, // t 
....................                          0x3C, 0x40, 0x40, 0x20, 0x7C, // u 
....................                          0x1C, 0x20, 0x40, 0x20, 0x1C, // v 
....................                          0x3C, 0x40, 0x30, 0x40, 0x3C, // w 
....................                          0x44, 0x28, 0x10, 0x28, 0x44, // x 
....................                          0x0C, 0x50, 0x50, 0x50, 0x3C, // y 
....................                          0x44, 0x64, 0x54, 0x4C, 0x44, // z 
....................                          0x00, 0x08, 0x36, 0x41, 0x41, // { 
....................                          0x00, 0x00, 0x7F, 0x00, 0x00, // | 
....................                          0x41, 0x41, 0x36, 0x08, 0x00, // } 
....................                          0x02, 0x01, 0x02, 0x04, 0x02};// ~ 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a line on a graphic LCD using Bresenham's 
.................... //                line drawing algorithm 
.................... // Inputs:        (x1, y1) - the start coordinate 
.................... //                (x2, y2) - the end coordinate 
.................... //                color - ON or OFF 
.................... // Dependencies:  glcd_pixel() 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_line(int16 x1, int16 y1, int16 x2, int16 y2, int1 color) 
.................... #else 
.................... void glcd_line(int8 x1, int8 y1, int8 x2, int8 y2, int1 color) 
.................... #endif 
.................... { 
*
01686:  MOVLW  01
01688:  MOVLB  8
0168A:  MOVWF  x8D
0168C:  MOVWF  x8E
0168E:  CLRF   x93
....................    int16        dy, dx; 
....................    signed int8  addx=1, addy=1; 
....................    signed int16 P, diff; 
....................  
....................    #ifdef LARGE_LCD 
....................    int16 i=0; 
....................    dx = abs((signed int16)(x2 - x1)); 
....................    dy = abs((signed int16)(y2 - y1)); 
....................    #else 
....................    int8 i=0; 
....................    dx = abs((signed int8)(x2 - x1)); 
01690:  MOVF   x84,W
01692:  SUBWF  x86,W
01694:  MOVWF  x94
01696:  MOVF   x94,W
01698:  BTFSS  x94.7
0169A:  BRA    16A2
0169C:  MOVLW  00
0169E:  BSF    FD8.0
016A0:  SUBFWB x94,W
016A2:  CLRF   03
016A4:  MOVWF  x8B
016A6:  MOVFF  03,88C
....................    dy = abs((signed int8)(y2 - y1)); 
016AA:  MOVF   x85,W
016AC:  SUBWF  x87,W
016AE:  MOVWF  x94
016B0:  MOVF   x94,W
016B2:  BTFSS  x94.7
016B4:  BRA    16BC
016B6:  MOVLW  00
016B8:  BSF    FD8.0
016BA:  SUBFWB x94,W
016BC:  CLRF   03
016BE:  MOVWF  x89
016C0:  MOVFF  03,88A
....................    #endif 
....................  
....................    if(x1 > x2) 
016C4:  MOVF   x84,W
016C6:  SUBWF  x86,W
016C8:  BC    16CE
....................       addx = -1; 
016CA:  MOVLW  FF
016CC:  MOVWF  x8D
....................    if(y1 > y2) 
016CE:  MOVF   x85,W
016D0:  SUBWF  x87,W
016D2:  BC    16D8
....................       addy = -1; 
016D4:  MOVLW  FF
016D6:  MOVWF  x8E
....................  
....................    if(dx >= dy) 
016D8:  MOVF   x8A,W
016DA:  SUBWF  x8C,W
016DC:  BNC   1754
016DE:  BNZ   16E6
016E0:  MOVF   x89,W
016E2:  SUBWF  x8B,W
016E4:  BNC   1754
....................    { 
....................       dy *= 2; 
016E6:  BCF    FD8.0
016E8:  RLCF   x89,F
016EA:  RLCF   x8A,F
....................       P = dy - dx; 
016EC:  MOVF   x8B,W
016EE:  SUBWF  x89,W
016F0:  MOVWF  00
016F2:  MOVF   x8C,W
016F4:  SUBWFB x8A,W
016F6:  MOVFF  00,88F
016FA:  MOVWF  x90
....................       diff = P - dx; 
016FC:  MOVF   x8B,W
016FE:  SUBWF  x8F,W
01700:  MOVWF  x91
01702:  MOVF   x8C,W
01704:  SUBWFB x90,W
01706:  MOVWF  x92
....................  
....................       for(; i<=dx; ++i) 
01708:  MOVF   x8C,F
0170A:  BNZ   1712
0170C:  MOVF   x93,W
0170E:  SUBWF  x8B,W
01710:  BNC   1752
....................       { 
....................          glcd_pixel(x1, y1, color); 
01712:  MOVFF  884,894
01716:  MOVFF  885,895
0171A:  MOVFF  888,896
0171E:  MOVLB  0
01720:  RCALL  15CA
....................  
....................          if(P < 0) 
01722:  MOVLB  8
01724:  BTFSC  x90.7
01726:  BRA    172A
01728:  BRA    173A
....................          { 
....................             P  += dy; 
0172A:  MOVF   x89,W
0172C:  ADDWF  x8F,F
0172E:  MOVF   x8A,W
01730:  ADDWFC x90,F
....................             x1 += addx; 
01732:  MOVF   x8D,W
01734:  ADDWF  x84,W
01736:  MOVWF  x84
....................          } 
....................          else 
01738:  BRA    174E
....................          { 
....................             P  += diff; 
0173A:  MOVF   x91,W
0173C:  ADDWF  x8F,F
0173E:  MOVF   x92,W
01740:  ADDWFC x90,F
....................             x1 += addx; 
01742:  MOVF   x8D,W
01744:  ADDWF  x84,W
01746:  MOVWF  x84
....................             y1 += addy; 
01748:  MOVF   x8E,W
0174A:  ADDWF  x85,W
0174C:  MOVWF  x85
....................          } 
....................       } 
0174E:  INCF   x93,F
01750:  BRA    1708
....................    } 
....................    else 
01752:  BRA    17C0
....................    { 
....................       dx *= 2; 
01754:  BCF    FD8.0
01756:  RLCF   x8B,F
01758:  RLCF   x8C,F
....................       P = dx - dy; 
0175A:  MOVF   x89,W
0175C:  SUBWF  x8B,W
0175E:  MOVWF  00
01760:  MOVF   x8A,W
01762:  SUBWFB x8C,W
01764:  MOVFF  00,88F
01768:  MOVWF  x90
....................       diff = P - dy; 
0176A:  MOVF   x89,W
0176C:  SUBWF  x8F,W
0176E:  MOVWF  x91
01770:  MOVF   x8A,W
01772:  SUBWFB x90,W
01774:  MOVWF  x92
....................  
....................       for(; i<=dy; ++i) 
01776:  MOVF   x8A,F
01778:  BNZ   1780
0177A:  MOVF   x93,W
0177C:  SUBWF  x89,W
0177E:  BNC   17C0
....................       { 
....................          glcd_pixel(x1, y1, color); 
01780:  MOVFF  884,894
01784:  MOVFF  885,895
01788:  MOVFF  888,896
0178C:  MOVLB  0
0178E:  RCALL  15CA
....................  
....................          if(P < 0) 
01790:  MOVLB  8
01792:  BTFSC  x90.7
01794:  BRA    1798
01796:  BRA    17A8
....................          { 
....................             P  += dx; 
01798:  MOVF   x8B,W
0179A:  ADDWF  x8F,F
0179C:  MOVF   x8C,W
0179E:  ADDWFC x90,F
....................             y1 += addy; 
017A0:  MOVF   x8E,W
017A2:  ADDWF  x85,W
017A4:  MOVWF  x85
....................          } 
....................          else 
017A6:  BRA    17BC
....................          { 
....................             P  += diff; 
017A8:  MOVF   x91,W
017AA:  ADDWF  x8F,F
017AC:  MOVF   x92,W
017AE:  ADDWFC x90,F
....................             x1 += addx; 
017B0:  MOVF   x8D,W
017B2:  ADDWF  x84,W
017B4:  MOVWF  x84
....................             y1 += addy; 
017B6:  MOVF   x8E,W
017B8:  ADDWF  x85,W
017BA:  MOVWF  x85
....................          } 
....................       } 
017BC:  INCF   x93,F
017BE:  BRA    1776
....................    } 
.................... } 
017C0:  MOVLB  0
017C2:  RETLW  00
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a rectangle on a graphic LCD 
.................... // Inputs:        (x1, y1) - the start coordinate 
.................... //                (x2, y2) - the end coordinate 
.................... //                fill  - YES or NO 
.................... //                color - ON or OFF 
.................... // Dependencies:  glcd_pixel(), glcd_line() 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_rect(int16 x1, int16 y1, int16 x2, int16 y2, int1 fill, int1 color) 
.................... #else 
.................... void glcd_rect(int8 x1, int8 y1, int8 x2, int8 y2, int1 fill, int1 color) 
.................... #endif 
.................... { 
....................    if(fill) 
017C4:  MOVLB  8
017C6:  MOVF   x7C,F
017C8:  BZ    1826
....................    { 
....................       #ifdef LARGE_LCD 
....................       int16 i, xmin, xmax, ymin, ymax; 
....................       #else 
....................       int8  i, xmin, xmax, ymin, ymax; 
....................       #endif 
....................  
....................       if(x1 < x2)                            //  Find x min and max 
017CA:  MOVF   x7A,W
017CC:  SUBWF  x78,W
017CE:  BC    17DA
....................       { 
....................          xmin = x1; 
017D0:  MOVFF  878,87F
....................          xmax = x2; 
017D4:  MOVFF  87A,880
....................       } 
....................       else 
017D8:  BRA    17E2
....................       { 
....................          xmin = x2; 
017DA:  MOVFF  87A,87F
....................          xmax = x1; 
017DE:  MOVFF  878,880
....................       } 
....................  
....................       if(y1 < y2)                            // Find the y min and max 
017E2:  MOVF   x7B,W
017E4:  SUBWF  x79,W
017E6:  BC    17F2
....................       { 
....................          ymin = y1; 
017E8:  MOVFF  879,881
....................          ymax = y2; 
017EC:  MOVFF  87B,882
....................       } 
....................       else 
017F0:  BRA    17FA
....................       { 
....................          ymin = y2; 
017F2:  MOVFF  87B,881
....................          ymax = y1; 
017F6:  MOVFF  879,882
....................       } 
....................  
....................       for(; xmin <= xmax; ++xmin) 
017FA:  MOVF   x7F,W
017FC:  SUBWF  x80,W
017FE:  BNC   1824
....................       { 
....................          for(i=ymin; i<=ymax; ++i) 
01800:  MOVFF  881,87E
01804:  MOVF   x7E,W
01806:  SUBWF  x82,W
01808:  BNC   1820
....................          { 
....................             glcd_pixel(xmin, i, color); 
0180A:  MOVFF  87F,894
0180E:  MOVFF  87E,895
01812:  MOVFF  87D,896
01816:  MOVLB  0
01818:  RCALL  15CA
....................          } 
0181A:  MOVLB  8
0181C:  INCF   x7E,F
0181E:  BRA    1804
....................       } 
01820:  INCF   x7F,F
01822:  BRA    17FA
....................    } 
....................    else 
01824:  BRA    1882
....................    { 
....................       glcd_line(x1, y1, x2, y1, color);      // Draw the 4 sides 
01826:  MOVFF  878,884
0182A:  MOVFF  879,885
0182E:  MOVFF  87A,886
01832:  MOVFF  879,887
01836:  MOVFF  87D,888
0183A:  MOVLB  0
0183C:  RCALL  1686
....................       glcd_line(x1, y2, x2, y2, color); 
0183E:  MOVFF  878,884
01842:  MOVFF  87B,885
01846:  MOVFF  87A,886
0184A:  MOVFF  87B,887
0184E:  MOVFF  87D,888
01852:  RCALL  1686
....................       glcd_line(x1, y1, x1, y2, color); 
01854:  MOVFF  878,884
01858:  MOVFF  879,885
0185C:  MOVFF  878,886
01860:  MOVFF  87B,887
01864:  MOVFF  87D,888
01868:  RCALL  1686
....................       glcd_line(x2, y1, x2, y2, color); 
0186A:  MOVFF  87A,884
0186E:  MOVFF  879,885
01872:  MOVFF  87A,886
01876:  MOVFF  87B,887
0187A:  MOVFF  87D,888
0187E:  RCALL  1686
01880:  MOVLB  8
....................    } 
.................... } 
01882:  MOVLB  0
01884:  RETLW  00
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a bar (wide line) on a graphic LCD 
.................... // Inputs:        (x1, y1) - the start coordinate 
.................... //                (x2, y2) - the end coordinate 
.................... //                width  - The number of pixels wide 
.................... //                color - ON or OFF 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_bar(int16 x1, int16 y1, int16 x2, int16 y2, int8 width, int1 color) 
.................... #else 
.................... void glcd_bar(int8 x1, int8 y1, int8 x2, int8 y2, int8 width, int1 color) 
.................... #endif 
.................... { 
....................    int8         half_width; 
....................    signed int16 dy, dx; 
....................    signed int8  addx=1, addy=1, j; 
....................    signed int16 P, diff, c1, c2; 
....................  
....................    #ifdef LARGE_LCD 
....................    int16 i=0; 
....................    dx = abs((signed int16)(x2 - x1)); 
....................    dy = abs((signed int16)(y2 - y1)); 
....................    #else 
....................    int8 i=0; 
....................    dx = abs((signed int8)(x2 - x1)); 
....................    dy = abs((signed int8)(y2 - y1)); 
....................    #endif 
....................  
....................    half_width = width/2; 
....................    c1 = -(dx*x1 + dy*y1); 
....................    c2 = -(dx*x2 + dy*y2); 
....................  
....................    if(x1 > x2) 
....................    { 
....................       signed int16 temp; 
....................       temp = c1; 
....................       c1 = c2; 
....................       c2 = temp; 
....................       addx = -1; 
....................    } 
....................    if(y1 > y2) 
....................    { 
....................       signed int16 temp; 
....................       temp = c1; 
....................       c1 = c2; 
....................       c2 = temp; 
....................       addy = -1; 
....................    } 
....................  
....................    if(dx >= dy) 
....................    { 
....................       P = 2*dy - dx; 
....................       diff = P - dx; 
....................  
....................       for(i=0; i<=dx; ++i) 
....................       { 
....................          for(j=-half_width; j<half_width+width%2; ++j) 
....................          { 
....................             #ifdef LARGE_LCD 
....................             int16 temp; 
....................             #else 
....................             int8 temp; 
....................             #endif 
....................  
....................             temp = dx*x1+dy*(y1+j);    // Use more RAM to increase speed 
....................             if(temp+c1 >= 0 && temp+c2 <=0) 
....................                glcd_pixel(x1, y1+j, color); 
....................          } 
....................          if(P < 0) 
....................          { 
....................             P  += 2*dy; 
....................             x1 += addx; 
....................          } 
....................          else 
....................          { 
....................             P  += diff; 
....................             x1 += addx; 
....................             y1 += addy; 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       P = 2*dx - dy; 
....................       diff = P - dy; 
....................  
....................       for(i=0; i<=dy; ++i) 
....................       { 
....................          if(P < 0) 
....................          { 
....................             P  += 2*dx; 
....................             y1 += addy; 
....................          } 
....................          else 
....................          { 
....................             P  += diff; 
....................             x1 += addx; 
....................             y1 += addy; 
....................          } 
....................          for(j=-half_width; j<half_width+width%2; ++j) 
....................          { 
....................             #ifdef LARGE_LCD 
....................             int16 temp; 
....................             #else 
....................             int8 temp; 
....................             #endif 
....................  
....................             temp = dx*x1+dy*(y1+j);    // Use more RAM to increase speed 
....................             if(temp+c1 >= 0 && temp+c2 <=0) 
....................                glcd_pixel(x1+j, y1, color); 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a circle on a graphic LCD 
.................... // Inputs:        (x,y) - the center of the circle 
.................... //                radius - the radius of the circle 
.................... //                fill - YES or NO 
.................... //                color - ON or OFF 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_circle(int16 x, int16 y, int16 radius, int1 fill, int1 color) 
.................... #else 
.................... void glcd_circle(int8 x, int8 y, int8 radius, int1 fill, int1 color) 
.................... #endif 
.................... { 
....................    #ifdef LARGE_LCD 
....................    signed int16 a, b, P; 
....................    #else 
....................    signed int8  a, b, P; 
....................    #endif 
....................  
....................    a = 0; 
*
03E1C:  MOVLB  8
03E1E:  CLRF   x7D
....................    b = radius; 
03E20:  MOVFF  87A,87E
....................    P = 1 - radius; 
03E24:  MOVLW  01
03E26:  BSF    FD8.0
03E28:  SUBFWB x7A,W
03E2A:  MOVWF  x7F
....................  
....................    do 
....................    { 
....................       if(fill) 
03E2C:  MOVF   x7B,F
03E2E:  BZ    3EFA
....................       { 
....................          glcd_line(x-a, y+b, x+a, y+b, color); 
03E30:  MOVF   x7D,W
03E32:  SUBWF  x78,W
03E34:  MOVWF  x80
03E36:  MOVF   x7E,W
03E38:  ADDWF  x79,W
03E3A:  MOVWF  x81
03E3C:  MOVF   x7D,W
03E3E:  ADDWF  x78,W
03E40:  MOVWF  x82
03E42:  MOVF   x7E,W
03E44:  ADDWF  x79,W
03E46:  MOVWF  x83
03E48:  MOVFF  880,884
03E4C:  MOVFF  881,885
03E50:  MOVFF  882,886
03E54:  MOVWF  x87
03E56:  MOVFF  87C,888
03E5A:  MOVLB  0
03E5C:  CALL   1686
....................          glcd_line(x-a, y-b, x+a, y-b, color); 
03E60:  MOVLB  8
03E62:  MOVF   x7D,W
03E64:  SUBWF  x78,W
03E66:  MOVWF  x80
03E68:  MOVF   x7E,W
03E6A:  SUBWF  x79,W
03E6C:  MOVWF  x81
03E6E:  MOVF   x7D,W
03E70:  ADDWF  x78,W
03E72:  MOVWF  x82
03E74:  MOVF   x7E,W
03E76:  SUBWF  x79,W
03E78:  MOVWF  x83
03E7A:  MOVFF  880,884
03E7E:  MOVFF  881,885
03E82:  MOVFF  882,886
03E86:  MOVWF  x87
03E88:  MOVFF  87C,888
03E8C:  MOVLB  0
03E8E:  CALL   1686
....................          glcd_line(x-b, y+a, x+b, y+a, color); 
03E92:  MOVLB  8
03E94:  MOVF   x7E,W
03E96:  SUBWF  x78,W
03E98:  MOVWF  x80
03E9A:  MOVF   x7D,W
03E9C:  ADDWF  x79,W
03E9E:  MOVWF  x81
03EA0:  MOVF   x7E,W
03EA2:  ADDWF  x78,W
03EA4:  MOVWF  x82
03EA6:  MOVF   x7D,W
03EA8:  ADDWF  x79,W
03EAA:  MOVWF  x83
03EAC:  MOVFF  880,884
03EB0:  MOVFF  881,885
03EB4:  MOVFF  882,886
03EB8:  MOVWF  x87
03EBA:  MOVFF  87C,888
03EBE:  MOVLB  0
03EC0:  CALL   1686
....................          glcd_line(x-b, y-a, x+b, y-a, color); 
03EC4:  MOVLB  8
03EC6:  MOVF   x7E,W
03EC8:  SUBWF  x78,W
03ECA:  MOVWF  x80
03ECC:  MOVF   x7D,W
03ECE:  SUBWF  x79,W
03ED0:  MOVWF  x81
03ED2:  MOVF   x7E,W
03ED4:  ADDWF  x78,W
03ED6:  MOVWF  x82
03ED8:  MOVF   x7D,W
03EDA:  SUBWF  x79,W
03EDC:  MOVWF  x83
03EDE:  MOVFF  880,884
03EE2:  MOVFF  881,885
03EE6:  MOVFF  882,886
03EEA:  MOVWF  x87
03EEC:  MOVFF  87C,888
03EF0:  MOVLB  0
03EF2:  CALL   1686
....................       } 
....................       else 
03EF6:  BRA    3FE8
03EF8:  MOVLB  8
....................       { 
....................          glcd_pixel(a+x, b+y, color); 
03EFA:  MOVF   x78,W
03EFC:  ADDWF  x7D,W
03EFE:  MOVWF  x80
03F00:  MOVF   x79,W
03F02:  ADDWF  x7E,W
03F04:  MOVWF  x81
03F06:  MOVFF  880,894
03F0A:  MOVWF  x95
03F0C:  MOVFF  87C,896
03F10:  MOVLB  0
03F12:  CALL   15CA
....................          glcd_pixel(b+x, a+y, color); 
03F16:  MOVLB  8
03F18:  MOVF   x78,W
03F1A:  ADDWF  x7E,W
03F1C:  MOVWF  x80
03F1E:  MOVF   x79,W
03F20:  ADDWF  x7D,W
03F22:  MOVWF  x81
03F24:  MOVFF  880,894
03F28:  MOVWF  x95
03F2A:  MOVFF  87C,896
03F2E:  MOVLB  0
03F30:  CALL   15CA
....................          glcd_pixel(x-a, b+y, color); 
03F34:  MOVLB  8
03F36:  MOVF   x7D,W
03F38:  SUBWF  x78,W
03F3A:  MOVWF  x80
03F3C:  MOVF   x79,W
03F3E:  ADDWF  x7E,W
03F40:  MOVWF  x81
03F42:  MOVFF  880,894
03F46:  MOVWF  x95
03F48:  MOVFF  87C,896
03F4C:  MOVLB  0
03F4E:  CALL   15CA
....................          glcd_pixel(x-b, a+y, color); 
03F52:  MOVLB  8
03F54:  MOVF   x7E,W
03F56:  SUBWF  x78,W
03F58:  MOVWF  x80
03F5A:  MOVF   x79,W
03F5C:  ADDWF  x7D,W
03F5E:  MOVWF  x81
03F60:  MOVFF  880,894
03F64:  MOVWF  x95
03F66:  MOVFF  87C,896
03F6A:  MOVLB  0
03F6C:  CALL   15CA
....................          glcd_pixel(b+x, y-a, color); 
03F70:  MOVLB  8
03F72:  MOVF   x78,W
03F74:  ADDWF  x7E,W
03F76:  MOVWF  x80
03F78:  MOVF   x7D,W
03F7A:  SUBWF  x79,W
03F7C:  MOVWF  x81
03F7E:  MOVFF  880,894
03F82:  MOVWF  x95
03F84:  MOVFF  87C,896
03F88:  MOVLB  0
03F8A:  CALL   15CA
....................          glcd_pixel(a+x, y-b, color); 
03F8E:  MOVLB  8
03F90:  MOVF   x78,W
03F92:  ADDWF  x7D,W
03F94:  MOVWF  x80
03F96:  MOVF   x7E,W
03F98:  SUBWF  x79,W
03F9A:  MOVWF  x81
03F9C:  MOVFF  880,894
03FA0:  MOVWF  x95
03FA2:  MOVFF  87C,896
03FA6:  MOVLB  0
03FA8:  CALL   15CA
....................          glcd_pixel(x-a, y-b, color); 
03FAC:  MOVLB  8
03FAE:  MOVF   x7D,W
03FB0:  SUBWF  x78,W
03FB2:  MOVWF  x80
03FB4:  MOVF   x7E,W
03FB6:  SUBWF  x79,W
03FB8:  MOVWF  x81
03FBA:  MOVFF  880,894
03FBE:  MOVWF  x95
03FC0:  MOVFF  87C,896
03FC4:  MOVLB  0
03FC6:  CALL   15CA
....................          glcd_pixel(x-b, y-a, color); 
03FCA:  MOVLB  8
03FCC:  MOVF   x7E,W
03FCE:  SUBWF  x78,W
03FD0:  MOVWF  x80
03FD2:  MOVF   x7D,W
03FD4:  SUBWF  x79,W
03FD6:  MOVWF  x81
03FD8:  MOVFF  880,894
03FDC:  MOVWF  x95
03FDE:  MOVFF  87C,896
03FE2:  MOVLB  0
03FE4:  CALL   15CA
....................       } 
....................  
....................       if(P < 0) 
03FE8:  MOVLB  8
03FEA:  BTFSC  x7F.7
03FEC:  BRA    3FF0
03FEE:  BRA    400C
....................          P += 3 + 2 * a++; 
03FF0:  MOVF   x7D,W
03FF2:  INCF   x7D,F
03FF4:  MOVWF  x80
03FF6:  MOVLW  02
03FF8:  MOVWF  x81
03FFA:  MOVFF  880,882
03FFE:  MOVLB  0
04000:  RCALL  3AE0
04002:  MOVF   01,W
04004:  ADDLW  03
04006:  MOVLB  8
04008:  ADDWF  x7F,F
....................       else 
0400A:  BRA    402E
....................          P += 5 + 2 * (a++ - b--); 
0400C:  MOVF   x7D,W
0400E:  INCF   x7D,F
04010:  MOVWF  x80
04012:  MOVF   x7E,W
04014:  DECF   x7E,F
04016:  SUBWF  x80,W
04018:  MOVWF  x80
0401A:  MOVLW  02
0401C:  MOVWF  x81
0401E:  MOVFF  880,882
04022:  MOVLB  0
04024:  RCALL  3AE0
04026:  MOVF   01,W
04028:  ADDLW  05
0402A:  MOVLB  8
0402C:  ADDWF  x7F,F
....................     } while(a <= b); 
0402E:  MOVF   x7D,W
04030:  XORLW  80
04032:  MOVWF  00
04034:  MOVF   x7E,W
04036:  XORLW  80
04038:  SUBWF  00,W
0403A:  BTFSC  FD8.2
0403C:  BRA    3E2C
0403E:  BTFSS  FD8.0
04040:  BRA    3E2C
.................... } 
04042:  MOVLB  0
04044:  RETLW  00
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Write text on a graphic LCD 
.................... // Inputs:        (x,y) - The upper left coordinate of the first letter 
.................... //                textptr - A pointer to an array of text to display 
.................... //                size - The size of the text: 1 = 5x7, 2 = 10x14, ... 
.................... //                color - ON or OFF 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_text57(int16 x, int16 y, char* textptr, int8 size, int1 color) 
.................... #else 
.................... void glcd_text57(int8 x, int8 y, char* textptr, int8 size, int1 color) 
.................... #endif 
.................... { 
....................    int8 j, k, l, m;                       // Loop counters 
....................    int8 pixelData[5];                     // Stores character data 
....................  
....................    for(; *textptr != '\0'; ++textptr, ++x)// Loop through the passed string 
*
01886:  MOVFF  87B,03
0188A:  MOVLB  8
0188C:  MOVFF  87A,FE9
01890:  MOVFF  87B,FEA
01894:  MOVF   FEF,F
01896:  BTFSC  FD8.2
01898:  BRA    1A3A
....................    { 
....................       if(*textptr < 'S') // Checks if the letter is in the first font array 
0189A:  MOVFF  87B,03
0189E:  MOVFF  87A,FE9
018A2:  MOVFF  87B,FEA
018A6:  MOVF   FEF,W
018A8:  SUBLW  52
018AA:  BNC   18FA
....................          memcpy(pixelData, FONT[*textptr - ' '], 5); 
018AC:  MOVFF  87B,03
018B0:  MOVFF  87A,FE9
018B4:  MOVFF  87B,FEA
018B8:  MOVLW  20
018BA:  SUBWF  FEF,W
018BC:  MULLW  05
018BE:  MOVF   FF3,W
018C0:  CLRF   03
018C2:  MOVWF  x87
018C4:  MOVLW  08
018C6:  MOVWF  FEA
018C8:  MOVLW  82
018CA:  MOVWF  FE9
018CC:  CLRF   x8B
018CE:  MOVFF  887,88A
018D2:  MOVFF  FF2,888
018D6:  BCF    FF2.7
018D8:  MOVLW  05
018DA:  MOVWF  01
018DC:  CLRF   FF7
018DE:  MOVF   x87,W
018E0:  MOVLB  0
018E2:  CALL   009E
018E6:  TBLRD*-
018E8:  TBLRD*+
018EA:  MOVFF  FF5,FEE
018EE:  DECFSZ 01,F
018F0:  BRA    18E8
018F2:  MOVLB  8
018F4:  BTFSC  x88.7
018F6:  BSF    FF2.7
....................       else if(*textptr <= '~') // Check if the letter is in the second font array 
018F8:  BRA    1964
018FA:  MOVFF  87B,03
018FE:  MOVFF  87A,FE9
01902:  MOVFF  87B,FEA
01906:  MOVF   FEF,W
01908:  SUBLW  7E
0190A:  BNC   195A
....................          memcpy(pixelData, FONT2[*textptr - 'S'], 5); 
0190C:  MOVFF  87B,03
01910:  MOVFF  87A,FE9
01914:  MOVFF  87B,FEA
01918:  MOVLW  53
0191A:  SUBWF  FEF,W
0191C:  MULLW  05
0191E:  MOVF   FF3,W
01920:  CLRF   03
01922:  MOVWF  x87
01924:  MOVLW  08
01926:  MOVWF  FEA
01928:  MOVLW  82
0192A:  MOVWF  FE9
0192C:  CLRF   x8B
0192E:  MOVFF  887,88A
01932:  MOVFF  FF2,888
01936:  BCF    FF2.7
01938:  MOVLW  05
0193A:  MOVWF  01
0193C:  CLRF   FF7
0193E:  MOVF   x87,W
01940:  MOVLB  0
01942:  CALL   01BC
01946:  TBLRD*-
01948:  TBLRD*+
0194A:  MOVFF  FF5,FEE
0194E:  DECFSZ 01,F
01950:  BRA    1948
01952:  MOVLB  8
01954:  BTFSC  x88.7
01956:  BSF    FF2.7
....................       else 
01958:  BRA    1964
....................          memcpy(pixelData, FONT[0], 5);   // Default to space 
0195A:  CLRF   x82
0195C:  CLRF   x83
0195E:  CLRF   x84
01960:  CLRF   x85
01962:  CLRF   x86
....................  
....................       // Handles newline and carriage returns 
....................       switch(*textptr) 
....................       { 
01964:  MOVFF  87B,03
01968:  MOVF   x7A,W
0196A:  MOVWF  FE9
0196C:  MOVFF  03,FEA
01970:  MOVF   FEF,W
01972:  XORLW  0A
01974:  MOVLB  0
01976:  BZ    197E
01978:  XORLW  07
0197A:  BZ    198E
0197C:  BRA    1994
....................          case '\n': 
....................             y += 7*size + 1; 
0197E:  MOVLB  8
01980:  MOVF   x7C,W
01982:  MULLW  07
01984:  MOVF   FF3,W
01986:  ADDLW  01
01988:  ADDWF  x79,F
....................             continue; 
0198A:  BRA    1A2C
0198C:  MOVLB  0
....................          case '\r': 
....................             x = 0; 
0198E:  MOVLB  8
01990:  CLRF   x78
....................             continue; 
01992:  BRA    1A2C
....................       } 
....................  
....................       if(x+5*size >= GLCD_WIDTH)          // Performs character wrapping 
01994:  MOVLB  8
01996:  MOVF   x7C,W
01998:  MULLW  05
0199A:  MOVF   FF3,W
0199C:  ADDWF  x78,W
0199E:  SUBLW  7F
019A0:  BC    19AE
....................       { 
....................          x = 0;                           // Set x at far left position 
019A2:  CLRF   x78
....................          y += 7*size + 1;                 // Set y at next position down 
019A4:  MOVF   x7C,W
019A6:  MULLW  07
019A8:  MOVF   FF3,W
019AA:  ADDLW  01
019AC:  ADDWF  x79,F
....................       } 
....................       for(j=0; j<5; ++j, x+=size)         // Loop through character byte data 
019AE:  CLRF   x7E
019B0:  MOVF   x7E,W
019B2:  SUBLW  04
019B4:  BNC   1A2C
....................       { 
....................          for(k=0; k < 7; ++k)             // Loop through the vertical pixels 
019B6:  CLRF   x7F
019B8:  MOVF   x7F,W
019BA:  SUBLW  06
019BC:  BNC   1A24
....................          { 
....................             if(bit_test(pixelData[j], k)) // Check if the pixel should be set 
019BE:  CLRF   03
019C0:  MOVF   x7E,W
019C2:  ADDLW  82
019C4:  MOVWF  FE9
019C6:  MOVLW  08
019C8:  ADDWFC 03,W
019CA:  MOVWF  FEA
019CC:  MOVFF  FEF,887
019D0:  MOVFF  887,00
019D4:  MOVF   x7F,W
019D6:  MOVWF  01
019D8:  BZ    19E2
019DA:  BCF    FD8.0
019DC:  RRCF   00,F
019DE:  DECFSZ 01,F
019E0:  BRA    19DA
019E2:  BTFSS  00.0
019E4:  BRA    1A20
....................             { 
....................                for(l=0; l < size; ++l)    // These two loops change the 
019E6:  CLRF   x80
019E8:  MOVF   x7C,W
019EA:  SUBWF  x80,W
019EC:  BC    1A20
....................                {                          // character's size 
....................                   for(m=0; m < size; ++m) 
019EE:  CLRF   x81
019F0:  MOVF   x7C,W
019F2:  SUBWF  x81,W
019F4:  BC    1A1C
....................                   { 
....................                      glcd_pixel(x+m, y+k*size+l, color); // Draws the pixel 
019F6:  MOVF   x81,W
019F8:  ADDWF  x78,W
019FA:  MOVWF  x87
019FC:  MOVF   x7F,W
019FE:  MULWF  x7C
01A00:  MOVF   FF3,W
01A02:  ADDWF  x79,W
01A04:  ADDWF  x80,W
01A06:  MOVWF  x88
01A08:  MOVFF  887,894
01A0C:  MOVWF  x95
01A0E:  MOVFF  87D,896
01A12:  MOVLB  0
01A14:  RCALL  15CA
....................                   } 
01A16:  MOVLB  8
01A18:  INCF   x81,F
01A1A:  BRA    19F0
....................                } 
01A1C:  INCF   x80,F
01A1E:  BRA    19E8
....................             } 
....................          } 
01A20:  INCF   x7F,F
01A22:  BRA    19B8
....................       } 
01A24:  INCF   x7E,F
01A26:  MOVF   x7C,W
01A28:  ADDWF  x78,F
01A2A:  BRA    19B0
....................    } 
01A2C:  INCF   x7A,F
01A2E:  BTFSC  FD8.2
01A30:  INCF   x7B,F
01A32:  INCF   x78,F
01A34:  MOVLB  0
01A36:  BRA    1886
01A38:  MOVLB  8
.................... } 
01A3A:  MOVLB  0
01A3C:  RETLW  00
....................  
.................... #endif 
....................  
.................... #include "imagen.h" 
.................... const int8 Horno [64][16] = { 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x01, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x07, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x1C, 0x9C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x18, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x86, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x20, 0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x60, 0x83, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x70, 0x87, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x60, 0xC3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x20, 0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x30, 0x26, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x18, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x1C, 0x9C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x07, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x01, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x02, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x03, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x03, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x03, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x03, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x07, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x0F, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x0B, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x0B, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x0F, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x0F, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x07, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x03, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
.................... }; 
....................  
....................  
.................... #include <MATH.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float32)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float32)l); 
....................   res = 32768.0*(float32)l; 
....................   res += (float32)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float32)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float48)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float48)l); 
....................   res = 32768.0*(float32)l; 
....................   res += (float48)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float48)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float64)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float64)l); 
....................   res = 32768.0*(float64)l; 
....................   res += (float64)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float64)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y/LN2 - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y/LN2 - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y/LN2 - (float64)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................    bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................     
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................    
....................       if(bit_test(data2,7)) 
....................          bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
....................  
....................     data1 = *(((unsigned int8 *)(&x)+5)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+4)); 
....................     if(bit_test (data2,7)) 
....................        bit_set(data1,0); 
....................       
....................     n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................          r = -(float48)-n; 
....................       else 
....................          r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float32 const pl_64[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql_64[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
.................... #endif 
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................       bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................    bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................      bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #define TWOBYPI          0.6366197723675813 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float48 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
....................  
.................... // Definición de teclado - NO 
.................... #define   UP               !input(PIN_A5) 
.................... #define   DOWN             !input(PIN_E0) 
.................... #define   RIGHT            !input(PIN_E1) 
.................... #define   LEFT             !input(PIN_E2) 
....................  
.................... #define   DOOR             input(PIN_A4) 
.................... #define   TERM             input(PIN_A3) 
....................  
.................... #define   Resistencia_on   output_bit(PIN_C0,1) 
.................... #define   Resistencia_off  output_bit(PIN_C0,0) 
.................... #define   Buzz_on          output_bit(PIN_C4,1) 
.................... #define   Buzz_off         output_bit(PIN_C4,0) 
....................  
.................... #define Pasos 16 
....................  
.................... float promedio[90]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}; 
.................... float X[2]={0.0,0.0}; 
.................... short flagup=0,flagdn=0,Desconectado=0,mensaje=0; 
.................... int8 h=0,l=0,Ajuste=0,Ajusten=0,MediaMovil=10,tiemporecta=0,flag_ganancia=0,Lectura2=0,tiempoup=0,tiempodn=0,Segmentos=0,Segmento=0,Modo=5; 
.................... short Flanco=0,Flanco1=0,Flanco2=0,visual=1,Lectura=0,flag_calcula=0; 
.................... short flag_clear2=0,flag_clear3=0,flag_tiempocalentamiento=0,flag_display=0,flag_setpoint=0,Dibuja=0; 
.................... int8 y=0,tiemporeset=0,Programa=1,Control=0,n=0; 
.................... int8 Menu=0, unidad=1,i=0,j=1,Pausa=0,Pausa_ant=0,TiempoControl=0; 
.................... int8 Opcion=1,tiempo_esterilizacion=0,ProgramaSeleccionado=0,Alarma=10; 
.................... int16 tiempos=0,tiempos3=0,tiempoctrl=0,tinicio=0,tiempocalentamiento=0,tiemposetpoint=0,Tp=0,Tc=0,AlTem=20.0; 
.................... float PendienteMinutos=0,TempeInicial=20,Tiempo=0,TiempoActual=0,PendienteActual=0,HorasActual=0,MinutosActual=0,TiempoRampa=0; 
.................... float Potencia=0.0,PotenciaEntregada=0.0; 
.................... signed int  Testerilizacion[4]={0,0,0,0};   // Tiempo transcurrido 
.................... signed int  Testerilizacionp[4]={0,0,0,0};   // Tiempo transcurrido 
.................... signed int  Contrasena[4]={0,0,0,0};      // Contrasena de 4 digitos 
.................... signed int  Password[4]={0,0,0,0};        // Contrasena Almacenada de 4 digitos 
.................... float V0=0.0,Tciclo=10.0,Tpulso=0.0,error=0.0,Prom=0.0,Temperature=0.0,tmp=0.0,GananciaIn=0,Ganancia=3.0,desvio=3.0,Coeficiente=150.0,resistencia=240.0; 
.................... float Aumento=0.0,Temperatura=0.0,Pendiente=0.0,DifPendiente=0.0,Setpoint=0,Integral=0,Derivativo=0,m=0,b=0,adcSup=0,adcInf=0,Tsup=1250,Tinf=0,penMufla=50; 
.................... float TemperaturaIdeal=0,penInicial=0; 
.................... signed int16 Temperatura1[Pasos*5]; 
.................... signed int16 Horas1[Pasos*5]; 
.................... signed int16 Minutos1[Pasos*5]; 
....................  
.................... #include <Funciones.h> 
.................... //Funciones utilizadas en la Mufla 
....................  
.................... typedef struct{ 
....................    char Letra[30]; 
.................... }MENUU; 
....................  
.................... MENUU Menus; 
....................  
.................... void ActualizaRecta(){ 
....................    X[y]=Temperatura; 
*
05192:  MOVLB  5
05194:  MOVF   x96,W
05196:  MULLW  04
05198:  MOVF   FF3,W
0519A:  CLRF   03
0519C:  ADDLW  7F
0519E:  MOVWF  FE9
051A0:  MOVLW  05
051A2:  ADDWFC 03,W
051A4:  MOVWF  FEA
051A6:  MOVFF  624,FEF
051AA:  MOVFF  625,FEC
051AE:  MOVFF  626,FEC
051B2:  MOVFF  627,FEC
....................    y++; 
051B6:  INCF   x96,F
....................    if(y>=2) 
051B8:  MOVF   x96,W
051BA:  SUBLW  01
051BC:  BTFSC  FD8.0
051BE:  BRA    5466
....................    { 
....................       y=0; 
051C0:  CLRF   x96
....................       Aumento=X[1]-X[0]; 
051C2:  BSF    FD8.1
051C4:  MOVFF  586,869
051C8:  MOVFF  585,868
051CC:  MOVFF  584,867
051D0:  MOVFF  583,866
051D4:  MOVFF  582,86D
051D8:  MOVFF  581,86C
051DC:  MOVFF  580,86B
051E0:  MOVFF  57F,86A
051E4:  MOVLB  0
051E6:  CALL   2B0E
051EA:  MOVFF  03,623
051EE:  MOVFF  02,622
051F2:  MOVFF  01,621
051F6:  MOVFF  00,620
....................       HorasActual=(Testerilizacion[3]*10)+Testerilizacion[2]; 
051FA:  MOVFF  5E3,881
051FE:  MOVLW  0A
05200:  MOVLB  8
05202:  MOVWF  x82
05204:  MOVLB  0
05206:  CALL   3AE0
0520A:  MOVLB  5
0520C:  MOVF   xE2,W
0520E:  ADDWF  01,W
05210:  MOVLB  8
05212:  CLRF   x65
05214:  MOVWF  x64
05216:  BTFSC  x64.7
05218:  DECF   x65,F
0521A:  MOVLB  0
0521C:  CALL   3A90
05220:  MOVFF  03,5CF
05224:  MOVFF  02,5CE
05228:  MOVFF  01,5CD
0522C:  MOVFF  00,5CC
....................       MinutosActual=(Testerilizacion[1]*10)+Testerilizacion[0]; 
05230:  MOVFF  5E1,881
05234:  MOVLW  0A
05236:  MOVLB  8
05238:  MOVWF  x82
0523A:  MOVLB  0
0523C:  CALL   3AE0
05240:  MOVLB  5
05242:  MOVF   xE0,W
05244:  ADDWF  01,W
05246:  MOVLB  8
05248:  CLRF   x65
0524A:  MOVWF  x64
0524C:  BTFSC  x64.7
0524E:  DECF   x65,F
05250:  MOVLB  0
05252:  CALL   3A90
05256:  MOVFF  03,5D3
0525A:  MOVFF  02,5D2
0525E:  MOVFF  01,5D1
05262:  MOVFF  00,5D0
....................       TiempoActual=Tiempo-((HorasActual*3600)+(MinutosActual*60)+tinicio); 
05266:  MOVFF  5CF,880
0526A:  MOVFF  5CE,87F
0526E:  MOVFF  5CD,87E
05272:  MOVFF  5CC,87D
05276:  MOVLB  8
05278:  CLRF   x84
0527A:  CLRF   x83
0527C:  MOVLW  61
0527E:  MOVWF  x82
05280:  MOVLW  8A
05282:  MOVWF  x81
05284:  MOVLB  0
05286:  CALL   2EE4
0528A:  MOVFF  00,860
0528E:  MOVFF  01,861
05292:  MOVFF  02,862
05296:  MOVFF  03,863
0529A:  MOVFF  5D3,880
0529E:  MOVFF  5D2,87F
052A2:  MOVFF  5D1,87E
052A6:  MOVFF  5D0,87D
052AA:  MOVLB  8
052AC:  CLRF   x84
052AE:  CLRF   x83
052B0:  MOVLW  70
052B2:  MOVWF  x82
052B4:  MOVLW  84
052B6:  MOVWF  x81
052B8:  MOVLB  0
052BA:  CALL   2EE4
052BE:  BCF    FD8.1
052C0:  MOVFF  863,869
052C4:  MOVFF  862,868
052C8:  MOVFF  861,867
052CC:  MOVFF  860,866
052D0:  MOVFF  03,86D
052D4:  MOVFF  02,86C
052D8:  MOVFF  01,86B
052DC:  MOVFF  00,86A
052E0:  CALL   2B0E
052E4:  MOVFF  00,860
052E8:  MOVFF  01,861
052EC:  MOVFF  02,862
052F0:  MOVFF  03,863
052F4:  MOVFF  5AD,867
052F8:  MOVFF  5AC,866
052FC:  CALL   1D46
05300:  BCF    FD8.1
05302:  MOVFF  863,869
05306:  MOVFF  862,868
0530A:  MOVFF  861,867
0530E:  MOVFF  860,866
05312:  MOVFF  03,86D
05316:  MOVFF  02,86C
0531A:  MOVFF  01,86B
0531E:  MOVFF  00,86A
05322:  CALL   2B0E
05326:  BSF    FD8.1
05328:  MOVFF  5C3,869
0532C:  MOVFF  5C2,868
05330:  MOVFF  5C1,867
05334:  MOVFF  5C0,866
05338:  MOVFF  03,86D
0533C:  MOVFF  02,86C
05340:  MOVFF  01,86B
05344:  MOVFF  00,86A
05348:  CALL   2B0E
0534C:  MOVFF  03,5C7
05350:  MOVFF  02,5C6
05354:  MOVFF  01,5C5
05358:  MOVFF  00,5C4
....................       PendienteActual=((Setpoint-Temperatura)/TiempoActual); 
0535C:  BSF    FD8.1
0535E:  MOVFF  633,869
05362:  MOVFF  632,868
05366:  MOVFF  631,867
0536A:  MOVFF  630,866
0536E:  MOVFF  627,86D
05372:  MOVFF  626,86C
05376:  MOVFF  625,86B
0537A:  MOVFF  624,86A
0537E:  CALL   2B0E
05382:  MOVFF  00,860
05386:  MOVFF  01,861
0538A:  MOVFF  02,862
0538E:  MOVFF  03,863
05392:  MOVFF  03,867
05396:  MOVFF  02,866
0539A:  MOVFF  01,865
0539E:  MOVFF  00,864
053A2:  MOVFF  5C7,86B
053A6:  MOVFF  5C6,86A
053AA:  MOVFF  5C5,869
053AE:  MOVFF  5C4,868
053B2:  CALL   2D86
053B6:  MOVFF  03,5CB
053BA:  MOVFF  02,5CA
053BE:  MOVFF  01,5C9
053C2:  MOVFF  00,5C8
....................       DifPendiente=(PendienteActual*20)-Aumento; 
053C6:  MOVFF  5CB,880
053CA:  MOVFF  5CA,87F
053CE:  MOVFF  5C9,87E
053D2:  MOVFF  5C8,87D
053D6:  MOVLB  8
053D8:  CLRF   x84
053DA:  CLRF   x83
053DC:  MOVLW  20
053DE:  MOVWF  x82
053E0:  MOVLW  83
053E2:  MOVWF  x81
053E4:  MOVLB  0
053E6:  CALL   2EE4
053EA:  MOVFF  00,860
053EE:  MOVFF  01,861
053F2:  MOVFF  02,862
053F6:  MOVFF  03,863
053FA:  BSF    FD8.1
053FC:  MOVFF  03,869
05400:  MOVFF  02,868
05404:  MOVFF  01,867
05408:  MOVFF  00,866
0540C:  MOVFF  623,86D
05410:  MOVFF  622,86C
05414:  MOVFF  621,86B
05418:  MOVFF  620,86A
0541C:  CALL   2B0E
05420:  MOVFF  03,62F
05424:  MOVFF  02,62E
05428:  MOVFF  01,62D
0542C:  MOVFF  00,62C
....................       DifPendiente=DifPendiente*5; 
05430:  MOVFF  62F,880
05434:  MOVFF  62E,87F
05438:  MOVFF  62D,87E
0543C:  MOVFF  62C,87D
05440:  MOVLB  8
05442:  CLRF   x84
05444:  CLRF   x83
05446:  MOVLW  20
05448:  MOVWF  x82
0544A:  MOVLW  81
0544C:  MOVWF  x81
0544E:  MOVLB  0
05450:  CALL   2EE4
05454:  MOVFF  03,62F
05458:  MOVFF  02,62E
0545C:  MOVFF  01,62D
05460:  MOVFF  00,62C
05464:  MOVLB  5
....................       //penMufla=(6000*(Aumento/20))/PotenciaEntregada; 
....................    } 
.................... } 
05466:  MOVLB  0
05468:  GOTO   54B4 (RETURN)
....................  
.................... // Funcion para conversor analogo-digital 
.................... float sensores(int x){ 
.................... float y;set_adc_channel(x);delay_ms(1);y=read_adc();return (y); 
*
02A92:  MOVLB  8
02A94:  RLCF   x61,W
02A96:  MOVWF  00
02A98:  RLCF   00,F
02A9A:  MOVLW  FC
02A9C:  ANDWF  00,F
02A9E:  MOVFF  00,01
02AA2:  MOVF   FC2,W
02AA4:  ANDLW  C3
02AA6:  IORWF  00,W
02AA8:  MOVWF  FC2
02AAA:  MOVLW  01
02AAC:  MOVWF  x68
02AAE:  MOVLB  0
02AB0:  CALL   1390
02AB4:  BSF    FC2.1
02AB6:  BTFSC  FC2.1
02AB8:  BRA    2AB6
02ABA:  MOVFF  FC4,867
02ABE:  MOVFF  FC3,866
02AC2:  MOVLB  0
02AC4:  CALL   1D46
02AC8:  MOVFF  03,865
02ACC:  MOVFF  02,864
02AD0:  MOVFF  01,863
02AD4:  MOVFF  00,862
02AD8:  MOVFF  862,00
02ADC:  MOVFF  863,01
02AE0:  MOVFF  864,02
02AE4:  MOVFF  865,03
.................... } 
02AE8:  GOTO   2FEC (RETURN)
.................... float Leer_Sensor(int media) 
.................... { 
....................    Prom=0.0; 
*
02FDA:  MOVLB  6
02FDC:  CLRF   x03
02FDE:  CLRF   x02
02FE0:  CLRF   x01
02FE2:  CLRF   x00
....................    V0 = sensores(0);   //Lectura de Divisor de Voltaje de PT100 con resistencia de 6.18k (+-2%)    
02FE4:  MOVLB  8
02FE6:  CLRF   x61
02FE8:  MOVLB  0
02FEA:  BRA    2A92
02FEC:  MOVFF  03,5F3
02FF0:  MOVFF  02,5F2
02FF4:  MOVFF  01,5F1
02FF8:  MOVFF  00,5F0
....................              
....................    if(l>(media-1)) 
02FFC:  MOVLW  01
02FFE:  MOVLB  8
03000:  SUBWF  x60,W
03002:  MOVLB  5
03004:  SUBWF  x89,W
03006:  BZ    300C
03008:  BNC   300C
....................    {l=0;} 
0300A:  CLRF   x89
....................    //promedio[l]=Temperature;l++; 
....................    promedio[l]=V0;l++; 
0300C:  MOVLB  8
0300E:  CLRF   x65
03010:  MOVFF  589,864
03014:  CLRF   x67
03016:  MOVLW  04
03018:  MOVWF  x66
0301A:  MOVLB  0
0301C:  RCALL  2AEC
0301E:  MOVF   01,W
03020:  ADDLW  17
03022:  MOVWF  FE9
03024:  MOVLW  04
03026:  ADDWFC 02,W
03028:  MOVWF  FEA
0302A:  MOVFF  5F0,FEF
0302E:  MOVFF  5F1,FEC
03032:  MOVFF  5F2,FEC
03036:  MOVFF  5F3,FEC
0303A:  MOVLB  5
0303C:  INCF   x89,F
....................           
....................    for(h=0;h<media;h++) 
0303E:  CLRF   x88
03040:  MOVLB  8
03042:  MOVF   x60,W
03044:  MOVLB  5
03046:  SUBWF  x88,W
03048:  BC    30C6
....................    { 
....................       Prom+=promedio[h]; 
0304A:  MOVLB  8
0304C:  CLRF   x65
0304E:  MOVFF  588,864
03052:  CLRF   x67
03054:  MOVLW  04
03056:  MOVWF  x66
03058:  MOVLB  0
0305A:  RCALL  2AEC
0305C:  MOVFF  02,03
03060:  MOVF   01,W
03062:  ADDLW  17
03064:  MOVWF  FE9
03066:  MOVLW  04
03068:  ADDWFC 02,W
0306A:  MOVWF  FEA
0306C:  MOVFF  FEF,00
03070:  MOVFF  FEC,01
03074:  MOVFF  FEC,02
03078:  MOVFF  FEC,03
0307C:  MOVFF  FEA,862
03080:  MOVFF  FE9,861
03084:  BCF    FD8.1
03086:  MOVFF  603,869
0308A:  MOVFF  602,868
0308E:  MOVFF  601,867
03092:  MOVFF  600,866
03096:  MOVFF  03,86D
0309A:  MOVFF  02,86C
0309E:  MOVFF  01,86B
030A2:  MOVFF  00,86A
030A6:  RCALL  2B0E
030A8:  MOVFF  862,FEA
030AC:  MOVFF  861,FE9
030B0:  MOVFF  03,603
030B4:  MOVFF  02,602
030B8:  MOVFF  01,601
030BC:  MOVFF  00,600
....................    }  
030C0:  MOVLB  5
030C2:  INCF   x88,F
030C4:  BRA    3040
....................    Prom=Prom/media;    
030C6:  MOVLB  8
030C8:  CLRF   x67
030CA:  MOVFF  860,866
030CE:  MOVLB  0
030D0:  CALL   1D46
030D4:  MOVFF  603,867
030D8:  MOVFF  602,866
030DC:  MOVFF  601,865
030E0:  MOVFF  600,864
030E4:  MOVFF  03,86B
030E8:  MOVFF  02,86A
030EC:  MOVFF  01,869
030F0:  MOVFF  00,868
030F4:  RCALL  2D86
030F6:  MOVFF  03,603
030FA:  MOVFF  02,602
030FE:  MOVFF  01,601
03102:  MOVFF  00,600
....................    //Temperature=(Prom-100.0)/(0.385);  // Ecuación determinada por linealización en Matlab. Revisar este polinomio.   
....................    //Temperature=(1.5275*Prom)-299.23; // Recta dada por T 0°C-1200°C y ADC Modo Real    
....................    Temperature=(m*Prom)+b; // Recta dada por T 0°C-1200°C y ADC Modo Real 
03106:  MOVFF  63F,880
0310A:  MOVFF  63E,87F
0310E:  MOVFF  63D,87E
03112:  MOVFF  63C,87D
03116:  MOVFF  603,884
0311A:  MOVFF  602,883
0311E:  MOVFF  601,882
03122:  MOVFF  600,881
03126:  RCALL  2EE4
03128:  MOVFF  00,861
0312C:  MOVFF  01,862
03130:  MOVFF  02,863
03134:  MOVFF  03,864
03138:  BCF    FD8.1
0313A:  MOVFF  03,869
0313E:  MOVFF  02,868
03142:  MOVFF  01,867
03146:  MOVFF  00,866
0314A:  MOVFF  643,86D
0314E:  MOVFF  642,86C
03152:  MOVFF  641,86B
03156:  MOVFF  640,86A
0315A:  RCALL  2B0E
0315C:  MOVFF  03,607
03160:  MOVFF  02,606
03164:  MOVFF  01,605
03168:  MOVFF  00,604
....................     
....................    Temperature+=((float)Ajuste-(float)Ajusten); 
0316C:  MOVLB  8
0316E:  CLRF   x67
03170:  MOVFF  58A,866
03174:  MOVLB  0
03176:  CALL   1D46
0317A:  MOVFF  00,861
0317E:  MOVFF  01,862
03182:  MOVFF  02,863
03186:  MOVFF  03,864
0318A:  MOVLB  8
0318C:  CLRF   x67
0318E:  MOVFF  58B,866
03192:  MOVLB  0
03194:  CALL   1D46
03198:  BSF    FD8.1
0319A:  MOVFF  864,869
0319E:  MOVFF  863,868
031A2:  MOVFF  862,867
031A6:  MOVFF  861,866
031AA:  MOVFF  03,86D
031AE:  MOVFF  02,86C
031B2:  MOVFF  01,86B
031B6:  MOVFF  00,86A
031BA:  RCALL  2B0E
031BC:  BCF    FD8.1
031BE:  MOVFF  607,869
031C2:  MOVFF  606,868
031C6:  MOVFF  605,867
031CA:  MOVFF  604,866
031CE:  MOVFF  03,86D
031D2:  MOVFF  02,86C
031D6:  MOVFF  01,86B
031DA:  MOVFF  00,86A
031DE:  RCALL  2B0E
031E0:  MOVFF  03,607
031E4:  MOVFF  02,606
031E8:  MOVFF  01,605
031EC:  MOVFF  00,604
....................     
....................    //return Prom; 
....................    return Temperature; 
031F0:  MOVFF  604,00
031F4:  MOVFF  605,01
031F8:  MOVFF  606,02
031FC:  MOVFF  607,03
.................... } 
03200:  RETLW  00
....................  
.................... void Controla(){ 
.................... //-------------------------------Control de Calentamiento------------------------------------------------------------//          
....................    if(tiemporecta>=10) 
*
054A8:  MOVLB  5
054AA:  MOVF   x8D,W
054AC:  SUBLW  09
054AE:  BC    54B8
....................    { 
....................       ActualizaRecta(); 
054B0:  MOVLB  0
054B2:  BRA    5192
....................       tiemporecta=0; 
054B4:  MOVLB  5
054B6:  CLRF   x8D
....................    } 
....................    
....................    if(Segmento==0){ 
054B8:  MOVF   x93,F
054BA:  BTFSS  FD8.2
054BC:  BRA    578C
....................       if(flag_calcula==0){ 
054BE:  BTFSC  x95.1
054C0:  BRA    578A
....................          Tiempo=(Horas1[ProgramaSeleccionado*Pasos]*3600)+(Minutos1[ProgramaSeleccionado*Pasos]*60);          
054C2:  MOVF   xA4,W
054C4:  MULLW  10
054C6:  MOVFF  FF3,00
054CA:  BCF    FD8.0
054CC:  RLCF   00,F
054CE:  MOVF   00,W
054D0:  CLRF   03
054D2:  MOVWF  FE9
054D4:  MOVLW  07
054D6:  ADDWF  03,W
054D8:  MOVWF  FEA
054DA:  MOVFF  FEC,861
054DE:  MOVF   FED,F
054E0:  MOVFF  FEF,860
054E4:  MOVFF  861,865
054E8:  MOVFF  860,864
054EC:  MOVLW  0E
054EE:  MOVLB  8
054F0:  MOVWF  x67
054F2:  MOVLW  10
054F4:  MOVWF  x66
054F6:  MOVLB  0
054F8:  CALL   3A3C
054FC:  MOVFF  02,861
05500:  MOVFF  01,860
05504:  MOVLB  5
05506:  MOVF   xA4,W
05508:  MULLW  10
0550A:  MOVFF  FF3,00
0550E:  BCF    FD8.0
05510:  RLCF   00,F
05512:  MOVF   00,W
05514:  CLRF   03
05516:  ADDLW  A0
05518:  MOVWF  FE9
0551A:  MOVLW  07
0551C:  ADDWFC 03,W
0551E:  MOVWF  FEA
05520:  MOVFF  FEC,863
05524:  MOVF   FED,F
05526:  MOVFF  FEF,862
0552A:  MOVFF  863,865
0552E:  MOVFF  862,864
05532:  MOVLB  8
05534:  CLRF   x67
05536:  MOVLW  3C
05538:  MOVWF  x66
0553A:  MOVLB  0
0553C:  CALL   3A3C
05540:  MOVFF  02,03
05544:  MOVF   01,W
05546:  MOVLB  8
05548:  ADDWF  x60,W
0554A:  MOVWF  01
0554C:  MOVF   x61,W
0554E:  ADDWFC 03,F
05550:  MOVFF  01,864
05554:  MOVFF  03,865
05558:  MOVLB  0
0555A:  CALL   3A90
0555E:  MOVFF  03,5C3
05562:  MOVFF  02,5C2
05566:  MOVFF  01,5C1
0556A:  MOVFF  00,5C0
....................          Setpoint=Temperatura1[(ProgramaSeleccionado*Pasos)+Segmento]; 
0556E:  MOVLB  5
05570:  MOVF   xA4,W
05572:  MULLW  10
05574:  MOVF   FF3,W
05576:  ADDWF  x93,W
05578:  MOVWF  00
0557A:  BCF    FD8.0
0557C:  RLCF   00,F
0557E:  MOVF   00,W
05580:  CLRF   03
05582:  ADDLW  60
05584:  MOVWF  FE9
05586:  MOVLW  06
05588:  ADDWFC 03,W
0558A:  MOVWF  FEA
0558C:  MOVFF  FEC,03
05590:  MOVF   FED,F
05592:  MOVFF  FEF,864
05596:  MOVFF  03,865
0559A:  MOVLB  0
0559C:  CALL   3A90
055A0:  MOVFF  03,633
055A4:  MOVFF  02,632
055A8:  MOVFF  01,631
055AC:  MOVFF  00,630
....................          Pendiente=((Setpoint-TempeInicial)/Tiempo); 
055B0:  BSF    FD8.1
055B2:  MOVFF  633,869
055B6:  MOVFF  632,868
055BA:  MOVFF  631,867
055BE:  MOVFF  630,866
055C2:  MOVFF  5BF,86D
055C6:  MOVFF  5BE,86C
055CA:  MOVFF  5BD,86B
055CE:  MOVFF  5BC,86A
055D2:  CALL   2B0E
055D6:  MOVFF  00,860
055DA:  MOVFF  01,861
055DE:  MOVFF  02,862
055E2:  MOVFF  03,863
055E6:  MOVFF  03,867
055EA:  MOVFF  02,866
055EE:  MOVFF  01,865
055F2:  MOVFF  00,864
055F6:  MOVFF  5C3,86B
055FA:  MOVFF  5C2,86A
055FE:  MOVFF  5C1,869
05602:  MOVFF  5C0,868
05606:  CALL   2D86
0560A:  MOVFF  03,62B
0560E:  MOVFF  02,62A
05612:  MOVFF  01,629
05616:  MOVFF  00,628
....................          Testerilizacionp[3]=(int8)Horas1[(ProgramaSeleccionado*Pasos)+Segmento]/10; 
0561A:  MOVLB  5
0561C:  MOVF   xA4,W
0561E:  MULLW  10
05620:  MOVF   FF3,W
05622:  ADDWF  x93,W
05624:  MOVWF  00
05626:  BCF    FD8.0
05628:  RLCF   00,F
0562A:  MOVF   00,W
0562C:  CLRF   03
0562E:  MOVWF  FE9
05630:  MOVLW  07
05632:  ADDWF  03,W
05634:  MOVWF  FEA
05636:  MOVFF  FEF,87C
0563A:  MOVLW  0A
0563C:  MOVLB  8
0563E:  MOVWF  x7D
05640:  MOVLB  0
05642:  CALL   1B64
05646:  MOVFF  01,5E7
0564A:  MOVLB  5
....................          Testerilizacionp[2]=Horas1[(ProgramaSeleccionado*Pasos)+Segmento]-(Testerilizacionp[3]*10); 
0564C:  MOVF   xA4,W
0564E:  MULLW  10
05650:  MOVF   FF3,W
05652:  ADDWF  x93,W
05654:  MOVWF  00
05656:  BCF    FD8.0
05658:  RLCF   00,F
0565A:  MOVF   00,W
0565C:  CLRF   03
0565E:  MOVWF  FE9
05660:  MOVLW  07
05662:  ADDWF  03,W
05664:  MOVWF  FEA
05666:  MOVFF  FEC,861
0566A:  MOVF   FED,F
0566C:  MOVFF  FEF,860
05670:  MOVFF  5E7,881
05674:  MOVLW  0A
05676:  MOVLB  8
05678:  MOVWF  x82
0567A:  MOVLB  0
0567C:  CALL   3AE0
05680:  MOVF   01,W
05682:  CLRF   03
05684:  MOVWF  00
05686:  BTFSC  FE8.7
05688:  DECF   03,F
0568A:  MOVLB  8
0568C:  SUBWF  x60,W
0568E:  MOVWF  00
05690:  MOVF   03,W
05692:  SUBWFB x61,W
05694:  MOVFF  00,5E6
05698:  MOVLB  5
....................          Testerilizacionp[1]=Minutos1[(ProgramaSeleccionado*Pasos)+Segmento]/10; 
0569A:  MOVF   xA4,W
0569C:  MULLW  10
0569E:  MOVF   FF3,W
056A0:  ADDWF  x93,W
056A2:  MOVWF  00
056A4:  BCF    FD8.0
056A6:  RLCF   00,F
056A8:  MOVF   00,W
056AA:  CLRF   03
056AC:  ADDLW  A0
056AE:  MOVWF  FE9
056B0:  MOVLW  07
056B2:  ADDWFC 03,W
056B4:  MOVWF  FEA
056B6:  MOVFF  FEC,861
056BA:  MOVF   FED,F
056BC:  MOVFF  FEF,860
056C0:  MOVFF  861,863
056C4:  MOVFF  860,862
056C8:  MOVLB  8
056CA:  CLRF   x65
056CC:  MOVLW  0A
056CE:  MOVWF  x64
056D0:  MOVLB  0
056D2:  CALL   3B2E
056D6:  MOVFF  01,5E5
056DA:  MOVLB  5
....................          Testerilizacionp[0]=Minutos1[(ProgramaSeleccionado*Pasos)+Segmento]-(Testerilizacionp[1]*10); 
056DC:  MOVF   xA4,W
056DE:  MULLW  10
056E0:  MOVF   FF3,W
056E2:  ADDWF  x93,W
056E4:  MOVWF  00
056E6:  BCF    FD8.0
056E8:  RLCF   00,F
056EA:  MOVF   00,W
056EC:  CLRF   03
056EE:  ADDLW  A0
056F0:  MOVWF  FE9
056F2:  MOVLW  07
056F4:  ADDWFC 03,W
056F6:  MOVWF  FEA
056F8:  MOVFF  FEC,861
056FC:  MOVF   FED,F
056FE:  MOVFF  FEF,860
05702:  MOVFF  5E5,881
05706:  MOVLW  0A
05708:  MOVLB  8
0570A:  MOVWF  x82
0570C:  MOVLB  0
0570E:  CALL   3AE0
05712:  MOVF   01,W
05714:  CLRF   03
05716:  MOVWF  00
05718:  BTFSC  FE8.7
0571A:  DECF   03,F
0571C:  MOVLB  8
0571E:  SUBWF  x60,W
05720:  MOVWF  00
05722:  MOVF   03,W
05724:  SUBWFB x61,W
05726:  MOVFF  00,5E4
0572A:  MOVLB  5
....................          flag_calcula=1; 
0572C:  BSF    x95.1
....................          Ganancia=GananciaIn*(Setpoint/Coeficiente); 
0572E:  MOVFF  633,867
05732:  MOVFF  632,866
05736:  MOVFF  631,865
0573A:  MOVFF  630,864
0573E:  MOVFF  61B,86B
05742:  MOVFF  61A,86A
05746:  MOVFF  619,869
0574A:  MOVFF  618,868
0574E:  MOVLB  0
05750:  CALL   2D86
05754:  MOVFF  60F,880
05758:  MOVFF  60E,87F
0575C:  MOVFF  60D,87E
05760:  MOVFF  60C,87D
05764:  MOVFF  03,884
05768:  MOVFF  02,883
0576C:  MOVFF  01,882
05770:  MOVFF  00,881
05774:  CALL   2EE4
05778:  MOVFF  03,613
0577C:  MOVFF  02,612
05780:  MOVFF  01,611
05784:  MOVFF  00,610
05788:  MOVLB  5
....................       } 
....................    } 
....................    else{ 
0578A:  BRA    5A8A
....................       if(flag_calcula==0){ 
0578C:  BTFSC  x95.1
0578E:  BRA    5A8A
....................          Tiempo=(Horas1[(ProgramaSeleccionado*Pasos)+Segmento]*3600)+(Minutos1[(ProgramaSeleccionado*Pasos)+Segmento]*60); 
05790:  MOVF   xA4,W
05792:  MULLW  10
05794:  MOVF   FF3,W
05796:  ADDWF  x93,W
05798:  MOVWF  00
0579A:  BCF    FD8.0
0579C:  RLCF   00,F
0579E:  MOVF   00,W
057A0:  CLRF   03
057A2:  MOVWF  FE9
057A4:  MOVLW  07
057A6:  ADDWF  03,W
057A8:  MOVWF  FEA
057AA:  MOVFF  FEC,861
057AE:  MOVF   FED,F
057B0:  MOVFF  FEF,860
057B4:  MOVFF  861,865
057B8:  MOVFF  860,864
057BC:  MOVLW  0E
057BE:  MOVLB  8
057C0:  MOVWF  x67
057C2:  MOVLW  10
057C4:  MOVWF  x66
057C6:  MOVLB  0
057C8:  CALL   3A3C
057CC:  MOVFF  02,861
057D0:  MOVFF  01,860
057D4:  MOVLB  5
057D6:  MOVF   xA4,W
057D8:  MULLW  10
057DA:  MOVF   FF3,W
057DC:  ADDWF  x93,W
057DE:  MOVWF  00
057E0:  BCF    FD8.0
057E2:  RLCF   00,F
057E4:  MOVF   00,W
057E6:  CLRF   03
057E8:  ADDLW  A0
057EA:  MOVWF  FE9
057EC:  MOVLW  07
057EE:  ADDWFC 03,W
057F0:  MOVWF  FEA
057F2:  MOVFF  FEC,863
057F6:  MOVF   FED,F
057F8:  MOVFF  FEF,862
057FC:  MOVFF  863,865
05800:  MOVFF  862,864
05804:  MOVLB  8
05806:  CLRF   x67
05808:  MOVLW  3C
0580A:  MOVWF  x66
0580C:  MOVLB  0
0580E:  CALL   3A3C
05812:  MOVFF  02,03
05816:  MOVF   01,W
05818:  MOVLB  8
0581A:  ADDWF  x60,W
0581C:  MOVWF  01
0581E:  MOVF   x61,W
05820:  ADDWFC 03,F
05822:  MOVFF  01,864
05826:  MOVFF  03,865
0582A:  MOVLB  0
0582C:  CALL   3A90
05830:  MOVFF  03,5C3
05834:  MOVFF  02,5C2
05838:  MOVFF  01,5C1
0583C:  MOVFF  00,5C0
....................          Pendiente=((Temperatura1[(ProgramaSeleccionado*Pasos)+Segmento]-Temperatura1[(ProgramaSeleccionado*Pasos)+Segmento-1])/Tiempo); 
05840:  MOVLB  5
05842:  MOVF   xA4,W
05844:  MULLW  10
05846:  MOVF   FF3,W
05848:  ADDWF  x93,W
0584A:  MOVWF  00
0584C:  BCF    FD8.0
0584E:  RLCF   00,F
05850:  MOVF   00,W
05852:  CLRF   03
05854:  ADDLW  60
05856:  MOVWF  FE9
05858:  MOVLW  06
0585A:  ADDWFC 03,W
0585C:  MOVWF  FEA
0585E:  MOVFF  FEC,861
05862:  MOVF   FED,F
05864:  MOVFF  FEF,860
05868:  MOVF   xA4,W
0586A:  MULLW  10
0586C:  MOVF   FF3,W
0586E:  ADDWF  x93,W
05870:  ADDLW  FF
05872:  MOVWF  00
05874:  BCF    FD8.0
05876:  RLCF   00,F
05878:  MOVF   00,W
0587A:  CLRF   03
0587C:  ADDLW  60
0587E:  MOVWF  FE9
05880:  MOVLW  06
05882:  ADDWFC 03,W
05884:  MOVWF  FEA
05886:  MOVFF  FEC,03
0588A:  MOVF   FED,F
0588C:  MOVF   FEF,W
0588E:  MOVLB  8
05890:  SUBWF  x60,F
05892:  MOVF   03,W
05894:  SUBWFB x61,F
05896:  MOVFF  861,865
0589A:  MOVFF  860,864
0589E:  MOVLB  0
058A0:  CALL   3A90
058A4:  MOVFF  03,867
058A8:  MOVFF  02,866
058AC:  MOVFF  01,865
058B0:  MOVFF  00,864
058B4:  MOVFF  5C3,86B
058B8:  MOVFF  5C2,86A
058BC:  MOVFF  5C1,869
058C0:  MOVFF  5C0,868
058C4:  CALL   2D86
058C8:  MOVFF  03,62B
058CC:  MOVFF  02,62A
058D0:  MOVFF  01,629
058D4:  MOVFF  00,628
....................          Setpoint=Temperatura1[(ProgramaSeleccionado*Pasos)+Segmento]; 
058D8:  MOVLB  5
058DA:  MOVF   xA4,W
058DC:  MULLW  10
058DE:  MOVF   FF3,W
058E0:  ADDWF  x93,W
058E2:  MOVWF  00
058E4:  BCF    FD8.0
058E6:  RLCF   00,F
058E8:  MOVF   00,W
058EA:  CLRF   03
058EC:  ADDLW  60
058EE:  MOVWF  FE9
058F0:  MOVLW  06
058F2:  ADDWFC 03,W
058F4:  MOVWF  FEA
058F6:  MOVFF  FEC,03
058FA:  MOVF   FED,F
058FC:  MOVFF  FEF,864
05900:  MOVFF  03,865
05904:  MOVLB  0
05906:  CALL   3A90
0590A:  MOVFF  03,633
0590E:  MOVFF  02,632
05912:  MOVFF  01,631
05916:  MOVFF  00,630
....................          Testerilizacionp[3]=(int8)Horas1[(ProgramaSeleccionado*Pasos)+Segmento]/10; 
0591A:  MOVLB  5
0591C:  MOVF   xA4,W
0591E:  MULLW  10
05920:  MOVF   FF3,W
05922:  ADDWF  x93,W
05924:  MOVWF  00
05926:  BCF    FD8.0
05928:  RLCF   00,F
0592A:  MOVF   00,W
0592C:  CLRF   03
0592E:  MOVWF  FE9
05930:  MOVLW  07
05932:  ADDWF  03,W
05934:  MOVWF  FEA
05936:  MOVFF  FEF,87C
0593A:  MOVLW  0A
0593C:  MOVLB  8
0593E:  MOVWF  x7D
05940:  MOVLB  0
05942:  CALL   1B64
05946:  MOVFF  01,5E7
0594A:  MOVLB  5
....................          Testerilizacionp[2]=Horas1[(ProgramaSeleccionado*Pasos)+Segmento]-(Testerilizacionp[3]*10); 
0594C:  MOVF   xA4,W
0594E:  MULLW  10
05950:  MOVF   FF3,W
05952:  ADDWF  x93,W
05954:  MOVWF  00
05956:  BCF    FD8.0
05958:  RLCF   00,F
0595A:  MOVF   00,W
0595C:  CLRF   03
0595E:  MOVWF  FE9
05960:  MOVLW  07
05962:  ADDWF  03,W
05964:  MOVWF  FEA
05966:  MOVFF  FEC,861
0596A:  MOVF   FED,F
0596C:  MOVFF  FEF,860
05970:  MOVFF  5E7,881
05974:  MOVLW  0A
05976:  MOVLB  8
05978:  MOVWF  x82
0597A:  MOVLB  0
0597C:  CALL   3AE0
05980:  MOVF   01,W
05982:  CLRF   03
05984:  MOVWF  00
05986:  BTFSC  FE8.7
05988:  DECF   03,F
0598A:  MOVLB  8
0598C:  SUBWF  x60,W
0598E:  MOVWF  00
05990:  MOVF   03,W
05992:  SUBWFB x61,W
05994:  MOVFF  00,5E6
05998:  MOVLB  5
....................          Testerilizacionp[1]=Minutos1[(ProgramaSeleccionado*Pasos)+Segmento]/10; 
0599A:  MOVF   xA4,W
0599C:  MULLW  10
0599E:  MOVF   FF3,W
059A0:  ADDWF  x93,W
059A2:  MOVWF  00
059A4:  BCF    FD8.0
059A6:  RLCF   00,F
059A8:  MOVF   00,W
059AA:  CLRF   03
059AC:  ADDLW  A0
059AE:  MOVWF  FE9
059B0:  MOVLW  07
059B2:  ADDWFC 03,W
059B4:  MOVWF  FEA
059B6:  MOVFF  FEC,861
059BA:  MOVF   FED,F
059BC:  MOVFF  FEF,860
059C0:  MOVFF  861,863
059C4:  MOVFF  860,862
059C8:  MOVLB  8
059CA:  CLRF   x65
059CC:  MOVLW  0A
059CE:  MOVWF  x64
059D0:  MOVLB  0
059D2:  CALL   3B2E
059D6:  MOVFF  01,5E5
059DA:  MOVLB  5
....................          Testerilizacionp[0]=Minutos1[(ProgramaSeleccionado*Pasos)+Segmento]-(Testerilizacionp[1]*10); 
059DC:  MOVF   xA4,W
059DE:  MULLW  10
059E0:  MOVF   FF3,W
059E2:  ADDWF  x93,W
059E4:  MOVWF  00
059E6:  BCF    FD8.0
059E8:  RLCF   00,F
059EA:  MOVF   00,W
059EC:  CLRF   03
059EE:  ADDLW  A0
059F0:  MOVWF  FE9
059F2:  MOVLW  07
059F4:  ADDWFC 03,W
059F6:  MOVWF  FEA
059F8:  MOVFF  FEC,861
059FC:  MOVF   FED,F
059FE:  MOVFF  FEF,860
05A02:  MOVFF  5E5,881
05A06:  MOVLW  0A
05A08:  MOVLB  8
05A0A:  MOVWF  x82
05A0C:  MOVLB  0
05A0E:  CALL   3AE0
05A12:  MOVF   01,W
05A14:  CLRF   03
05A16:  MOVWF  00
05A18:  BTFSC  FE8.7
05A1A:  DECF   03,F
05A1C:  MOVLB  8
05A1E:  SUBWF  x60,W
05A20:  MOVWF  00
05A22:  MOVF   03,W
05A24:  SUBWFB x61,W
05A26:  MOVFF  00,5E4
05A2A:  MOVLB  5
....................          flag_calcula=1; 
05A2C:  BSF    x95.1
....................          Ganancia=GananciaIn*(Setpoint/Coeficiente); 
05A2E:  MOVFF  633,867
05A32:  MOVFF  632,866
05A36:  MOVFF  631,865
05A3A:  MOVFF  630,864
05A3E:  MOVFF  61B,86B
05A42:  MOVFF  61A,86A
05A46:  MOVFF  619,869
05A4A:  MOVFF  618,868
05A4E:  MOVLB  0
05A50:  CALL   2D86
05A54:  MOVFF  60F,880
05A58:  MOVFF  60E,87F
05A5C:  MOVFF  60D,87E
05A60:  MOVFF  60C,87D
05A64:  MOVFF  03,884
05A68:  MOVFF  02,883
05A6C:  MOVFF  01,882
05A70:  MOVFF  00,881
05A74:  CALL   2EE4
05A78:  MOVFF  03,613
05A7C:  MOVFF  02,612
05A80:  MOVFF  01,611
05A84:  MOVFF  00,610
05A88:  MOVLB  5
....................       } 
....................    } 
....................     
....................    if(Pendiente==0){// Si Esta realizando una Meseta debe realizar el control JuDifuso 
05A8A:  MOVFF  62B,863
05A8E:  MOVFF  62A,862
05A92:  MOVFF  629,861
05A96:  MOVFF  628,860
05A9A:  MOVLB  8
05A9C:  CLRF   x67
05A9E:  CLRF   x66
05AA0:  CLRF   x65
05AA2:  CLRF   x64
05AA4:  MOVLB  0
05AA6:  CALL   1D7C
05AAA:  BTFSS  FD8.2
05AAC:  BRA    5E64
....................       error=desvio+Setpoint-Temperatura;      // Cálculo del error ****** 
05AAE:  BCF    FD8.1
05AB0:  MOVFF  617,869
05AB4:  MOVFF  616,868
05AB8:  MOVFF  615,867
05ABC:  MOVFF  614,866
05AC0:  MOVFF  633,86D
05AC4:  MOVFF  632,86C
05AC8:  MOVFF  631,86B
05ACC:  MOVFF  630,86A
05AD0:  CALL   2B0E
05AD4:  MOVFF  00,860
05AD8:  MOVFF  01,861
05ADC:  MOVFF  02,862
05AE0:  MOVFF  03,863
05AE4:  BSF    FD8.1
05AE6:  MOVFF  03,869
05AEA:  MOVFF  02,868
05AEE:  MOVFF  01,867
05AF2:  MOVFF  00,866
05AF6:  MOVFF  627,86D
05AFA:  MOVFF  626,86C
05AFE:  MOVFF  625,86B
05B02:  MOVFF  624,86A
05B06:  CALL   2B0E
05B0A:  MOVFF  03,5FF
05B0E:  MOVFF  02,5FE
05B12:  MOVFF  01,5FD
05B16:  MOVFF  00,5FC
....................        
....................       if(error>3.0 && Aumento<1) 
05B1A:  MOVLB  8
05B1C:  CLRF   x63
05B1E:  CLRF   x62
05B20:  MOVLW  40
05B22:  MOVWF  x61
05B24:  MOVLW  80
05B26:  MOVWF  x60
05B28:  MOVFF  5FF,867
05B2C:  MOVFF  5FE,866
05B30:  MOVFF  5FD,865
05B34:  MOVFF  5FC,864
05B38:  MOVLB  0
05B3A:  CALL   1D7C
05B3E:  BTFSS  FD8.0
05B40:  BRA    5D04
05B42:  MOVFF  623,863
05B46:  MOVFF  622,862
05B4A:  MOVFF  621,861
05B4E:  MOVFF  620,860
05B52:  MOVLB  8
05B54:  CLRF   x67
05B56:  CLRF   x66
05B58:  CLRF   x65
05B5A:  MOVLW  7F
05B5C:  MOVWF  x64
05B5E:  MOVLB  0
05B60:  CALL   1D7C
05B64:  BTFSS  FD8.0
05B66:  BRA    5D04
....................       { 
....................          if(Potencia<90.0) 
05B68:  MOVFF  5DB,863
05B6C:  MOVFF  5DA,862
05B70:  MOVFF  5D9,861
05B74:  MOVFF  5D8,860
05B78:  MOVLB  8
05B7A:  CLRF   x67
05B7C:  CLRF   x66
05B7E:  MOVLW  34
05B80:  MOVWF  x65
05B82:  MOVLW  85
05B84:  MOVWF  x64
05B86:  MOVLB  0
05B88:  CALL   1D7C
05B8C:  BTFSS  FD8.0
05B8E:  BRA    5D04
....................          { 
....................             if(TiempoControl>=Derivativo) 
05B90:  MOVLB  8
05B92:  CLRF   x67
05B94:  MOVFF  5A1,866
05B98:  MOVLB  0
05B9A:  CALL   1D46
05B9E:  MOVFF  63B,863
05BA2:  MOVFF  63A,862
05BA6:  MOVFF  639,861
05BAA:  MOVFF  638,860
05BAE:  MOVFF  03,867
05BB2:  MOVFF  02,866
05BB6:  MOVFF  01,865
05BBA:  MOVFF  00,864
05BBE:  CALL   1D7C
05BC2:  BC    5BC8
05BC4:  BTFSS  FD8.2
05BC6:  BRA    5D04
....................             { 
....................                TiempoControl=0; 
05BC8:  MOVLB  5
05BCA:  CLRF   xA1
....................                if(Aumento<-2) 
05BCC:  MOVFF  623,863
05BD0:  MOVFF  622,862
05BD4:  MOVFF  621,861
05BD8:  MOVFF  620,860
05BDC:  MOVLB  8
05BDE:  CLRF   x67
05BE0:  CLRF   x66
05BE2:  MOVLW  80
05BE4:  MOVWF  x65
05BE6:  MOVWF  x64
05BE8:  MOVLB  0
05BEA:  CALL   1D7C
05BEE:  BNC   5C4C
....................                { 
....................                   Ganancia+=Integral+1; 
05BF0:  BCF    FD8.1
05BF2:  MOVFF  637,869
05BF6:  MOVFF  636,868
05BFA:  MOVFF  635,867
05BFE:  MOVFF  634,866
05C02:  MOVLB  8
05C04:  CLRF   x6D
05C06:  CLRF   x6C
05C08:  CLRF   x6B
05C0A:  MOVLW  7F
05C0C:  MOVWF  x6A
05C0E:  MOVLB  0
05C10:  CALL   2B0E
05C14:  BCF    FD8.1
05C16:  MOVFF  613,869
05C1A:  MOVFF  612,868
05C1E:  MOVFF  611,867
05C22:  MOVFF  610,866
05C26:  MOVFF  03,86D
05C2A:  MOVFF  02,86C
05C2E:  MOVFF  01,86B
05C32:  MOVFF  00,86A
05C36:  CALL   2B0E
05C3A:  MOVFF  03,613
05C3E:  MOVFF  02,612
05C42:  MOVFF  01,611
05C46:  MOVFF  00,610
....................                } 
....................                else 
05C4A:  BRA    5D04
....................                { 
....................                   if(Aumento<-1) 
05C4C:  MOVFF  623,863
05C50:  MOVFF  622,862
05C54:  MOVFF  621,861
05C58:  MOVFF  620,860
05C5C:  MOVLB  8
05C5E:  CLRF   x67
05C60:  CLRF   x66
05C62:  MOVLW  80
05C64:  MOVWF  x65
05C66:  MOVLW  7F
05C68:  MOVWF  x64
05C6A:  MOVLB  0
05C6C:  CALL   1D7C
05C70:  BNC   5CAA
....................                   { 
....................                      Ganancia+=Integral; 
05C72:  BCF    FD8.1
05C74:  MOVFF  613,869
05C78:  MOVFF  612,868
05C7C:  MOVFF  611,867
05C80:  MOVFF  610,866
05C84:  MOVFF  637,86D
05C88:  MOVFF  636,86C
05C8C:  MOVFF  635,86B
05C90:  MOVFF  634,86A
05C94:  CALL   2B0E
05C98:  MOVFF  03,613
05C9C:  MOVFF  02,612
05CA0:  MOVFF  01,611
05CA4:  MOVFF  00,610
....................                   }    
....................                   else 
05CA8:  BRA    5D04
....................                   { 
....................                      Ganancia+=Integral-0.5; 
05CAA:  BSF    FD8.1
05CAC:  MOVFF  637,869
05CB0:  MOVFF  636,868
05CB4:  MOVFF  635,867
05CB8:  MOVFF  634,866
05CBC:  MOVLB  8
05CBE:  CLRF   x6D
05CC0:  CLRF   x6C
05CC2:  CLRF   x6B
05CC4:  MOVLW  7E
05CC6:  MOVWF  x6A
05CC8:  MOVLB  0
05CCA:  CALL   2B0E
05CCE:  BCF    FD8.1
05CD0:  MOVFF  613,869
05CD4:  MOVFF  612,868
05CD8:  MOVFF  611,867
05CDC:  MOVFF  610,866
05CE0:  MOVFF  03,86D
05CE4:  MOVFF  02,86C
05CE8:  MOVFF  01,86B
05CEC:  MOVFF  00,86A
05CF0:  CALL   2B0E
05CF4:  MOVFF  03,613
05CF8:  MOVFF  02,612
05CFC:  MOVFF  01,611
05D00:  MOVFF  00,610
....................                   } 
....................                } 
....................             } 
....................          } 
....................       } 
....................        
....................       //if(error<-5) 
....................       //{ 
....................       //   Ganancia=6*(Setpoint/100); 
....................       //} 
....................        
....................       if(Ganancia<0.5) 
05D04:  MOVFF  613,863
05D08:  MOVFF  612,862
05D0C:  MOVFF  611,861
05D10:  MOVFF  610,860
05D14:  MOVLB  8
05D16:  CLRF   x67
05D18:  CLRF   x66
05D1A:  CLRF   x65
05D1C:  MOVLW  7E
05D1E:  MOVWF  x64
05D20:  MOVLB  0
05D22:  CALL   1D7C
05D26:  BNC   5D34
....................       { 
....................          Ganancia=0.5; 
05D28:  MOVLB  6
05D2A:  CLRF   x13
05D2C:  CLRF   x12
05D2E:  CLRF   x11
05D30:  MOVLW  7E
05D32:  MOVWF  x10
....................       } 
....................        
....................        
....................       if(error<0.0)     // Anti Wind_DOWN     
05D34:  MOVFF  5FF,863
05D38:  MOVFF  5FE,862
05D3C:  MOVFF  5FD,861
05D40:  MOVFF  5FC,860
05D44:  MOVLB  8
05D46:  CLRF   x67
05D48:  CLRF   x66
05D4A:  CLRF   x65
05D4C:  CLRF   x64
05D4E:  MOVLB  0
05D50:  CALL   1D7C
05D54:  BNC   5D62
....................       { 
....................          error=0.0; 
05D56:  MOVLB  5
05D58:  CLRF   xFF
05D5A:  CLRF   xFE
05D5C:  CLRF   xFD
05D5E:  CLRF   xFC
05D60:  MOVLB  0
....................       } 
....................     
....................       tmp=error*Ganancia;  // Control Proporcional. 
05D62:  MOVFF  5FF,880
05D66:  MOVFF  5FE,87F
05D6A:  MOVFF  5FD,87E
05D6E:  MOVFF  5FC,87D
05D72:  MOVFF  613,884
05D76:  MOVFF  612,883
05D7A:  MOVFF  611,882
05D7E:  MOVFF  610,881
05D82:  CALL   2EE4
05D86:  MOVFF  03,60B
05D8A:  MOVFF  02,60A
05D8E:  MOVFF  01,609
05D92:  MOVFF  00,608
....................              
....................       if(tmp>Setpoint)   // Anti Wind-UP       
05D96:  MOVFF  633,863
05D9A:  MOVFF  632,862
05D9E:  MOVFF  631,861
05DA2:  MOVFF  630,860
05DA6:  MOVFF  60B,867
05DAA:  MOVFF  60A,866
05DAE:  MOVFF  609,865
05DB2:  MOVFF  608,864
05DB6:  CALL   1D7C
05DBA:  BNC   5DCC
....................       { 
....................          tmp=Setpoint; 
05DBC:  MOVFF  633,60B
05DC0:  MOVFF  632,60A
05DC4:  MOVFF  631,609
05DC8:  MOVFF  630,608
....................       } 
....................                    
....................       if(tmp<0.0)     // Anti Wind_DOWN     
05DCC:  MOVFF  60B,863
05DD0:  MOVFF  60A,862
05DD4:  MOVFF  609,861
05DD8:  MOVFF  608,860
05DDC:  MOVLB  8
05DDE:  CLRF   x67
05DE0:  CLRF   x66
05DE2:  CLRF   x65
05DE4:  CLRF   x64
05DE6:  MOVLB  0
05DE8:  CALL   1D7C
05DEC:  BNC   5DFA
....................       { 
....................          tmp=0.0; 
05DEE:  MOVLB  6
05DF0:  CLRF   x0B
05DF2:  CLRF   x0A
05DF4:  CLRF   x09
05DF6:  CLRF   x08
05DF8:  MOVLB  0
....................       } 
....................        
....................       // Tpulso(t)= Tciclo*(y(t)-ymin)/(ymax - ymin); calculo de ciclo util para control de resistencia.ymax=140.ymin=0; 
....................       // Tpulso es float, hay que pasar ese ciclo a una salida de un puerto usando el TMR1. 
....................       Tpulso=(tmp/Setpoint)*Tciclo;  
05DFA:  MOVFF  60B,867
05DFE:  MOVFF  60A,866
05E02:  MOVFF  609,865
05E06:  MOVFF  608,864
05E0A:  MOVFF  633,86B
05E0E:  MOVFF  632,86A
05E12:  MOVFF  631,869
05E16:  MOVFF  630,868
05E1A:  CALL   2D86
05E1E:  MOVFF  00,860
05E22:  MOVFF  01,861
05E26:  MOVFF  02,862
05E2A:  MOVFF  03,863
05E2E:  MOVFF  03,880
05E32:  MOVFF  02,87F
05E36:  MOVFF  01,87E
05E3A:  MOVFF  00,87D
05E3E:  MOVFF  5F7,884
05E42:  MOVFF  5F6,883
05E46:  MOVFF  5F5,882
05E4A:  MOVFF  5F4,881
05E4E:  CALL   2EE4
05E52:  MOVFF  03,5FB
05E56:  MOVFF  02,5FA
05E5A:  MOVFF  01,5F9
05E5E:  MOVFF  00,5F8
....................    } 
....................    else{// Si Esta realizando una Rampa debe realizar el control de acuerdo a la pendiente de Temperatura. Aprox 10°C * min Maximo Valor de Pendiente. 
05E62:  BRA    6408
....................       PendienteMinutos=PendienteActual*60; 
05E64:  MOVFF  5CB,880
05E68:  MOVFF  5CA,87F
05E6C:  MOVFF  5C9,87E
05E70:  MOVFF  5C8,87D
05E74:  MOVLB  8
05E76:  CLRF   x84
05E78:  CLRF   x83
05E7A:  MOVLW  70
05E7C:  MOVWF  x82
05E7E:  MOVLW  84
05E80:  MOVWF  x81
05E82:  MOVLB  0
05E84:  CALL   2EE4
05E88:  MOVFF  03,5BB
05E8C:  MOVFF  02,5BA
05E90:  MOVFF  01,5B9
05E94:  MOVFF  00,5B8
....................       //PotenciaEntregada=((PendienteMinutos+DifPendiente)*100)/penMufla; 
....................       TiempoRampa=((HorasActual*3600)+(MinutosActual*60)+tinicio); 
05E98:  MOVFF  5CF,880
05E9C:  MOVFF  5CE,87F
05EA0:  MOVFF  5CD,87E
05EA4:  MOVFF  5CC,87D
05EA8:  MOVLB  8
05EAA:  CLRF   x84
05EAC:  CLRF   x83
05EAE:  MOVLW  61
05EB0:  MOVWF  x82
05EB2:  MOVLW  8A
05EB4:  MOVWF  x81
05EB6:  MOVLB  0
05EB8:  CALL   2EE4
05EBC:  MOVFF  00,860
05EC0:  MOVFF  01,861
05EC4:  MOVFF  02,862
05EC8:  MOVFF  03,863
05ECC:  MOVFF  5D3,880
05ED0:  MOVFF  5D2,87F
05ED4:  MOVFF  5D1,87E
05ED8:  MOVFF  5D0,87D
05EDC:  MOVLB  8
05EDE:  CLRF   x84
05EE0:  CLRF   x83
05EE2:  MOVLW  70
05EE4:  MOVWF  x82
05EE6:  MOVLW  84
05EE8:  MOVWF  x81
05EEA:  MOVLB  0
05EEC:  CALL   2EE4
05EF0:  BCF    FD8.1
05EF2:  MOVFF  863,869
05EF6:  MOVFF  862,868
05EFA:  MOVFF  861,867
05EFE:  MOVFF  860,866
05F02:  MOVFF  03,86D
05F06:  MOVFF  02,86C
05F0A:  MOVFF  01,86B
05F0E:  MOVFF  00,86A
05F12:  CALL   2B0E
05F16:  MOVFF  00,860
05F1A:  MOVFF  01,861
05F1E:  MOVFF  02,862
05F22:  MOVFF  03,863
05F26:  MOVFF  5AD,867
05F2A:  MOVFF  5AC,866
05F2E:  CALL   1D46
05F32:  BCF    FD8.1
05F34:  MOVFF  863,869
05F38:  MOVFF  862,868
05F3C:  MOVFF  861,867
05F40:  MOVFF  860,866
05F44:  MOVFF  03,86D
05F48:  MOVFF  02,86C
05F4C:  MOVFF  01,86B
05F50:  MOVFF  00,86A
05F54:  CALL   2B0E
05F58:  MOVFF  03,5D7
05F5C:  MOVFF  02,5D6
05F60:  MOVFF  01,5D5
05F64:  MOVFF  00,5D4
....................       if(Segmento==0){ 
05F68:  MOVLB  5
05F6A:  MOVF   x93,F
05F6C:  BNZ   5FDE
....................          TemperaturaIdeal=(Pendiente*TiempoRampa)+TempeInicial; 
05F6E:  MOVFF  62B,880
05F72:  MOVFF  62A,87F
05F76:  MOVFF  629,87E
05F7A:  MOVFF  628,87D
05F7E:  MOVFF  5D7,884
05F82:  MOVFF  5D6,883
05F86:  MOVFF  5D5,882
05F8A:  MOVFF  5D4,881
05F8E:  MOVLB  0
05F90:  CALL   2EE4
05F94:  MOVFF  00,860
05F98:  MOVFF  01,861
05F9C:  MOVFF  02,862
05FA0:  MOVFF  03,863
05FA4:  BCF    FD8.1
05FA6:  MOVFF  03,869
05FAA:  MOVFF  02,868
05FAE:  MOVFF  01,867
05FB2:  MOVFF  00,866
05FB6:  MOVFF  5BF,86D
05FBA:  MOVFF  5BE,86C
05FBE:  MOVFF  5BD,86B
05FC2:  MOVFF  5BC,86A
05FC6:  CALL   2B0E
05FCA:  MOVFF  03,65B
05FCE:  MOVFF  02,65A
05FD2:  MOVFF  01,659
05FD6:  MOVFF  00,658
....................       }else{ 
05FDA:  BRA    608E
05FDC:  MOVLB  5
....................          TemperaturaIdeal=(Pendiente*TiempoRampa)+Temperatura1[(ProgramaSeleccionado*Pasos)+Segmento-1]; 
05FDE:  MOVFF  62B,880
05FE2:  MOVFF  62A,87F
05FE6:  MOVFF  629,87E
05FEA:  MOVFF  628,87D
05FEE:  MOVFF  5D7,884
05FF2:  MOVFF  5D6,883
05FF6:  MOVFF  5D5,882
05FFA:  MOVFF  5D4,881
05FFE:  MOVLB  0
06000:  CALL   2EE4
06004:  MOVFF  00,860
06008:  MOVFF  01,861
0600C:  MOVFF  02,862
06010:  MOVFF  03,863
06014:  MOVLB  5
06016:  MOVF   xA4,W
06018:  MULLW  10
0601A:  MOVF   FF3,W
0601C:  ADDWF  x93,W
0601E:  ADDLW  FF
06020:  MOVWF  00
06022:  BCF    FD8.0
06024:  RLCF   00,F
06026:  MOVF   00,W
06028:  CLRF   03
0602A:  ADDLW  60
0602C:  MOVWF  FE9
0602E:  MOVLW  06
06030:  ADDWFC 03,W
06032:  MOVWF  FEA
06034:  MOVFF  FEC,03
06038:  MOVF   FED,F
0603A:  MOVFF  FEF,864
0603E:  MOVFF  03,865
06042:  MOVLB  0
06044:  CALL   3A90
06048:  MOVFF  FEA,865
0604C:  MOVFF  FE9,864
06050:  BCF    FD8.1
06052:  MOVFF  863,869
06056:  MOVFF  862,868
0605A:  MOVFF  861,867
0605E:  MOVFF  860,866
06062:  MOVFF  03,86D
06066:  MOVFF  02,86C
0606A:  MOVFF  01,86B
0606E:  MOVFF  00,86A
06072:  CALL   2B0E
06076:  MOVFF  865,FEA
0607A:  MOVFF  864,FE9
0607E:  MOVFF  03,65B
06082:  MOVFF  02,65A
06086:  MOVFF  01,659
0608A:  MOVFF  00,658
....................       } 
....................       PotenciaEntregada=((TemperaturaIdeal-Temperatura)*100)/penMufla; 
0608E:  BSF    FD8.1
06090:  MOVFF  65B,869
06094:  MOVFF  65A,868
06098:  MOVFF  659,867
0609C:  MOVFF  658,866
060A0:  MOVFF  627,86D
060A4:  MOVFF  626,86C
060A8:  MOVFF  625,86B
060AC:  MOVFF  624,86A
060B0:  CALL   2B0E
060B4:  MOVFF  00,860
060B8:  MOVFF  01,861
060BC:  MOVFF  02,862
060C0:  MOVFF  03,863
060C4:  MOVFF  03,880
060C8:  MOVFF  02,87F
060CC:  MOVFF  01,87E
060D0:  MOVFF  00,87D
060D4:  MOVLB  8
060D6:  CLRF   x84
060D8:  CLRF   x83
060DA:  MOVLW  48
060DC:  MOVWF  x82
060DE:  MOVLW  85
060E0:  MOVWF  x81
060E2:  MOVLB  0
060E4:  CALL   2EE4
060E8:  MOVFF  00,860
060EC:  MOVFF  01,861
060F0:  MOVFF  02,862
060F4:  MOVFF  03,863
060F8:  MOVFF  03,867
060FC:  MOVFF  02,866
06100:  MOVFF  01,865
06104:  MOVFF  00,864
06108:  MOVFF  657,86B
0610C:  MOVFF  656,86A
06110:  MOVFF  655,869
06114:  MOVFF  654,868
06118:  CALL   2D86
0611C:  MOVFF  03,5DF
06120:  MOVFF  02,5DE
06124:  MOVFF  01,5DD
06128:  MOVFF  00,5DC
.................... // Pendiente determinar si el comportamiento de la mufla es lineal 10°C/min o si tiene un comportamiento diferente. 
....................           
....................       if(Temperatura<450 && Temperatura>=200) 
0612C:  MOVFF  627,863
06130:  MOVFF  626,862
06134:  MOVFF  625,861
06138:  MOVFF  624,860
0613C:  MOVLB  8
0613E:  CLRF   x67
06140:  CLRF   x66
06142:  MOVLW  61
06144:  MOVWF  x65
06146:  MOVLW  87
06148:  MOVWF  x64
0614A:  MOVLB  0
0614C:  CALL   1D7C
06150:  BNC   61AE
06152:  MOVLB  8
06154:  CLRF   x63
06156:  CLRF   x62
06158:  MOVLW  48
0615A:  MOVWF  x61
0615C:  MOVLW  86
0615E:  MOVWF  x60
06160:  MOVFF  627,867
06164:  MOVFF  626,866
06168:  MOVFF  625,865
0616C:  MOVFF  624,864
06170:  MOVLB  0
06172:  CALL   1D7C
06176:  BC    617A
06178:  BNZ   61AE
....................          penMufla=penInicial*0.9; 
0617A:  MOVFF  65F,880
0617E:  MOVFF  65E,87F
06182:  MOVFF  65D,87E
06186:  MOVFF  65C,87D
0618A:  MOVLW  66
0618C:  MOVLB  8
0618E:  MOVWF  x84
06190:  MOVWF  x83
06192:  MOVWF  x82
06194:  MOVLW  7E
06196:  MOVWF  x81
06198:  MOVLB  0
0619A:  CALL   2EE4
0619E:  MOVFF  03,657
061A2:  MOVFF  02,656
061A6:  MOVFF  01,655
061AA:  MOVFF  00,654
....................           
....................       if(Temperatura<600 && Temperatura>=450) 
061AE:  MOVFF  627,863
061B2:  MOVFF  626,862
061B6:  MOVFF  625,861
061BA:  MOVFF  624,860
061BE:  MOVLB  8
061C0:  CLRF   x67
061C2:  CLRF   x66
061C4:  MOVLW  16
061C6:  MOVWF  x65
061C8:  MOVLW  88
061CA:  MOVWF  x64
061CC:  MOVLB  0
061CE:  CALL   1D7C
061D2:  BNC   6234
061D4:  MOVLB  8
061D6:  CLRF   x63
061D8:  CLRF   x62
061DA:  MOVLW  61
061DC:  MOVWF  x61
061DE:  MOVLW  87
061E0:  MOVWF  x60
061E2:  MOVFF  627,867
061E6:  MOVFF  626,866
061EA:  MOVFF  625,865
061EE:  MOVFF  624,864
061F2:  MOVLB  0
061F4:  CALL   1D7C
061F8:  BC    61FC
061FA:  BNZ   6234
....................          penMufla=penInicial*0.8; 
061FC:  MOVFF  65F,880
06200:  MOVFF  65E,87F
06204:  MOVFF  65D,87E
06208:  MOVFF  65C,87D
0620C:  MOVLW  CD
0620E:  MOVLB  8
06210:  MOVWF  x84
06212:  MOVLW  CC
06214:  MOVWF  x83
06216:  MOVLW  4C
06218:  MOVWF  x82
0621A:  MOVLW  7E
0621C:  MOVWF  x81
0621E:  MOVLB  0
06220:  CALL   2EE4
06224:  MOVFF  03,657
06228:  MOVFF  02,656
0622C:  MOVFF  01,655
06230:  MOVFF  00,654
....................           
....................       if(Temperatura<900 && Temperatura>=600) 
06234:  MOVFF  627,863
06238:  MOVFF  626,862
0623C:  MOVFF  625,861
06240:  MOVFF  624,860
06244:  MOVLB  8
06246:  CLRF   x67
06248:  CLRF   x66
0624A:  MOVLW  61
0624C:  MOVWF  x65
0624E:  MOVLW  88
06250:  MOVWF  x64
06252:  MOVLB  0
06254:  CALL   1D7C
06258:  BNC   62B6
0625A:  MOVLB  8
0625C:  CLRF   x63
0625E:  CLRF   x62
06260:  MOVLW  16
06262:  MOVWF  x61
06264:  MOVLW  88
06266:  MOVWF  x60
06268:  MOVFF  627,867
0626C:  MOVFF  626,866
06270:  MOVFF  625,865
06274:  MOVFF  624,864
06278:  MOVLB  0
0627A:  CALL   1D7C
0627E:  BC    6282
06280:  BNZ   62B6
....................          penMufla=penInicial*0.7;   
06282:  MOVFF  65F,880
06286:  MOVFF  65E,87F
0628A:  MOVFF  65D,87E
0628E:  MOVFF  65C,87D
06292:  MOVLW  33
06294:  MOVLB  8
06296:  MOVWF  x84
06298:  MOVWF  x83
0629A:  MOVWF  x82
0629C:  MOVLW  7E
0629E:  MOVWF  x81
062A0:  MOVLB  0
062A2:  CALL   2EE4
062A6:  MOVFF  03,657
062AA:  MOVFF  02,656
062AE:  MOVFF  01,655
062B2:  MOVFF  00,654
....................           
....................       if(Temperatura<=1200 && Temperatura>=900) 
062B6:  MOVFF  627,863
062BA:  MOVFF  626,862
062BE:  MOVFF  625,861
062C2:  MOVFF  624,860
062C6:  MOVLB  8
062C8:  CLRF   x67
062CA:  CLRF   x66
062CC:  MOVLW  16
062CE:  MOVWF  x65
062D0:  MOVLW  89
062D2:  MOVWF  x64
062D4:  MOVLB  0
062D6:  CALL   1D7C
062DA:  BC    62DE
062DC:  BNZ   633E
062DE:  MOVLB  8
062E0:  CLRF   x63
062E2:  CLRF   x62
062E4:  MOVLW  61
062E6:  MOVWF  x61
062E8:  MOVLW  88
062EA:  MOVWF  x60
062EC:  MOVFF  627,867
062F0:  MOVFF  626,866
062F4:  MOVFF  625,865
062F8:  MOVFF  624,864
062FC:  MOVLB  0
062FE:  CALL   1D7C
06302:  BC    6306
06304:  BNZ   633E
....................          penMufla=penInicial*0.6;    
06306:  MOVFF  65F,880
0630A:  MOVFF  65E,87F
0630E:  MOVFF  65D,87E
06312:  MOVFF  65C,87D
06316:  MOVLW  9A
06318:  MOVLB  8
0631A:  MOVWF  x84
0631C:  MOVLW  99
0631E:  MOVWF  x83
06320:  MOVLW  19
06322:  MOVWF  x82
06324:  MOVLW  7E
06326:  MOVWF  x81
06328:  MOVLB  0
0632A:  CALL   2EE4
0632E:  MOVFF  03,657
06332:  MOVFF  02,656
06336:  MOVFF  01,655
0633A:  MOVFF  00,654
....................        
....................       if(PotenciaEntregada>100.0){ 
0633E:  MOVLB  8
06340:  CLRF   x63
06342:  CLRF   x62
06344:  MOVLW  48
06346:  MOVWF  x61
06348:  MOVLW  85
0634A:  MOVWF  x60
0634C:  MOVFF  5DF,867
06350:  MOVFF  5DE,866
06354:  MOVFF  5DD,865
06358:  MOVFF  5DC,864
0635C:  MOVLB  0
0635E:  CALL   1D7C
06362:  BNC   6372
....................          PotenciaEntregada=100.0; 
06364:  MOVLB  5
06366:  CLRF   xDF
06368:  CLRF   xDE
0636A:  MOVLW  48
0636C:  MOVWF  xDD
0636E:  MOVLW  85
06370:  MOVWF  xDC
....................       } 
....................        
....................       if(PotenciaEntregada<0){ 
06372:  MOVFF  5DF,863
06376:  MOVFF  5DE,862
0637A:  MOVFF  5DD,861
0637E:  MOVFF  5DC,860
06382:  MOVLB  8
06384:  CLRF   x67
06386:  CLRF   x66
06388:  CLRF   x65
0638A:  CLRF   x64
0638C:  MOVLB  0
0638E:  CALL   1D7C
06392:  BNC   63A0
....................          PotenciaEntregada=0; 
06394:  MOVLB  5
06396:  CLRF   xDF
06398:  CLRF   xDE
0639A:  CLRF   xDD
0639C:  CLRF   xDC
0639E:  MOVLB  0
....................       } 
....................        
....................       Tpulso=(PotenciaEntregada*Tciclo)/100; 
063A0:  MOVFF  5DF,880
063A4:  MOVFF  5DE,87F
063A8:  MOVFF  5DD,87E
063AC:  MOVFF  5DC,87D
063B0:  MOVFF  5F7,884
063B4:  MOVFF  5F6,883
063B8:  MOVFF  5F5,882
063BC:  MOVFF  5F4,881
063C0:  CALL   2EE4
063C4:  MOVFF  00,860
063C8:  MOVFF  01,861
063CC:  MOVFF  02,862
063D0:  MOVFF  03,863
063D4:  MOVFF  03,867
063D8:  MOVFF  02,866
063DC:  MOVFF  01,865
063E0:  MOVFF  00,864
063E4:  MOVLB  8
063E6:  CLRF   x6B
063E8:  CLRF   x6A
063EA:  MOVLW  48
063EC:  MOVWF  x69
063EE:  MOVLW  85
063F0:  MOVWF  x68
063F2:  MOVLB  0
063F4:  CALL   2D86
063F8:  MOVFF  03,5FB
063FC:  MOVFF  02,5FA
06400:  MOVFF  01,5F9
06404:  MOVFF  00,5F8
....................    } 
....................    Tp=(int16)(Tpulso/0.005); 
06408:  MOVFF  5FB,867
0640C:  MOVFF  5FA,866
06410:  MOVFF  5F9,865
06414:  MOVFF  5F8,864
06418:  MOVLW  0A
0641A:  MOVLB  8
0641C:  MOVWF  x6B
0641E:  MOVLW  D7
06420:  MOVWF  x6A
06422:  MOVLW  23
06424:  MOVWF  x69
06426:  MOVLW  77
06428:  MOVWF  x68
0642A:  MOVLB  0
0642C:  CALL   2D86
06430:  MOVFF  03,863
06434:  MOVFF  02,862
06438:  MOVFF  01,861
0643C:  MOVFF  00,860
06440:  CALL   546C
06444:  MOVFF  02,5B3
06448:  MOVFF  01,5B2
....................    Tc=(int16)(Tciclo/0.005); 
0644C:  MOVFF  5F7,867
06450:  MOVFF  5F6,866
06454:  MOVFF  5F5,865
06458:  MOVFF  5F4,864
0645C:  MOVLW  0A
0645E:  MOVLB  8
06460:  MOVWF  x6B
06462:  MOVLW  D7
06464:  MOVWF  x6A
06466:  MOVLW  23
06468:  MOVWF  x69
0646A:  MOVLW  77
0646C:  MOVWF  x68
0646E:  MOVLB  0
06470:  CALL   2D86
06474:  MOVFF  03,863
06478:  MOVFF  02,862
0647C:  MOVFF  01,861
06480:  MOVFF  00,860
06484:  CALL   546C
06488:  MOVFF  02,5B5
0648C:  MOVFF  01,5B4
....................           
.................... //--------------------------------------------------------------------------------------------------------------------//    
.................... } 
06490:  RETLW  00
....................  
.................... void displayMenu(char palabra[30], int x, int y, int sombreado, int tamano) 
.................... { 
....................    strcpy(Menus.Letra,palabra); 
*
01A3E:  MOVLB  8
01A40:  MOVFF  867,01
01A44:  MOVFF  868,03
01A48:  MOVFF  867,86D
01A4C:  MOVFF  868,86E
01A50:  MOVLW  08
01A52:  MOVWF  FEA
01A54:  MOVLW  40
01A56:  MOVWF  FE9
01A58:  MOVFF  868,FE2
01A5C:  MOVFF  867,FE1
01A60:  MOVF   FE7,F
01A62:  MOVFF  FE6,FEE
01A66:  BNZ   1A60
....................     
....................    if(sombreado==3) 
01A68:  MOVF   x6B,W
01A6A:  SUBLW  03
01A6C:  BNZ   1A94
....................       {glcd_text57(x+1, y+1, Menus.Letra, tamano, OFF);} 
01A6E:  MOVLW  01
01A70:  ADDWF  x69,W
01A72:  MOVWF  x6D
01A74:  MOVLW  01
01A76:  ADDWF  x6A,W
01A78:  MOVWF  x6E
01A7A:  MOVFF  86D,878
01A7E:  MOVWF  x79
01A80:  MOVLW  08
01A82:  MOVWF  x7B
01A84:  MOVLW  40
01A86:  MOVWF  x7A
01A88:  MOVFF  86C,87C
01A8C:  CLRF   x7D
01A8E:  MOVLB  0
01A90:  RCALL  1886
01A92:  MOVLB  8
....................    if(sombreado==2) 
01A94:  MOVF   x6B,W
01A96:  SUBLW  02
01A98:  BNZ   1AC2
....................       {glcd_text57(x+1, y+1, Menus.Letra, tamano, ON);} 
01A9A:  MOVLW  01
01A9C:  ADDWF  x69,W
01A9E:  MOVWF  x6D
01AA0:  MOVLW  01
01AA2:  ADDWF  x6A,W
01AA4:  MOVWF  x6E
01AA6:  MOVFF  86D,878
01AAA:  MOVWF  x79
01AAC:  MOVLW  08
01AAE:  MOVWF  x7B
01AB0:  MOVLW  40
01AB2:  MOVWF  x7A
01AB4:  MOVFF  86C,87C
01AB8:  MOVLW  01
01ABA:  MOVWF  x7D
01ABC:  MOVLB  0
01ABE:  RCALL  1886
01AC0:  MOVLB  8
....................    if(sombreado==1) 
01AC2:  DECFSZ x6B,W
01AC4:  BRA    1B10
....................       {glcd_rect(0, y, 127, y+(tamano*8), YES, ON);glcd_text57(x+1, y+1, Menus.Letra, tamano, OFF);} 
01AC6:  MOVF   x6C,W
01AC8:  MULLW  08
01ACA:  MOVF   FF3,W
01ACC:  ADDWF  x6A,W
01ACE:  MOVWF  x6D
01AD0:  CLRF   x78
01AD2:  MOVFF  86A,879
01AD6:  MOVLW  7F
01AD8:  MOVWF  x7A
01ADA:  MOVFF  86D,87B
01ADE:  MOVLW  01
01AE0:  MOVWF  x7C
01AE2:  MOVWF  x7D
01AE4:  MOVLB  0
01AE6:  RCALL  17C4
01AE8:  MOVLW  01
01AEA:  MOVLB  8
01AEC:  ADDWF  x69,W
01AEE:  MOVWF  x6D
01AF0:  MOVLW  01
01AF2:  ADDWF  x6A,W
01AF4:  MOVWF  x6E
01AF6:  MOVFF  86D,878
01AFA:  MOVWF  x79
01AFC:  MOVLW  08
01AFE:  MOVWF  x7B
01B00:  MOVLW  40
01B02:  MOVWF  x7A
01B04:  MOVFF  86C,87C
01B08:  CLRF   x7D
01B0A:  MOVLB  0
01B0C:  RCALL  1886
01B0E:  MOVLB  8
....................    if(sombreado==0) 
01B10:  MOVF   x6B,F
01B12:  BNZ   1B5E
....................       {glcd_rect(0, y, 127, y+(tamano*8), YES, OFF);glcd_text57(x+1, y+1, Menus.Letra, tamano, ON);} 
01B14:  MOVF   x6C,W
01B16:  MULLW  08
01B18:  MOVF   FF3,W
01B1A:  ADDWF  x6A,W
01B1C:  MOVWF  x6D
01B1E:  CLRF   x78
01B20:  MOVFF  86A,879
01B24:  MOVLW  7F
01B26:  MOVWF  x7A
01B28:  MOVFF  86D,87B
01B2C:  MOVLW  01
01B2E:  MOVWF  x7C
01B30:  CLRF   x7D
01B32:  MOVLB  0
01B34:  RCALL  17C4
01B36:  MOVLW  01
01B38:  MOVLB  8
01B3A:  ADDWF  x69,W
01B3C:  MOVWF  x6D
01B3E:  MOVLW  01
01B40:  ADDWF  x6A,W
01B42:  MOVWF  x6E
01B44:  MOVFF  86D,878
01B48:  MOVWF  x79
01B4A:  MOVLW  08
01B4C:  MOVWF  x7B
01B4E:  MOVLW  40
01B50:  MOVWF  x7A
01B52:  MOVFF  86C,87C
01B56:  MOVLW  01
01B58:  MOVWF  x7D
01B5A:  MOVLB  0
01B5C:  RCALL  1886
....................    glcd_update(); 
01B5E:  MOVLB  0
01B60:  RCALL  146A
.................... } 
01B62:  RETLW  00
....................  
.................... void displayTemps(char palabra[30], int16 digito, int x, int y, int sombreado, int tamano) 
.................... { 
....................    char voltage[9]; 
....................     
....................    if(sombreado==11) 
*
04046:  MOVLB  8
04048:  MOVF   x6B,W
0404A:  SUBLW  0B
0404C:  BNZ   410C
....................    { 
....................       sprintf(voltage, "%02Lu", digito); 
0404E:  MOVLW  08
04050:  MOVWF  x5F
04052:  MOVLW  6D
04054:  MOVWF  x5E
04056:  MOVLW  0B
04058:  MOVWF  FE9
0405A:  MOVFF  868,877
0405E:  MOVFF  867,876
04062:  MOVLB  0
04064:  RCALL  3BA6
....................       glcd_rect(0, y-2, 127, y+(tamano*8), YES, ON); 
04066:  MOVLW  02
04068:  MOVLB  8
0406A:  SUBWF  x6A,W
0406C:  MOVWF  x76
0406E:  MOVF   x6C,W
04070:  MULLW  08
04072:  MOVF   FF3,W
04074:  ADDWF  x6A,W
04076:  MOVWF  x77
04078:  CLRF   x78
0407A:  MOVFF  876,879
0407E:  MOVLW  7F
04080:  MOVWF  x7A
04082:  MOVFF  877,87B
04086:  MOVLW  01
04088:  MOVWF  x7C
0408A:  MOVWF  x7D
0408C:  MOVLB  0
0408E:  CALL   17C4
....................       strcpy(Menus.Letra,palabra); 
04092:  MOVLB  8
04094:  MOVFF  865,01
04098:  MOVFF  866,03
0409C:  MOVFF  865,876
040A0:  MOVFF  866,877
040A4:  MOVLW  08
040A6:  MOVWF  FEA
040A8:  MOVLW  40
040AA:  MOVWF  FE9
040AC:  MOVFF  866,FE2
040B0:  MOVFF  865,FE1
040B4:  MOVF   FE7,F
040B6:  MOVFF  FE6,FEE
040BA:  BNZ   40B4
....................       glcd_text57(x+90, y+1, voltage, tamano, OFF); 
040BC:  MOVLW  5A
040BE:  ADDWF  x69,W
040C0:  MOVWF  x76
040C2:  MOVLW  01
040C4:  ADDWF  x6A,W
040C6:  MOVWF  x77
040C8:  MOVFF  876,878
040CC:  MOVWF  x79
040CE:  MOVLW  08
040D0:  MOVWF  x7B
040D2:  MOVLW  6D
040D4:  MOVWF  x7A
040D6:  MOVFF  86C,87C
040DA:  CLRF   x7D
040DC:  MOVLB  0
040DE:  CALL   1886
....................       glcd_text57(x+1, y+1, Menus.Letra, tamano, OFF); 
040E2:  MOVLW  01
040E4:  MOVLB  8
040E6:  ADDWF  x69,W
040E8:  MOVWF  x76
040EA:  MOVLW  01
040EC:  ADDWF  x6A,W
040EE:  MOVWF  x77
040F0:  MOVFF  876,878
040F4:  MOVWF  x79
040F6:  MOVLW  08
040F8:  MOVWF  x7B
040FA:  MOVLW  40
040FC:  MOVWF  x7A
040FE:  MOVFF  86C,87C
04102:  CLRF   x7D
04104:  MOVLB  0
04106:  CALL   1886
0410A:  MOVLB  8
....................    } 
....................    if(sombreado==10) 
0410C:  MOVF   x6B,W
0410E:  SUBLW  0A
04110:  BNZ   41D4
....................    { 
....................       sprintf(voltage, "%02Lu", digito); 
04112:  MOVLW  08
04114:  MOVWF  x5F
04116:  MOVLW  6D
04118:  MOVWF  x5E
0411A:  MOVLW  0B
0411C:  MOVWF  FE9
0411E:  MOVFF  868,877
04122:  MOVFF  867,876
04126:  MOVLB  0
04128:  RCALL  3BA6
....................       glcd_rect(0, y-2, 127, y+(tamano*8), YES, OFF); 
0412A:  MOVLW  02
0412C:  MOVLB  8
0412E:  SUBWF  x6A,W
04130:  MOVWF  x76
04132:  MOVF   x6C,W
04134:  MULLW  08
04136:  MOVF   FF3,W
04138:  ADDWF  x6A,W
0413A:  MOVWF  x77
0413C:  CLRF   x78
0413E:  MOVFF  876,879
04142:  MOVLW  7F
04144:  MOVWF  x7A
04146:  MOVFF  877,87B
0414A:  MOVLW  01
0414C:  MOVWF  x7C
0414E:  CLRF   x7D
04150:  MOVLB  0
04152:  CALL   17C4
....................       strcpy(Menus.Letra,palabra); 
04156:  MOVLB  8
04158:  MOVFF  865,01
0415C:  MOVFF  866,03
04160:  MOVFF  865,876
04164:  MOVFF  866,877
04168:  MOVLW  08
0416A:  MOVWF  FEA
0416C:  MOVLW  40
0416E:  MOVWF  FE9
04170:  MOVFF  866,FE2
04174:  MOVFF  865,FE1
04178:  MOVF   FE7,F
0417A:  MOVFF  FE6,FEE
0417E:  BNZ   4178
....................       glcd_text57(x+90, y+1, voltage, tamano, ON); 
04180:  MOVLW  5A
04182:  ADDWF  x69,W
04184:  MOVWF  x76
04186:  MOVLW  01
04188:  ADDWF  x6A,W
0418A:  MOVWF  x77
0418C:  MOVFF  876,878
04190:  MOVWF  x79
04192:  MOVLW  08
04194:  MOVWF  x7B
04196:  MOVLW  6D
04198:  MOVWF  x7A
0419A:  MOVFF  86C,87C
0419E:  MOVLW  01
041A0:  MOVWF  x7D
041A2:  MOVLB  0
041A4:  CALL   1886
....................       glcd_text57(x+1, y+1, Menus.Letra, tamano, ON); 
041A8:  MOVLW  01
041AA:  MOVLB  8
041AC:  ADDWF  x69,W
041AE:  MOVWF  x76
041B0:  MOVLW  01
041B2:  ADDWF  x6A,W
041B4:  MOVWF  x77
041B6:  MOVFF  876,878
041BA:  MOVWF  x79
041BC:  MOVLW  08
041BE:  MOVWF  x7B
041C0:  MOVLW  40
041C2:  MOVWF  x7A
041C4:  MOVFF  86C,87C
041C8:  MOVLW  01
041CA:  MOVWF  x7D
041CC:  MOVLB  0
041CE:  CALL   1886
041D2:  MOVLB  8
....................    } 
....................     
....................    if(sombreado==1) 
041D4:  DECFSZ x6B,W
041D6:  BRA    4302
....................    { 
....................       sprintf(voltage, "%04Lu", digito); 
041D8:  MOVLW  08
041DA:  MOVWF  x5F
041DC:  MOVLW  6D
041DE:  MOVWF  x5E
041E0:  MOVLW  09
041E2:  MOVWF  FE9
041E4:  MOVFF  868,877
041E8:  MOVFF  867,876
041EC:  MOVLB  0
041EE:  RCALL  3BA6
....................       glcd_rect(0, y-2, 127, y+(tamano*8), YES, ON); 
041F0:  MOVLW  02
041F2:  MOVLB  8
041F4:  SUBWF  x6A,W
041F6:  MOVWF  x76
041F8:  MOVF   x6C,W
041FA:  MULLW  08
041FC:  MOVF   FF3,W
041FE:  ADDWF  x6A,W
04200:  MOVWF  x77
04202:  CLRF   x78
04204:  MOVFF  876,879
04208:  MOVLW  7F
0420A:  MOVWF  x7A
0420C:  MOVFF  877,87B
04210:  MOVLW  01
04212:  MOVWF  x7C
04214:  MOVWF  x7D
04216:  MOVLB  0
04218:  CALL   17C4
....................       strcpy(Menus.Letra,palabra); 
0421C:  MOVLB  8
0421E:  MOVFF  865,01
04222:  MOVFF  866,03
04226:  MOVFF  865,876
0422A:  MOVFF  866,877
0422E:  MOVLW  08
04230:  MOVWF  FEA
04232:  MOVLW  40
04234:  MOVWF  FE9
04236:  MOVFF  866,FE2
0423A:  MOVFF  865,FE1
0423E:  MOVF   FE7,F
04240:  MOVFF  FE6,FEE
04244:  BNZ   423E
....................       glcd_text57(x+90, y+1, voltage, tamano, OFF); 
04246:  MOVLW  5A
04248:  ADDWF  x69,W
0424A:  MOVWF  x76
0424C:  MOVLW  01
0424E:  ADDWF  x6A,W
04250:  MOVWF  x77
04252:  MOVFF  876,878
04256:  MOVWF  x79
04258:  MOVLW  08
0425A:  MOVWF  x7B
0425C:  MOVLW  6D
0425E:  MOVWF  x7A
04260:  MOVFF  86C,87C
04264:  CLRF   x7D
04266:  MOVLB  0
04268:  CALL   1886
....................       glcd_text57(x+1, y+1, Menus.Letra, tamano, OFF); 
0426C:  MOVLW  01
0426E:  MOVLB  8
04270:  ADDWF  x69,W
04272:  MOVWF  x76
04274:  MOVLW  01
04276:  ADDWF  x6A,W
04278:  MOVWF  x77
0427A:  MOVFF  876,878
0427E:  MOVWF  x79
04280:  MOVLW  08
04282:  MOVWF  x7B
04284:  MOVLW  40
04286:  MOVWF  x7A
04288:  MOVFF  86C,87C
0428C:  CLRF   x7D
0428E:  MOVLB  0
04290:  CALL   1886
....................       strcpy(Menus.Letra,"C"); 
04294:  MOVLW  08
04296:  MOVWF  FEA
04298:  MOVLW  40
0429A:  MOVWF  FE9
0429C:  MOVFF  FF2,876
042A0:  BCF    FF2.7
042A2:  MOVLW  00
042A4:  CALL   06D2
042A8:  TBLRD*-
042AA:  TBLRD*+
042AC:  MOVF   FF5,W
042AE:  MOVWF  FEE
042B0:  IORLW  00
042B2:  BNZ   42AA
042B4:  MOVLB  8
042B6:  BTFSC  x76.7
042B8:  BSF    FF2.7
....................       glcd_text57(x+120, y+1, Menus.Letra, tamano, OFF); 
042BA:  MOVLW  78
042BC:  ADDWF  x69,W
042BE:  MOVWF  x76
042C0:  MOVLW  01
042C2:  ADDWF  x6A,W
042C4:  MOVWF  x77
042C6:  MOVFF  876,878
042CA:  MOVWF  x79
042CC:  MOVLW  08
042CE:  MOVWF  x7B
042D0:  MOVLW  40
042D2:  MOVWF  x7A
042D4:  MOVFF  86C,87C
042D8:  CLRF   x7D
042DA:  MOVLB  0
042DC:  CALL   1886
....................       glcd_circle(x+115,y-1,1,NO,OFF); 
042E0:  MOVLW  73
042E2:  MOVLB  8
042E4:  ADDWF  x69,W
042E6:  MOVWF  x76
042E8:  MOVLW  01
042EA:  SUBWF  x6A,W
042EC:  MOVWF  x77
042EE:  MOVFF  876,878
042F2:  MOVWF  x79
042F4:  MOVLW  01
042F6:  MOVWF  x7A
042F8:  CLRF   x7B
042FA:  CLRF   x7C
042FC:  MOVLB  0
042FE:  RCALL  3E1C
04300:  MOVLB  8
....................    } 
....................    if(sombreado==0) 
04302:  MOVF   x6B,F
04304:  BTFSS  FD8.2
04306:  BRA    4436
....................    { 
....................       sprintf(voltage, "%04Lu", digito); 
04308:  MOVLW  08
0430A:  MOVWF  x5F
0430C:  MOVLW  6D
0430E:  MOVWF  x5E
04310:  MOVLW  09
04312:  MOVWF  FE9
04314:  MOVFF  868,877
04318:  MOVFF  867,876
0431C:  MOVLB  0
0431E:  RCALL  3BA6
....................       glcd_rect(0, y-2, 127, y+(tamano*8), YES, OFF); 
04320:  MOVLW  02
04322:  MOVLB  8
04324:  SUBWF  x6A,W
04326:  MOVWF  x76
04328:  MOVF   x6C,W
0432A:  MULLW  08
0432C:  MOVF   FF3,W
0432E:  ADDWF  x6A,W
04330:  MOVWF  x77
04332:  CLRF   x78
04334:  MOVFF  876,879
04338:  MOVLW  7F
0433A:  MOVWF  x7A
0433C:  MOVFF  877,87B
04340:  MOVLW  01
04342:  MOVWF  x7C
04344:  CLRF   x7D
04346:  MOVLB  0
04348:  CALL   17C4
....................       strcpy(Menus.Letra,palabra); 
0434C:  MOVLB  8
0434E:  MOVFF  865,01
04352:  MOVFF  866,03
04356:  MOVFF  865,876
0435A:  MOVFF  866,877
0435E:  MOVLW  08
04360:  MOVWF  FEA
04362:  MOVLW  40
04364:  MOVWF  FE9
04366:  MOVFF  866,FE2
0436A:  MOVFF  865,FE1
0436E:  MOVF   FE7,F
04370:  MOVFF  FE6,FEE
04374:  BNZ   436E
....................       glcd_text57(x+90, y+1, voltage, tamano, ON); 
04376:  MOVLW  5A
04378:  ADDWF  x69,W
0437A:  MOVWF  x76
0437C:  MOVLW  01
0437E:  ADDWF  x6A,W
04380:  MOVWF  x77
04382:  MOVFF  876,878
04386:  MOVWF  x79
04388:  MOVLW  08
0438A:  MOVWF  x7B
0438C:  MOVLW  6D
0438E:  MOVWF  x7A
04390:  MOVFF  86C,87C
04394:  MOVLW  01
04396:  MOVWF  x7D
04398:  MOVLB  0
0439A:  CALL   1886
....................       glcd_text57(x+1, y+1, Menus.Letra, tamano, ON); 
0439E:  MOVLW  01
043A0:  MOVLB  8
043A2:  ADDWF  x69,W
043A4:  MOVWF  x76
043A6:  MOVLW  01
043A8:  ADDWF  x6A,W
043AA:  MOVWF  x77
043AC:  MOVFF  876,878
043B0:  MOVWF  x79
043B2:  MOVLW  08
043B4:  MOVWF  x7B
043B6:  MOVLW  40
043B8:  MOVWF  x7A
043BA:  MOVFF  86C,87C
043BE:  MOVLW  01
043C0:  MOVWF  x7D
043C2:  MOVLB  0
043C4:  CALL   1886
....................       strcpy(Menus.Letra,"C"); 
043C8:  MOVLW  08
043CA:  MOVWF  FEA
043CC:  MOVLW  40
043CE:  MOVWF  FE9
043D0:  MOVFF  FF2,876
043D4:  BCF    FF2.7
043D6:  MOVLW  00
043D8:  CALL   06D2
043DC:  TBLRD*-
043DE:  TBLRD*+
043E0:  MOVF   FF5,W
043E2:  MOVWF  FEE
043E4:  IORLW  00
043E6:  BNZ   43DE
043E8:  MOVLB  8
043EA:  BTFSC  x76.7
043EC:  BSF    FF2.7
....................       glcd_text57(x+120, y+1, Menus.Letra, tamano, ON); 
043EE:  MOVLW  78
043F0:  ADDWF  x69,W
043F2:  MOVWF  x76
043F4:  MOVLW  01
043F6:  ADDWF  x6A,W
043F8:  MOVWF  x77
043FA:  MOVFF  876,878
043FE:  MOVWF  x79
04400:  MOVLW  08
04402:  MOVWF  x7B
04404:  MOVLW  40
04406:  MOVWF  x7A
04408:  MOVFF  86C,87C
0440C:  MOVLW  01
0440E:  MOVWF  x7D
04410:  MOVLB  0
04412:  CALL   1886
....................       glcd_circle(x+115,y-1,1,NO,ON); 
04416:  MOVLW  73
04418:  MOVLB  8
0441A:  ADDWF  x69,W
0441C:  MOVWF  x76
0441E:  MOVLW  01
04420:  SUBWF  x6A,W
04422:  MOVWF  x77
04424:  MOVFF  876,878
04428:  MOVWF  x79
0442A:  MOVLW  01
0442C:  MOVWF  x7A
0442E:  CLRF   x7B
04430:  MOVWF  x7C
04432:  MOVLB  0
04434:  RCALL  3E1C
....................    } 
....................    glcd_update(); 
04436:  MOVLB  0
04438:  CALL   146A
.................... } 
0443C:  RETLW  00
....................  
.................... void displayTiempo(int digito, int x, int y, int sombreado, int tamano) 
.................... { 
....................    char voltage[9]; 
....................     
....................    if(sombreado==2) 
*
03876:  MOVLB  8
03878:  MOVF   x66,W
0387A:  SUBLW  02
0387C:  BNZ   38EE
....................    { 
....................       sprintf(voltage, "%03u", digito); 
0387E:  MOVLW  08
03880:  MOVWF  x5F
03882:  MOVLW  68
03884:  MOVWF  x5E
03886:  MOVFF  863,871
0388A:  MOVLW  03
0388C:  MOVWF  x72
0388E:  MOVLB  0
03890:  RCALL  37F0
....................       glcd_rect(x, y, x+(tamano*18), y+(tamano*8), YES, ON); 
03892:  MOVLB  8
03894:  MOVF   x67,W
03896:  MULLW  12
03898:  MOVF   FF3,W
0389A:  ADDWF  x64,W
0389C:  MOVWF  x71
0389E:  MOVF   x67,W
038A0:  MULLW  08
038A2:  MOVF   FF3,W
038A4:  ADDWF  x65,W
038A6:  MOVWF  x72
038A8:  MOVFF  864,878
038AC:  MOVFF  865,879
038B0:  MOVFF  871,87A
038B4:  MOVWF  x7B
038B6:  MOVLW  01
038B8:  MOVWF  x7C
038BA:  MOVWF  x7D
038BC:  MOVLB  0
038BE:  CALL   17C4
....................       glcd_text57(x+1, y+1, voltage, tamano, OFF); 
038C2:  MOVLW  01
038C4:  MOVLB  8
038C6:  ADDWF  x64,W
038C8:  MOVWF  x71
038CA:  MOVLW  01
038CC:  ADDWF  x65,W
038CE:  MOVWF  x72
038D0:  MOVFF  871,878
038D4:  MOVWF  x79
038D6:  MOVLW  08
038D8:  MOVWF  x7B
038DA:  MOVLW  68
038DC:  MOVWF  x7A
038DE:  MOVFF  867,87C
038E2:  CLRF   x7D
038E4:  MOVLB  0
038E6:  CALL   1886
....................    } 
....................    else 
038EA:  BRA    3A32
038EC:  MOVLB  8
....................    { 
....................       if(sombreado==3) 
038EE:  MOVF   x66,W
038F0:  SUBLW  03
038F2:  BNZ   3964
....................       { 
....................          sprintf(voltage, "%03u", digito); 
038F4:  MOVLW  08
038F6:  MOVWF  x5F
038F8:  MOVLW  68
038FA:  MOVWF  x5E
038FC:  MOVFF  863,871
03900:  MOVLW  03
03902:  MOVWF  x72
03904:  MOVLB  0
03906:  RCALL  37F0
....................          glcd_rect(x, y, x+(tamano*18), y+(tamano*8), YES, OFF); 
03908:  MOVLB  8
0390A:  MOVF   x67,W
0390C:  MULLW  12
0390E:  MOVF   FF3,W
03910:  ADDWF  x64,W
03912:  MOVWF  x71
03914:  MOVF   x67,W
03916:  MULLW  08
03918:  MOVF   FF3,W
0391A:  ADDWF  x65,W
0391C:  MOVWF  x72
0391E:  MOVFF  864,878
03922:  MOVFF  865,879
03926:  MOVFF  871,87A
0392A:  MOVWF  x7B
0392C:  MOVLW  01
0392E:  MOVWF  x7C
03930:  CLRF   x7D
03932:  MOVLB  0
03934:  CALL   17C4
....................          glcd_text57(x+1, y+1, voltage, tamano, ON); 
03938:  MOVLW  01
0393A:  MOVLB  8
0393C:  ADDWF  x64,W
0393E:  MOVWF  x71
03940:  MOVLW  01
03942:  ADDWF  x65,W
03944:  MOVWF  x72
03946:  MOVFF  871,878
0394A:  MOVWF  x79
0394C:  MOVLW  08
0394E:  MOVWF  x7B
03950:  MOVLW  68
03952:  MOVWF  x7A
03954:  MOVFF  867,87C
03958:  MOVLW  01
0395A:  MOVWF  x7D
0395C:  MOVLB  0
0395E:  CALL   1886
03962:  MOVLB  8
....................       } 
....................       sprintf(voltage, "%u", digito); 
03964:  MOVLW  08
03966:  MOVWF  x5F
03968:  MOVLW  68
0396A:  MOVWF  x5E
0396C:  MOVFF  863,871
03970:  MOVLW  1B
03972:  MOVWF  x72
03974:  MOVLB  0
03976:  RCALL  37F0
....................       if(sombreado==1) 
03978:  MOVLB  8
0397A:  DECFSZ x66,W
0397C:  BRA    39D6
....................          {glcd_rect(x, y, x+(tamano*5), y+(tamano*8), YES, ON);glcd_text57(x+1, y+1, voltage, tamano, OFF);} 
0397E:  MOVF   x67,W
03980:  MULLW  05
03982:  MOVF   FF3,W
03984:  ADDWF  x64,W
03986:  MOVWF  x71
03988:  MOVF   x67,W
0398A:  MULLW  08
0398C:  MOVF   FF3,W
0398E:  ADDWF  x65,W
03990:  MOVWF  x72
03992:  MOVFF  864,878
03996:  MOVFF  865,879
0399A:  MOVFF  871,87A
0399E:  MOVWF  x7B
039A0:  MOVLW  01
039A2:  MOVWF  x7C
039A4:  MOVWF  x7D
039A6:  MOVLB  0
039A8:  CALL   17C4
039AC:  MOVLW  01
039AE:  MOVLB  8
039B0:  ADDWF  x64,W
039B2:  MOVWF  x71
039B4:  MOVLW  01
039B6:  ADDWF  x65,W
039B8:  MOVWF  x72
039BA:  MOVFF  871,878
039BE:  MOVWF  x79
039C0:  MOVLW  08
039C2:  MOVWF  x7B
039C4:  MOVLW  68
039C6:  MOVWF  x7A
039C8:  MOVFF  867,87C
039CC:  CLRF   x7D
039CE:  MOVLB  0
039D0:  CALL   1886
039D4:  MOVLB  8
....................       if(sombreado==0) 
039D6:  MOVF   x66,F
039D8:  BNZ   3A34
....................          {glcd_rect(x, y, x+(tamano*5), y+(tamano*8), YES, OFF);glcd_text57(x+1, y+1, voltage, tamano, ON);} 
039DA:  MOVF   x67,W
039DC:  MULLW  05
039DE:  MOVF   FF3,W
039E0:  ADDWF  x64,W
039E2:  MOVWF  x71
039E4:  MOVF   x67,W
039E6:  MULLW  08
039E8:  MOVF   FF3,W
039EA:  ADDWF  x65,W
039EC:  MOVWF  x72
039EE:  MOVFF  864,878
039F2:  MOVFF  865,879
039F6:  MOVFF  871,87A
039FA:  MOVWF  x7B
039FC:  MOVLW  01
039FE:  MOVWF  x7C
03A00:  CLRF   x7D
03A02:  MOVLB  0
03A04:  CALL   17C4
03A08:  MOVLW  01
03A0A:  MOVLB  8
03A0C:  ADDWF  x64,W
03A0E:  MOVWF  x71
03A10:  MOVLW  01
03A12:  ADDWF  x65,W
03A14:  MOVWF  x72
03A16:  MOVFF  871,878
03A1A:  MOVWF  x79
03A1C:  MOVLW  08
03A1E:  MOVWF  x7B
03A20:  MOVLW  68
03A22:  MOVWF  x7A
03A24:  MOVFF  867,87C
03A28:  MOVLW  01
03A2A:  MOVWF  x7D
03A2C:  MOVLB  0
03A2E:  CALL   1886
03A32:  MOVLB  8
....................    } 
....................    glcd_update(); 
03A34:  MOVLB  0
03A36:  CALL   146A
.................... } 
03A3A:  RETLW  00
....................  
.................... void displayTemperatura(int16 digito, int x, int y, int sombreado, int tamano) 
.................... { 
....................    char voltage[9]; 
....................     
....................    if(sombreado==2) 
*
03C64:  MOVLB  8
03C66:  MOVF   x69,W
03C68:  SUBLW  02
03C6A:  BNZ   3CE0
....................    { 
....................       sprintf(voltage, "%04Lu", digito); 
03C6C:  MOVLW  08
03C6E:  MOVWF  x5F
03C70:  MOVLW  6B
03C72:  MOVWF  x5E
03C74:  MOVLW  09
03C76:  MOVWF  FE9
03C78:  MOVFF  866,877
03C7C:  MOVFF  865,876
03C80:  MOVLB  0
03C82:  RCALL  3BA6
....................       glcd_rect(x, y, x+(tamano*18), y+(tamano*8), YES, ON); 
03C84:  MOVLB  8
03C86:  MOVF   x6A,W
03C88:  MULLW  12
03C8A:  MOVF   FF3,W
03C8C:  ADDWF  x67,W
03C8E:  MOVWF  x74
03C90:  MOVF   x6A,W
03C92:  MULLW  08
03C94:  MOVF   FF3,W
03C96:  ADDWF  x68,W
03C98:  MOVWF  x75
03C9A:  MOVFF  867,878
03C9E:  MOVFF  868,879
03CA2:  MOVFF  874,87A
03CA6:  MOVWF  x7B
03CA8:  MOVLW  01
03CAA:  MOVWF  x7C
03CAC:  MOVWF  x7D
03CAE:  MOVLB  0
03CB0:  CALL   17C4
....................       glcd_text57(x+1, y+1, voltage, tamano, OFF); 
03CB4:  MOVLW  01
03CB6:  MOVLB  8
03CB8:  ADDWF  x67,W
03CBA:  MOVWF  x74
03CBC:  MOVLW  01
03CBE:  ADDWF  x68,W
03CC0:  MOVWF  x75
03CC2:  MOVFF  874,878
03CC6:  MOVWF  x79
03CC8:  MOVLW  08
03CCA:  MOVWF  x7B
03CCC:  MOVLW  6B
03CCE:  MOVWF  x7A
03CD0:  MOVFF  86A,87C
03CD4:  CLRF   x7D
03CD6:  MOVLB  0
03CD8:  CALL   1886
....................    } 
....................    else 
03CDC:  BRA    3E12
03CDE:  MOVLB  8
....................    { 
....................       sprintf(voltage, "%04Lu", digito); 
03CE0:  MOVLW  08
03CE2:  MOVWF  x5F
03CE4:  MOVLW  6B
03CE6:  MOVWF  x5E
03CE8:  MOVLW  09
03CEA:  MOVWF  FE9
03CEC:  MOVFF  866,877
03CF0:  MOVFF  865,876
03CF4:  MOVLB  0
03CF6:  RCALL  3BA6
....................     
....................       if(sombreado==4) 
03CF8:  MOVLB  8
03CFA:  MOVF   x69,W
03CFC:  SUBLW  04
03CFE:  BNZ   3D5A
....................       { 
....................          glcd_rect(x, y, x+(tamano*16), y+(tamano*8), YES, OFF); 
03D00:  MOVF   x6A,W
03D02:  MULLW  10
03D04:  MOVF   FF3,W
03D06:  ADDWF  x67,W
03D08:  MOVWF  x74
03D0A:  MOVF   x6A,W
03D0C:  MULLW  08
03D0E:  MOVF   FF3,W
03D10:  ADDWF  x68,W
03D12:  MOVWF  x75
03D14:  MOVFF  867,878
03D18:  MOVFF  868,879
03D1C:  MOVFF  874,87A
03D20:  MOVWF  x7B
03D22:  MOVLW  01
03D24:  MOVWF  x7C
03D26:  CLRF   x7D
03D28:  MOVLB  0
03D2A:  CALL   17C4
....................          glcd_text57(x+1, y+1, voltage, tamano, ON); 
03D2E:  MOVLW  01
03D30:  MOVLB  8
03D32:  ADDWF  x67,W
03D34:  MOVWF  x74
03D36:  MOVLW  01
03D38:  ADDWF  x68,W
03D3A:  MOVWF  x75
03D3C:  MOVFF  874,878
03D40:  MOVWF  x79
03D42:  MOVLW  08
03D44:  MOVWF  x7B
03D46:  MOVLW  6B
03D48:  MOVWF  x7A
03D4A:  MOVFF  86A,87C
03D4E:  MOVLW  01
03D50:  MOVWF  x7D
03D52:  MOVLB  0
03D54:  CALL   1886
03D58:  MOVLB  8
....................       } 
....................       if(sombreado==1) 
03D5A:  DECFSZ x69,W
03D5C:  BRA    3DB6
....................          {glcd_rect(x, y, x+(tamano*5), y+(tamano*8), YES, ON);glcd_text57(x+1, y+1, voltage, tamano, OFF);} 
03D5E:  MOVF   x6A,W
03D60:  MULLW  05
03D62:  MOVF   FF3,W
03D64:  ADDWF  x67,W
03D66:  MOVWF  x74
03D68:  MOVF   x6A,W
03D6A:  MULLW  08
03D6C:  MOVF   FF3,W
03D6E:  ADDWF  x68,W
03D70:  MOVWF  x75
03D72:  MOVFF  867,878
03D76:  MOVFF  868,879
03D7A:  MOVFF  874,87A
03D7E:  MOVWF  x7B
03D80:  MOVLW  01
03D82:  MOVWF  x7C
03D84:  MOVWF  x7D
03D86:  MOVLB  0
03D88:  CALL   17C4
03D8C:  MOVLW  01
03D8E:  MOVLB  8
03D90:  ADDWF  x67,W
03D92:  MOVWF  x74
03D94:  MOVLW  01
03D96:  ADDWF  x68,W
03D98:  MOVWF  x75
03D9A:  MOVFF  874,878
03D9E:  MOVWF  x79
03DA0:  MOVLW  08
03DA2:  MOVWF  x7B
03DA4:  MOVLW  6B
03DA6:  MOVWF  x7A
03DA8:  MOVFF  86A,87C
03DAC:  CLRF   x7D
03DAE:  MOVLB  0
03DB0:  CALL   1886
03DB4:  MOVLB  8
....................       if(sombreado==0) 
03DB6:  MOVF   x69,F
03DB8:  BNZ   3E14
....................          {glcd_rect(x, y, x+(tamano*5), y+(tamano*8), YES, OFF);glcd_text57(x+1, y+1, voltage, tamano, ON);} 
03DBA:  MOVF   x6A,W
03DBC:  MULLW  05
03DBE:  MOVF   FF3,W
03DC0:  ADDWF  x67,W
03DC2:  MOVWF  x74
03DC4:  MOVF   x6A,W
03DC6:  MULLW  08
03DC8:  MOVF   FF3,W
03DCA:  ADDWF  x68,W
03DCC:  MOVWF  x75
03DCE:  MOVFF  867,878
03DD2:  MOVFF  868,879
03DD6:  MOVFF  874,87A
03DDA:  MOVWF  x7B
03DDC:  MOVLW  01
03DDE:  MOVWF  x7C
03DE0:  CLRF   x7D
03DE2:  MOVLB  0
03DE4:  CALL   17C4
03DE8:  MOVLW  01
03DEA:  MOVLB  8
03DEC:  ADDWF  x67,W
03DEE:  MOVWF  x74
03DF0:  MOVLW  01
03DF2:  ADDWF  x68,W
03DF4:  MOVWF  x75
03DF6:  MOVFF  874,878
03DFA:  MOVWF  x79
03DFC:  MOVLW  08
03DFE:  MOVWF  x7B
03E00:  MOVLW  6B
03E02:  MOVWF  x7A
03E04:  MOVFF  86A,87C
03E08:  MOVLW  01
03E0A:  MOVWF  x7D
03E0C:  MOVLB  0
03E0E:  CALL   1886
03E12:  MOVLB  8
....................    } 
....................    glcd_update(); 
03E14:  MOVLB  0
03E16:  CALL   146A
.................... } 
03E1A:  RETLW  00
....................  
.................... void glcd_imagen(int8 x) 
.................... { 
....................    char i,j; 
....................    signed char k;  
....................     
....................    if(x==5){ 
*
050E0:  MOVLB  8
050E2:  MOVF   x60,W
050E4:  SUBLW  05
050E6:  BNZ   518C
....................    for( i = 0 ; i < 64 ; i ++ ) 
050E8:  CLRF   x61
050EA:  MOVF   x61,W
050EC:  SUBLW  3F
050EE:  BNC   518C
....................    {   
....................       for( j = 0 ; j < 16 ; j ++) 
050F0:  CLRF   x62
050F2:  MOVF   x62,W
050F4:  SUBLW  0F
050F6:  BNC   5188
....................       {     
....................          for(k=7;k>-1;k--) 
050F8:  MOVLW  07
050FA:  MOVWF  x63
050FC:  MOVF   x63,W
050FE:  XORLW  80
05100:  SUBLW  7F
05102:  BC    5184
....................          {       
....................             if( bit_test(Horno[i][j] ,7-k ))  
05104:  CLRF   x65
05106:  MOVFF  861,864
0510A:  CLRF   x67
0510C:  MOVLW  10
0510E:  MOVWF  x66
05110:  MOVLB  0
05112:  CALL   2AEC
05116:  MOVFF  02,865
0511A:  MOVFF  01,864
0511E:  MOVLB  8
05120:  MOVF   x62,W
05122:  ADDWF  01,W
05124:  MOVWF  01
05126:  MOVLW  00
05128:  ADDWFC 02,W
0512A:  MOVWF  03
0512C:  MOVF   01,W
0512E:  MOVFF  FF2,864
05132:  BCF    FF2.7
05134:  MOVFF  03,FF7
05138:  MOVLB  0
0513A:  CALL   02B6
0513E:  MOVLB  8
05140:  BTFSC  x64.7
05142:  BSF    FF2.7
05144:  MOVWF  x64
05146:  MOVLW  07
05148:  BSF    FD8.0
0514A:  SUBFWB x63,W
0514C:  MOVWF  x65
0514E:  MOVFF  864,00
05152:  MOVF   x65,W
05154:  MOVWF  01
05156:  BZ    5160
05158:  BCF    FD8.0
0515A:  RRCF   00,F
0515C:  DECFSZ 01,F
0515E:  BRA    5158
05160:  BTFSS  00.0
05162:  BRA    5180
....................                glcd_pixel( j*8+k,i, ON ); 
05164:  MOVF   x62,W
05166:  MULLW  08
05168:  MOVF   FF3,W
0516A:  ADDWF  x63,W
0516C:  MOVWF  x64
0516E:  MOVWF  x94
05170:  MOVFF  861,895
05174:  MOVLW  01
05176:  MOVWF  x96
05178:  MOVLB  0
0517A:  CALL   15CA
0517E:  MOVLB  8
....................          }   
05180:  DECF   x63,F
05182:  BRA    50FC
....................       } 
05184:  INCF   x62,F
05186:  BRA    50F2
....................    } 
05188:  INCF   x61,F
0518A:  BRA    50EA
....................    } 
....................     
.................... } 
0518C:  MOVLB  0
0518E:  GOTO   95C8 (RETURN)
....................     
.................... void Limpia(int x1,int x2,int y){ 
....................    glcd_rect(x1, y, x2, y+7, YES, OFF); 
.................... } 
....................  
.................... void displayT(int16 adc,int x,int y,int w) { 
....................    char voltage[9];     
....................    sprintf(voltage, "%04Lu",adc); // Converts adc to text 
*
06492:  MOVLW  08
06494:  MOVLB  8
06496:  MOVWF  x5F
06498:  MOVLW  67
0649A:  MOVWF  x5E
0649C:  MOVLW  09
0649E:  MOVWF  FE9
064A0:  MOVFF  863,877
064A4:  MOVFF  862,876
064A8:  MOVLB  0
064AA:  CALL   3BA6
....................    glcd_rect(x, y, x+(w*27), y+(w*8), YES, OFF); 
064AE:  MOVLB  8
064B0:  MOVF   x66,W
064B2:  MULLW  1B
064B4:  MOVF   FF3,W
064B6:  ADDWF  x64,W
064B8:  MOVWF  x70
064BA:  MOVF   x66,W
064BC:  MULLW  08
064BE:  MOVF   FF3,W
064C0:  ADDWF  x65,W
064C2:  MOVWF  x71
064C4:  MOVFF  864,878
064C8:  MOVFF  865,879
064CC:  MOVFF  870,87A
064D0:  MOVWF  x7B
064D2:  MOVLW  01
064D4:  MOVWF  x7C
064D6:  CLRF   x7D
064D8:  MOVLB  0
064DA:  CALL   17C4
....................    glcd_text57(x, y, voltage, w, ON); 
064DE:  MOVFF  864,878
064E2:  MOVFF  865,879
064E6:  MOVLW  08
064E8:  MOVLB  8
064EA:  MOVWF  x7B
064EC:  MOVLW  67
064EE:  MOVWF  x7A
064F0:  MOVFF  866,87C
064F4:  MOVLW  01
064F6:  MOVWF  x7D
064F8:  MOVLB  0
064FA:  CALL   1886
.................... } 
064FE:  GOTO   9F60 (RETURN)
....................  
.................... void displayFloat(float adc,int x,int y,int w) { 
....................    char voltage[9];     
....................    sprintf(voltage, "%03.1f",adc); // Converts adc to text 
*
0677C:  MOVLW  08
0677E:  MOVLB  8
06780:  MOVWF  x5F
06782:  MOVLW  67
06784:  MOVWF  x5E
06786:  MOVLW  42
06788:  MOVWF  FE9
0678A:  MOVFF  863,873
0678E:  MOVFF  862,872
06792:  MOVFF  861,871
06796:  MOVFF  860,870
0679A:  MOVLW  01
0679C:  MOVWF  x74
0679E:  MOVLB  0
067A0:  BRA    65C6
....................    glcd_rect(x, y, x+(w*27), y+(w*8), YES, OFF); 
067A2:  MOVLB  8
067A4:  MOVF   x66,W
067A6:  MULLW  1B
067A8:  MOVF   FF3,W
067AA:  ADDWF  x64,W
067AC:  MOVWF  x70
067AE:  MOVF   x66,W
067B0:  MULLW  08
067B2:  MOVF   FF3,W
067B4:  ADDWF  x65,W
067B6:  MOVWF  x71
067B8:  MOVFF  864,878
067BC:  MOVFF  865,879
067C0:  MOVFF  870,87A
067C4:  MOVWF  x7B
067C6:  MOVLW  01
067C8:  MOVWF  x7C
067CA:  CLRF   x7D
067CC:  MOVLB  0
067CE:  CALL   17C4
....................    glcd_text57(x, y, voltage, w, ON); 
067D2:  MOVFF  864,878
067D6:  MOVFF  865,879
067DA:  MOVLW  08
067DC:  MOVLB  8
067DE:  MOVWF  x7B
067E0:  MOVLW  67
067E2:  MOVWF  x7A
067E4:  MOVFF  866,87C
067E8:  MOVLW  01
067EA:  MOVWF  x7D
067EC:  MOVLB  0
067EE:  CALL   1886
.................... } 
067F2:  GOTO   A230 (RETURN)
....................  
.................... void displayContrasena(int digito, int x, int y, int sombreado) 
.................... { 
....................    char voltage[9]; 
....................    sprintf(voltage, "%i", digito); 
*
01C90:  MOVLW  08
01C92:  MOVLB  8
01C94:  MOVWF  x5F
01C96:  MOVLW  6D
01C98:  MOVWF  x5E
01C9A:  MOVFF  869,876
01C9E:  MOVLW  1F
01CA0:  MOVWF  x77
01CA2:  MOVLB  0
01CA4:  BRA    1BB0
....................     
....................    if(sombreado==1) 
01CA6:  MOVLB  8
01CA8:  DECFSZ x6C,W
01CAA:  BRA    1CFA
....................       {glcd_rect(x, y, x+18, y+24, YES, ON);glcd_text57(x+2, y+1, voltage, 2, OFF);} 
01CAC:  MOVLW  12
01CAE:  ADDWF  x6A,W
01CB0:  MOVWF  x76
01CB2:  MOVLW  18
01CB4:  ADDWF  x6B,W
01CB6:  MOVWF  x77
01CB8:  MOVFF  86A,878
01CBC:  MOVFF  86B,879
01CC0:  MOVFF  876,87A
01CC4:  MOVWF  x7B
01CC6:  MOVLW  01
01CC8:  MOVWF  x7C
01CCA:  MOVWF  x7D
01CCC:  MOVLB  0
01CCE:  RCALL  17C4
01CD0:  MOVLW  02
01CD2:  MOVLB  8
01CD4:  ADDWF  x6A,W
01CD6:  MOVWF  x76
01CD8:  MOVLW  01
01CDA:  ADDWF  x6B,W
01CDC:  MOVWF  x77
01CDE:  MOVFF  876,878
01CE2:  MOVWF  x79
01CE4:  MOVLW  08
01CE6:  MOVWF  x7B
01CE8:  MOVLW  6D
01CEA:  MOVWF  x7A
01CEC:  MOVLW  02
01CEE:  MOVWF  x7C
01CF0:  CLRF   x7D
01CF2:  MOVLB  0
01CF4:  RCALL  1886
....................    else    
01CF6:  BRA    1D44
01CF8:  MOVLB  8
....................       {glcd_rect(x, y, x+18, y+24, NO, OFF);glcd_text57(x+2, y+1, voltage, 2, ON);} 
01CFA:  MOVLW  12
01CFC:  ADDWF  x6A,W
01CFE:  MOVWF  x76
01D00:  MOVLW  18
01D02:  ADDWF  x6B,W
01D04:  MOVWF  x77
01D06:  MOVFF  86A,878
01D0A:  MOVFF  86B,879
01D0E:  MOVFF  876,87A
01D12:  MOVWF  x7B
01D14:  CLRF   x7C
01D16:  CLRF   x7D
01D18:  MOVLB  0
01D1A:  RCALL  17C4
01D1C:  MOVLW  02
01D1E:  MOVLB  8
01D20:  ADDWF  x6A,W
01D22:  MOVWF  x76
01D24:  MOVLW  01
01D26:  ADDWF  x6B,W
01D28:  MOVWF  x77
01D2A:  MOVFF  876,878
01D2E:  MOVWF  x79
01D30:  MOVLW  08
01D32:  MOVWF  x7B
01D34:  MOVLW  6D
01D36:  MOVWF  x7A
01D38:  MOVLW  02
01D3A:  MOVWF  x7C
01D3C:  MOVLW  01
01D3E:  MOVWF  x7D
01D40:  MOVLB  0
01D42:  RCALL  1886
....................  
.................... } 
01D44:  RETLW  00
....................  
.................... void displayTiempos(int digito, int x, int y, int sombreado, int tamano) 
.................... { 
....................    char voltage[9]; 
....................     
....................    if(sombreado==2) 
....................    { 
....................       sprintf(voltage, "%02d", digito); 
....................       glcd_rect(x, y, x+(tamano*12), y+(tamano*8), YES, OFF); 
....................       glcd_text57(x+1, y+1, voltage, tamano, ON); 
....................    } 
....................    else 
....................    { 
....................       if(sombreado==3) 
....................       { 
....................          sprintf(voltage, "%03u", digito); 
....................          glcd_rect(x, y, x+(tamano*18), y+(tamano*8), YES, OFF); 
....................          glcd_text57(x+1, y+1, voltage, tamano, ON); 
....................       } 
....................       sprintf(voltage, "%u", digito); 
....................       if(sombreado==1) 
....................          {glcd_rect(x, y, x+(tamano*5), y+(tamano*8), YES, ON);glcd_text57(x+1, y+1, voltage, tamano, OFF);} 
....................       if(sombreado==0) 
....................          {glcd_rect(x, y, x+(tamano*5), y+(tamano*8), YES, OFF);glcd_text57(x+1, y+1, voltage, tamano, ON);} 
....................    } 
....................    glcd_update(); 
.................... } 
....................  
.................... void MuestraSegmento(int8 Opcio,int8 l,int8 Prog ){ 
....................          if(Temperatura1[l+((Prog-1)*Pasos)]>1200) 
*
0443E:  MOVLW  01
04440:  MOVLB  8
04442:  SUBWF  x62,W
04444:  MULLW  10
04446:  MOVF   FF3,W
04448:  ADDWF  x61,W
0444A:  MOVWF  00
0444C:  BCF    FD8.0
0444E:  RLCF   00,F
04450:  MOVF   00,W
04452:  CLRF   03
04454:  ADDLW  60
04456:  MOVWF  FE9
04458:  MOVLW  06
0445A:  ADDWFC 03,W
0445C:  MOVWF  FEA
0445E:  MOVFF  FEC,864
04462:  MOVF   FED,F
04464:  MOVFF  FEF,863
04468:  BTFSC  x64.7
0446A:  BRA    44A0
0446C:  MOVF   x64,W
0446E:  SUBLW  03
04470:  BC    44A0
04472:  XORLW  FF
04474:  BNZ   447C
04476:  MOVF   x63,W
04478:  SUBLW  B0
0447A:  BC    44A0
....................             Temperatura1[l+((Prog-1)*Pasos)]=0; 
0447C:  MOVLW  01
0447E:  SUBWF  x62,W
04480:  MULLW  10
04482:  MOVF   FF3,W
04484:  ADDWF  x61,W
04486:  MOVWF  00
04488:  BCF    FD8.0
0448A:  RLCF   00,F
0448C:  MOVF   00,W
0448E:  CLRF   03
04490:  ADDLW  60
04492:  MOVWF  FE9
04494:  MOVLW  06
04496:  ADDWFC 03,W
04498:  MOVWF  FEA
0449A:  CLRF   FEC
0449C:  MOVF   FED,F
0449E:  CLRF   FEF
....................           
....................          if(Temperatura1[l+((Prog-1)*Pasos)]<0) 
044A0:  MOVLW  01
044A2:  SUBWF  x62,W
044A4:  MULLW  10
044A6:  MOVF   FF3,W
044A8:  ADDWF  x61,W
044AA:  MOVWF  00
044AC:  BCF    FD8.0
044AE:  RLCF   00,F
044B0:  MOVF   00,W
044B2:  CLRF   03
044B4:  ADDLW  60
044B6:  MOVWF  FE9
044B8:  MOVLW  06
044BA:  ADDWFC 03,W
044BC:  MOVWF  FEA
044BE:  MOVFF  FEC,864
044C2:  MOVF   FED,F
044C4:  MOVFF  FEF,863
044C8:  BTFSC  x64.7
044CA:  BRA    44CE
044CC:  BRA    44F6
....................             Temperatura1[l+((Prog-1)*Pasos)]=1200; 
044CE:  MOVLW  01
044D0:  SUBWF  x62,W
044D2:  MULLW  10
044D4:  MOVF   FF3,W
044D6:  ADDWF  x61,W
044D8:  MOVWF  00
044DA:  BCF    FD8.0
044DC:  RLCF   00,F
044DE:  MOVF   00,W
044E0:  CLRF   03
044E2:  ADDLW  60
044E4:  MOVWF  FE9
044E6:  MOVLW  06
044E8:  ADDWFC 03,W
044EA:  MOVWF  FEA
044EC:  MOVLW  04
044EE:  MOVWF  FEC
044F0:  MOVF   FED,F
044F2:  MOVLW  B0
044F4:  MOVWF  FEF
....................           
....................          if(Temperatura1[l+((Prog-1)*Pasos)]>1100) 
044F6:  MOVLW  01
044F8:  SUBWF  x62,W
044FA:  MULLW  10
044FC:  MOVF   FF3,W
044FE:  ADDWF  x61,W
04500:  MOVWF  00
04502:  BCF    FD8.0
04504:  RLCF   00,F
04506:  MOVF   00,W
04508:  CLRF   03
0450A:  ADDLW  60
0450C:  MOVWF  FE9
0450E:  MOVLW  06
04510:  ADDWFC 03,W
04512:  MOVWF  FEA
04514:  MOVFF  FEC,864
04518:  MOVF   FED,F
0451A:  MOVFF  FEF,863
0451E:  BTFSC  x64.7
04520:  BRA    4554
04522:  MOVF   x64,W
04524:  SUBLW  03
04526:  BC    4554
04528:  XORLW  FF
0452A:  BNZ   4532
0452C:  MOVF   x63,W
0452E:  SUBLW  4C
04530:  BC    4554
....................             Horas1[l+((Prog-1)*Pasos)]=0; 
04532:  MOVLW  01
04534:  SUBWF  x62,W
04536:  MULLW  10
04538:  MOVF   FF3,W
0453A:  ADDWF  x61,W
0453C:  MOVWF  00
0453E:  BCF    FD8.0
04540:  RLCF   00,F
04542:  MOVF   00,W
04544:  CLRF   03
04546:  MOVWF  FE9
04548:  MOVLW  07
0454A:  ADDWF  03,W
0454C:  MOVWF  FEA
0454E:  CLRF   FEC
04550:  MOVF   FED,F
04552:  CLRF   FEF
....................           
....................          strcpy(Menus.Letra,"P 0"); 
04554:  MOVLW  08
04556:  MOVWF  FEA
04558:  MOVLW  40
0455A:  MOVWF  FE9
0455C:  MOVFF  FF2,863
04560:  BCF    FF2.7
04562:  MOVLW  00
04564:  MOVLB  0
04566:  CALL   06F2
0456A:  TBLRD*-
0456C:  TBLRD*+
0456E:  MOVF   FF5,W
04570:  MOVWF  FEE
04572:  IORLW  00
04574:  BNZ   456C
04576:  MOVLB  8
04578:  BTFSC  x63.7
0457A:  BSF    FF2.7
....................          displayMenu(Menus.Letra,30,0,1,2); 
0457C:  MOVLW  08
0457E:  MOVWF  x68
04580:  MOVLW  40
04582:  MOVWF  x67
04584:  MOVLW  1E
04586:  MOVWF  x69
04588:  CLRF   x6A
0458A:  MOVLW  01
0458C:  MOVWF  x6B
0458E:  MOVLW  02
04590:  MOVWF  x6C
04592:  MOVLB  0
04594:  CALL   1A3E
....................          displayTiempo(Prog,68,0,1,2); 
04598:  MOVFF  862,863
0459C:  MOVLW  44
0459E:  MOVLB  8
045A0:  MOVWF  x64
045A2:  CLRF   x65
045A4:  MOVLW  01
045A6:  MOVWF  x66
045A8:  MOVLW  02
045AA:  MOVWF  x67
045AC:  MOVLB  0
045AE:  CALL   3876
....................           
....................          strcpy(Menus.Letra,"Segmento "); 
045B2:  MOVLW  08
045B4:  MOVWF  FEA
045B6:  MOVLW  40
045B8:  MOVWF  FE9
045BA:  MOVFF  FF2,863
045BE:  BCF    FF2.7
045C0:  MOVLW  00
045C2:  CALL   0714
045C6:  TBLRD*-
045C8:  TBLRD*+
045CA:  MOVF   FF5,W
045CC:  MOVWF  FEE
045CE:  IORLW  00
045D0:  BNZ   45C8
045D2:  MOVLB  8
045D4:  BTFSC  x63.7
045D6:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,20,1,1); 
045D8:  MOVLW  08
045DA:  MOVWF  x68
045DC:  MOVLW  40
045DE:  MOVWF  x67
045E0:  CLRF   x69
045E2:  MOVLW  14
045E4:  MOVWF  x6A
045E6:  MOVLW  01
045E8:  MOVWF  x6B
045EA:  MOVWF  x6C
045EC:  MOVLB  0
045EE:  CALL   1A3E
....................          displayTiempo(l,63,20,1,1); 
045F2:  MOVFF  861,863
045F6:  MOVLW  3F
045F8:  MOVLB  8
045FA:  MOVWF  x64
045FC:  MOVLW  14
045FE:  MOVWF  x65
04600:  MOVLW  01
04602:  MOVWF  x66
04604:  MOVWF  x67
04606:  MOVLB  0
04608:  CALL   3876
....................           
....................          strcpy(Menus.Letra,"TA:"); 
0460C:  MOVLW  08
0460E:  MOVWF  FEA
04610:  MOVLW  40
04612:  MOVWF  FE9
04614:  MOVFF  FF2,863
04618:  BCF    FF2.7
0461A:  MOVLW  00
0461C:  CALL   073C
04620:  TBLRD*-
04622:  TBLRD*+
04624:  MOVF   FF5,W
04626:  MOVWF  FEE
04628:  IORLW  00
0462A:  BNZ   4622
0462C:  MOVLB  8
0462E:  BTFSC  x63.7
04630:  BSF    FF2.7
....................          displayMenu(Menus.Letra,80,20,3,1); 
04632:  MOVLW  08
04634:  MOVWF  x68
04636:  MOVLW  40
04638:  MOVWF  x67
0463A:  MOVLW  50
0463C:  MOVWF  x69
0463E:  MOVLW  14
04640:  MOVWF  x6A
04642:  MOVLW  03
04644:  MOVWF  x6B
04646:  MOVLW  01
04648:  MOVWF  x6C
0464A:  MOVLB  0
0464C:  CALL   1A3E
....................           
....................          if(l>0) 
04650:  MOVLB  8
04652:  MOVF   x61,F
04654:  BZ    46A2
....................             displayTemperatura(Temperatura1[l-1+((Prog-1)*Pasos)],100,20,1,1); 
04656:  MOVLW  01
04658:  SUBWF  x61,W
0465A:  MOVWF  x63
0465C:  MOVLW  01
0465E:  SUBWF  x62,W
04660:  MULLW  10
04662:  MOVF   FF3,W
04664:  ADDWF  x63,W
04666:  MOVWF  00
04668:  BCF    FD8.0
0466A:  RLCF   00,F
0466C:  MOVF   00,W
0466E:  CLRF   03
04670:  ADDLW  60
04672:  MOVWF  FE9
04674:  MOVLW  06
04676:  ADDWFC 03,W
04678:  MOVWF  FEA
0467A:  MOVFF  FEC,864
0467E:  MOVF   FED,F
04680:  MOVFF  FEF,863
04684:  MOVFF  864,866
04688:  MOVFF  863,865
0468C:  MOVLW  64
0468E:  MOVWF  x67
04690:  MOVLW  14
04692:  MOVWF  x68
04694:  MOVLW  01
04696:  MOVWF  x69
04698:  MOVWF  x6A
0469A:  MOVLB  0
0469C:  CALL   3C64
046A0:  MOVLB  8
....................           
....................          if(Opcio==1){ 
046A2:  DECFSZ x60,W
046A4:  BRA    4A92
....................             strcpy(Menus.Letra,"Temperatura:"); 
046A6:  MOVLW  08
046A8:  MOVWF  FEA
046AA:  MOVLW  40
046AC:  MOVWF  FE9
046AE:  MOVFF  FF2,863
046B2:  BCF    FF2.7
046B4:  MOVLW  00
046B6:  MOVLB  0
046B8:  CALL   075E
046BC:  TBLRD*-
046BE:  TBLRD*+
046C0:  MOVF   FF5,W
046C2:  MOVWF  FEE
046C4:  IORLW  00
046C6:  BNZ   46BE
046C8:  MOVLB  8
046CA:  BTFSC  x63.7
046CC:  BSF    FF2.7
....................             displayTemps(Menus.Letra,Temperatura1[l+((Prog-1)*Pasos)],0,32,1,1); 
046CE:  MOVLW  01
046D0:  SUBWF  x62,W
046D2:  MULLW  10
046D4:  MOVF   FF3,W
046D6:  ADDWF  x61,W
046D8:  MOVWF  00
046DA:  BCF    FD8.0
046DC:  RLCF   00,F
046DE:  MOVF   00,W
046E0:  CLRF   03
046E2:  ADDLW  60
046E4:  MOVWF  FE9
046E6:  MOVLW  06
046E8:  ADDWFC 03,W
046EA:  MOVWF  FEA
046EC:  MOVFF  FEC,864
046F0:  MOVF   FED,F
046F2:  MOVFF  FEF,863
046F6:  MOVLW  08
046F8:  MOVWF  x66
046FA:  MOVLW  40
046FC:  MOVWF  x65
046FE:  MOVFF  864,868
04702:  MOVFF  863,867
04706:  CLRF   x69
04708:  MOVLW  20
0470A:  MOVWF  x6A
0470C:  MOVLW  01
0470E:  MOVWF  x6B
04710:  MOVWF  x6C
04712:  MOVLB  0
04714:  RCALL  4046
....................             strcpy(Menus.Letra,"Horas:"); 
04716:  MOVLW  08
04718:  MOVWF  FEA
0471A:  MOVLW  40
0471C:  MOVWF  FE9
0471E:  MOVFF  FF2,863
04722:  BCF    FF2.7
04724:  MOVLW  00
04726:  CALL   078A
0472A:  TBLRD*-
0472C:  TBLRD*+
0472E:  MOVF   FF5,W
04730:  MOVWF  FEE
04732:  IORLW  00
04734:  BNZ   472C
04736:  MOVLB  8
04738:  BTFSC  x63.7
0473A:  BSF    FF2.7
....................             displayTemps(Menus.Letra,Horas1[l+((Prog-1)*Pasos)],0,44,10,1); 
0473C:  MOVLW  01
0473E:  SUBWF  x62,W
04740:  MULLW  10
04742:  MOVF   FF3,W
04744:  ADDWF  x61,W
04746:  MOVWF  00
04748:  BCF    FD8.0
0474A:  RLCF   00,F
0474C:  MOVF   00,W
0474E:  CLRF   03
04750:  MOVWF  FE9
04752:  MOVLW  07
04754:  ADDWF  03,W
04756:  MOVWF  FEA
04758:  MOVFF  FEC,864
0475C:  MOVF   FED,F
0475E:  MOVFF  FEF,863
04762:  MOVLW  08
04764:  MOVWF  x66
04766:  MOVLW  40
04768:  MOVWF  x65
0476A:  MOVFF  864,868
0476E:  MOVFF  863,867
04772:  CLRF   x69
04774:  MOVLW  2C
04776:  MOVWF  x6A
04778:  MOVLW  0A
0477A:  MOVWF  x6B
0477C:  MOVLW  01
0477E:  MOVWF  x6C
04780:  MOVLB  0
04782:  RCALL  4046
....................             strcpy(Menus.Letra,"Minutos:"); 
04784:  MOVLW  08
04786:  MOVWF  FEA
04788:  MOVLW  40
0478A:  MOVWF  FE9
0478C:  MOVFF  FF2,863
04790:  BCF    FF2.7
04792:  MOVLW  00
04794:  CALL   07B0
04798:  TBLRD*-
0479A:  TBLRD*+
0479C:  MOVF   FF5,W
0479E:  MOVWF  FEE
047A0:  IORLW  00
047A2:  BNZ   479A
047A4:  MOVLB  8
047A6:  BTFSC  x63.7
047A8:  BSF    FF2.7
....................             displayTemps(Menus.Letra,Minutos1[l+((Prog-1)*Pasos)],0,55,10,1); 
047AA:  MOVLW  01
047AC:  SUBWF  x62,W
047AE:  MULLW  10
047B0:  MOVF   FF3,W
047B2:  ADDWF  x61,W
047B4:  MOVWF  00
047B6:  BCF    FD8.0
047B8:  RLCF   00,F
047BA:  MOVF   00,W
047BC:  CLRF   03
047BE:  ADDLW  A0
047C0:  MOVWF  FE9
047C2:  MOVLW  07
047C4:  ADDWFC 03,W
047C6:  MOVWF  FEA
047C8:  MOVFF  FEC,864
047CC:  MOVF   FED,F
047CE:  MOVFF  FEF,863
047D2:  MOVLW  08
047D4:  MOVWF  x66
047D6:  MOVLW  40
047D8:  MOVWF  x65
047DA:  MOVFF  864,868
047DE:  MOVFF  863,867
047E2:  CLRF   x69
047E4:  MOVLW  37
047E6:  MOVWF  x6A
047E8:  MOVLW  0A
047EA:  MOVWF  x6B
047EC:  MOVLW  01
047EE:  MOVWF  x6C
047F0:  MOVLB  0
047F2:  RCALL  4046
....................             if(UP)//Si oprime hacia arriba 
047F4:  BSF    F92.5
047F6:  BTFSC  F80.5
047F8:  BRA    4942
....................             { 
....................                Buzz_on;delay_ms(10);Buzz_off; 
047FA:  BSF    F8B.4
047FC:  BCF    F94.4
047FE:  MOVLW  0A
04800:  MOVLB  8
04802:  MOVWF  x68
04804:  MOVLB  0
04806:  CALL   1390
0480A:  BCF    F8B.4
0480C:  BCF    F94.4
....................                if(tiempoup<4){ 
0480E:  MOVLB  5
04810:  MOVF   x90,W
04812:  SUBLW  03
04814:  BNC   4844
....................                   flagup=1; 
04816:  BSF    x87.0
....................                   Temperatura1[l+((Prog-1)*Pasos)]++; 
04818:  MOVLW  01
0481A:  MOVLB  8
0481C:  SUBWF  x62,W
0481E:  MULLW  10
04820:  MOVF   FF3,W
04822:  ADDWF  x61,W
04824:  MOVWF  00
04826:  BCF    FD8.0
04828:  RLCF   00,F
0482A:  MOVF   00,W
0482C:  CLRF   03
0482E:  ADDLW  60
04830:  MOVWF  FE9
04832:  MOVLW  06
04834:  ADDWFC 03,W
04836:  MOVWF  FEA
04838:  MOVLW  01
0483A:  ADDWF  FEE,F
0483C:  BNC   4840
0483E:  INCF   FEF,F
....................                } 
....................                else{ 
04840:  BRA    4878
04842:  MOVLB  5
....................                   flagup=0; 
04844:  BCF    x87.0
....................                   Temperatura1[l+((Prog-1)*Pasos)]+=10; 
04846:  MOVLW  01
04848:  MOVLB  8
0484A:  SUBWF  x62,W
0484C:  MULLW  10
0484E:  MOVF   FF3,W
04850:  ADDWF  x61,W
04852:  MOVWF  00
04854:  BCF    FD8.0
04856:  RLCF   00,F
04858:  MOVF   00,W
0485A:  CLRF   03
0485C:  ADDLW  60
0485E:  MOVWF  FE9
04860:  MOVLW  06
04862:  ADDWFC 03,W
04864:  MOVWF  FEA
04866:  MOVLW  0A
04868:  ADDWF  FEF,W
0486A:  MOVWF  01
0486C:  MOVLW  00
0486E:  ADDWFC FEC,W
04870:  MOVF   FED,F
04872:  MOVFF  01,FEF
04876:  MOVWF  FEC
....................                }  
....................                if(l<Pasos-1) 
04878:  MOVF   x61,W
0487A:  SUBLW  0E
0487C:  BNC   48DE
....................                   Temperatura1[l+1+((Prog-1)*Pasos)]=Temperatura1[l+((Prog-1)*Pasos)];  
0487E:  MOVLW  01
04880:  ADDWF  x61,W
04882:  MOVWF  x63
04884:  MOVLW  01
04886:  SUBWF  x62,W
04888:  MULLW  10
0488A:  MOVF   FF3,W
0488C:  ADDWF  x63,W
0488E:  MOVWF  00
04890:  BCF    FD8.0
04892:  RLCF   00,F
04894:  MOVF   00,W
04896:  CLRF   03
04898:  ADDLW  60
0489A:  MOVWF  01
0489C:  MOVLW  06
0489E:  ADDWFC 03,F
048A0:  MOVFF  03,864
048A4:  MOVLW  01
048A6:  SUBWF  x62,W
048A8:  MULLW  10
048AA:  MOVF   FF3,W
048AC:  ADDWF  x61,W
048AE:  MOVWF  00
048B0:  BCF    FD8.0
048B2:  RLCF   00,F
048B4:  MOVF   00,W
048B6:  CLRF   03
048B8:  ADDLW  60
048BA:  MOVWF  FE9
048BC:  MOVLW  06
048BE:  ADDWFC 03,W
048C0:  MOVWF  FEA
048C2:  MOVFF  FEC,03
048C6:  MOVF   FED,F
048C8:  MOVFF  FEF,865
048CC:  MOVFF  864,FEA
048D0:  MOVFF  01,FE9
048D4:  MOVFF  03,FEC
048D8:  MOVF   FED,F
048DA:  MOVFF  865,FEF
....................                    
....................                if(Temperatura1[l+((Prog-1)*Pasos)]>1200) 
048DE:  MOVLW  01
048E0:  SUBWF  x62,W
048E2:  MULLW  10
048E4:  MOVF   FF3,W
048E6:  ADDWF  x61,W
048E8:  MOVWF  00
048EA:  BCF    FD8.0
048EC:  RLCF   00,F
048EE:  MOVF   00,W
048F0:  CLRF   03
048F2:  ADDLW  60
048F4:  MOVWF  FE9
048F6:  MOVLW  06
048F8:  ADDWFC 03,W
048FA:  MOVWF  FEA
048FC:  MOVFF  FEC,864
04900:  MOVF   FED,F
04902:  MOVFF  FEF,863
04906:  BTFSC  x64.7
04908:  BRA    493E
0490A:  MOVF   x64,W
0490C:  SUBLW  03
0490E:  BC    493E
04910:  XORLW  FF
04912:  BNZ   491A
04914:  MOVF   x63,W
04916:  SUBLW  B0
04918:  BC    493E
....................                   Temperatura1[l+((Prog-1)*Pasos)]=0; 
0491A:  MOVLW  01
0491C:  SUBWF  x62,W
0491E:  MULLW  10
04920:  MOVF   FF3,W
04922:  ADDWF  x61,W
04924:  MOVWF  00
04926:  BCF    FD8.0
04928:  RLCF   00,F
0492A:  MOVF   00,W
0492C:  CLRF   03
0492E:  ADDLW  60
04930:  MOVWF  FE9
04932:  MOVLW  06
04934:  ADDWFC 03,W
04936:  MOVWF  FEA
04938:  CLRF   FEC
0493A:  MOVF   FED,F
0493C:  CLRF   FEF
....................             } 
....................             else 
0493E:  BRA    494A
04940:  MOVLB  0
....................             { 
....................                flagup=0;tiempoup=0; 
04942:  MOVLB  5
04944:  BCF    x87.0
04946:  CLRF   x90
04948:  MOVLB  8
....................             } 
....................                       
....................             if(DOWN)//Si oprime hacia abajo 
0494A:  BSF    F96.0
0494C:  BTFSC  F84.0
0494E:  BRA    4A8A
....................             { 
....................                Buzz_on;delay_ms(10);Buzz_off; 
04950:  BSF    F8B.4
04952:  BCF    F94.4
04954:  MOVLW  0A
04956:  MOVWF  x68
04958:  MOVLB  0
0495A:  CALL   1390
0495E:  BCF    F8B.4
04960:  BCF    F94.4
....................                if(tiempodn<4){ 
04962:  MOVLB  5
04964:  MOVF   x91,W
04966:  SUBLW  03
04968:  BNC   499A
....................                   flagdn=1; 
0496A:  BSF    x87.1
....................                   Temperatura1[l+((Prog-1)*Pasos)]--; 
0496C:  MOVLW  01
0496E:  MOVLB  8
04970:  SUBWF  x62,W
04972:  MULLW  10
04974:  MOVF   FF3,W
04976:  ADDWF  x61,W
04978:  MOVWF  00
0497A:  BCF    FD8.0
0497C:  RLCF   00,F
0497E:  MOVF   00,W
04980:  CLRF   03
04982:  ADDLW  60
04984:  MOVWF  FE9
04986:  MOVLW  06
04988:  ADDWFC 03,W
0498A:  MOVWF  FEA
0498C:  MOVLW  FF
0498E:  ADDWF  FEF,F
04990:  BC    4996
04992:  MOVF   FEE,F
04994:  DECF   FED,F
....................                } 
....................                else{ 
04996:  BRA    49D2
04998:  MOVLB  5
....................                   flagdn=0; 
0499A:  BCF    x87.1
....................                   Temperatura1[l+((Prog-1)*Pasos)]-=10; 
0499C:  MOVLW  01
0499E:  MOVLB  8
049A0:  SUBWF  x62,W
049A2:  MULLW  10
049A4:  MOVF   FF3,W
049A6:  ADDWF  x61,W
049A8:  MOVWF  00
049AA:  BCF    FD8.0
049AC:  RLCF   00,F
049AE:  MOVF   00,W
049B0:  CLRF   03
049B2:  ADDLW  60
049B4:  MOVWF  FE9
049B6:  MOVLW  06
049B8:  ADDWFC 03,W
049BA:  MOVWF  FEA
049BC:  MOVLW  0A
049BE:  SUBWF  FEF,W
049C0:  MOVWF  00
049C2:  MOVLW  00
049C4:  SUBWFB FEC,W
049C6:  MOVWF  03
049C8:  MOVF   00,W
049CA:  MOVF   FED,F
049CC:  MOVWF  FEF
049CE:  MOVFF  03,FEC
....................                } 
....................                Temperatura1[l+1+((Prog-1)*Pasos)]=Temperatura1[l+((Prog-1)*Pasos)];  
049D2:  MOVLW  01
049D4:  ADDWF  x61,W
049D6:  MOVWF  x63
049D8:  MOVLW  01
049DA:  SUBWF  x62,W
049DC:  MULLW  10
049DE:  MOVF   FF3,W
049E0:  ADDWF  x63,W
049E2:  MOVWF  00
049E4:  BCF    FD8.0
049E6:  RLCF   00,F
049E8:  MOVF   00,W
049EA:  CLRF   03
049EC:  ADDLW  60
049EE:  MOVWF  01
049F0:  MOVLW  06
049F2:  ADDWFC 03,F
049F4:  MOVFF  03,864
049F8:  MOVLW  01
049FA:  SUBWF  x62,W
049FC:  MULLW  10
049FE:  MOVF   FF3,W
04A00:  ADDWF  x61,W
04A02:  MOVWF  00
04A04:  BCF    FD8.0
04A06:  RLCF   00,F
04A08:  MOVF   00,W
04A0A:  CLRF   03
04A0C:  ADDLW  60
04A0E:  MOVWF  FE9
04A10:  MOVLW  06
04A12:  ADDWFC 03,W
04A14:  MOVWF  FEA
04A16:  MOVFF  FEC,03
04A1A:  MOVF   FED,F
04A1C:  MOVFF  FEF,865
04A20:  MOVFF  864,FEA
04A24:  MOVFF  01,FE9
04A28:  MOVFF  03,FEC
04A2C:  MOVF   FED,F
04A2E:  MOVFF  865,FEF
....................                 
....................                if(Temperatura1[l+((Prog-1)*Pasos)]<0) 
04A32:  MOVLW  01
04A34:  SUBWF  x62,W
04A36:  MULLW  10
04A38:  MOVF   FF3,W
04A3A:  ADDWF  x61,W
04A3C:  MOVWF  00
04A3E:  BCF    FD8.0
04A40:  RLCF   00,F
04A42:  MOVF   00,W
04A44:  CLRF   03
04A46:  ADDLW  60
04A48:  MOVWF  FE9
04A4A:  MOVLW  06
04A4C:  ADDWFC 03,W
04A4E:  MOVWF  FEA
04A50:  MOVFF  FEC,864
04A54:  MOVF   FED,F
04A56:  MOVFF  FEF,863
04A5A:  BTFSC  x64.7
04A5C:  BRA    4A60
04A5E:  BRA    4A88
....................                   Temperatura1[l+((Prog-1)*Pasos)]=1200; 
04A60:  MOVLW  01
04A62:  SUBWF  x62,W
04A64:  MULLW  10
04A66:  MOVF   FF3,W
04A68:  ADDWF  x61,W
04A6A:  MOVWF  00
04A6C:  BCF    FD8.0
04A6E:  RLCF   00,F
04A70:  MOVF   00,W
04A72:  CLRF   03
04A74:  ADDLW  60
04A76:  MOVWF  FE9
04A78:  MOVLW  06
04A7A:  ADDWFC 03,W
04A7C:  MOVWF  FEA
04A7E:  MOVLW  04
04A80:  MOVWF  FEC
04A82:  MOVF   FED,F
04A84:  MOVLW  B0
04A86:  MOVWF  FEF
....................             } 
....................             else{ 
04A88:  BRA    4A92
....................                flagdn=0;tiempodn=0; 
04A8A:  MOVLB  5
04A8C:  BCF    x87.1
04A8E:  CLRF   x91
04A90:  MOVLB  8
....................             } 
....................          } 
....................           
....................          if(Opcio==2){ 
04A92:  MOVF   x60,W
04A94:  SUBLW  02
04A96:  BTFSS  FD8.2
04A98:  BRA    4DAE
....................             strcpy(Menus.Letra,"Temperatura:"); 
04A9A:  MOVLW  08
04A9C:  MOVWF  FEA
04A9E:  MOVLW  40
04AA0:  MOVWF  FE9
04AA2:  MOVFF  FF2,863
04AA6:  BCF    FF2.7
04AA8:  MOVLW  00
04AAA:  MOVLB  0
04AAC:  CALL   075E
04AB0:  TBLRD*-
04AB2:  TBLRD*+
04AB4:  MOVF   FF5,W
04AB6:  MOVWF  FEE
04AB8:  IORLW  00
04ABA:  BNZ   4AB2
04ABC:  MOVLB  8
04ABE:  BTFSC  x63.7
04AC0:  BSF    FF2.7
....................             displayTemps(Menus.Letra,Temperatura1[l+((Prog-1)*Pasos)],0,32,0,1); 
04AC2:  MOVLW  01
04AC4:  SUBWF  x62,W
04AC6:  MULLW  10
04AC8:  MOVF   FF3,W
04ACA:  ADDWF  x61,W
04ACC:  MOVWF  00
04ACE:  BCF    FD8.0
04AD0:  RLCF   00,F
04AD2:  MOVF   00,W
04AD4:  CLRF   03
04AD6:  ADDLW  60
04AD8:  MOVWF  FE9
04ADA:  MOVLW  06
04ADC:  ADDWFC 03,W
04ADE:  MOVWF  FEA
04AE0:  MOVFF  FEC,864
04AE4:  MOVF   FED,F
04AE6:  MOVFF  FEF,863
04AEA:  MOVLW  08
04AEC:  MOVWF  x66
04AEE:  MOVLW  40
04AF0:  MOVWF  x65
04AF2:  MOVFF  864,868
04AF6:  MOVFF  863,867
04AFA:  CLRF   x69
04AFC:  MOVLW  20
04AFE:  MOVWF  x6A
04B00:  CLRF   x6B
04B02:  MOVLW  01
04B04:  MOVWF  x6C
04B06:  MOVLB  0
04B08:  CALL   4046
....................             strcpy(Menus.Letra,"Horas:"); 
04B0C:  MOVLW  08
04B0E:  MOVWF  FEA
04B10:  MOVLW  40
04B12:  MOVWF  FE9
04B14:  MOVFF  FF2,863
04B18:  BCF    FF2.7
04B1A:  MOVLW  00
04B1C:  CALL   078A
04B20:  TBLRD*-
04B22:  TBLRD*+
04B24:  MOVF   FF5,W
04B26:  MOVWF  FEE
04B28:  IORLW  00
04B2A:  BNZ   4B22
04B2C:  MOVLB  8
04B2E:  BTFSC  x63.7
04B30:  BSF    FF2.7
....................             displayTemps(Menus.Letra,Horas1[l+((Prog-1)*Pasos)],0,44,11,1); 
04B32:  MOVLW  01
04B34:  SUBWF  x62,W
04B36:  MULLW  10
04B38:  MOVF   FF3,W
04B3A:  ADDWF  x61,W
04B3C:  MOVWF  00
04B3E:  BCF    FD8.0
04B40:  RLCF   00,F
04B42:  MOVF   00,W
04B44:  CLRF   03
04B46:  MOVWF  FE9
04B48:  MOVLW  07
04B4A:  ADDWF  03,W
04B4C:  MOVWF  FEA
04B4E:  MOVFF  FEC,864
04B52:  MOVF   FED,F
04B54:  MOVFF  FEF,863
04B58:  MOVLW  08
04B5A:  MOVWF  x66
04B5C:  MOVLW  40
04B5E:  MOVWF  x65
04B60:  MOVFF  864,868
04B64:  MOVFF  863,867
04B68:  CLRF   x69
04B6A:  MOVLW  2C
04B6C:  MOVWF  x6A
04B6E:  MOVLW  0B
04B70:  MOVWF  x6B
04B72:  MOVLW  01
04B74:  MOVWF  x6C
04B76:  MOVLB  0
04B78:  CALL   4046
....................             strcpy(Menus.Letra,"Minutos:"); 
04B7C:  MOVLW  08
04B7E:  MOVWF  FEA
04B80:  MOVLW  40
04B82:  MOVWF  FE9
04B84:  MOVFF  FF2,863
04B88:  BCF    FF2.7
04B8A:  MOVLW  00
04B8C:  CALL   07B0
04B90:  TBLRD*-
04B92:  TBLRD*+
04B94:  MOVF   FF5,W
04B96:  MOVWF  FEE
04B98:  IORLW  00
04B9A:  BNZ   4B92
04B9C:  MOVLB  8
04B9E:  BTFSC  x63.7
04BA0:  BSF    FF2.7
....................             displayTemps(Menus.Letra,Minutos1[l+((Prog-1)*Pasos)],0,55,10,1); 
04BA2:  MOVLW  01
04BA4:  SUBWF  x62,W
04BA6:  MULLW  10
04BA8:  MOVF   FF3,W
04BAA:  ADDWF  x61,W
04BAC:  MOVWF  00
04BAE:  BCF    FD8.0
04BB0:  RLCF   00,F
04BB2:  MOVF   00,W
04BB4:  CLRF   03
04BB6:  ADDLW  A0
04BB8:  MOVWF  FE9
04BBA:  MOVLW  07
04BBC:  ADDWFC 03,W
04BBE:  MOVWF  FEA
04BC0:  MOVFF  FEC,864
04BC4:  MOVF   FED,F
04BC6:  MOVFF  FEF,863
04BCA:  MOVLW  08
04BCC:  MOVWF  x66
04BCE:  MOVLW  40
04BD0:  MOVWF  x65
04BD2:  MOVFF  864,868
04BD6:  MOVFF  863,867
04BDA:  CLRF   x69
04BDC:  MOVLW  37
04BDE:  MOVWF  x6A
04BE0:  MOVLW  0A
04BE2:  MOVWF  x6B
04BE4:  MOVLW  01
04BE6:  MOVWF  x6C
04BE8:  MOVLB  0
04BEA:  CALL   4046
....................             if(UP)//Si oprime hacia arriba 
04BEE:  BSF    F92.5
04BF0:  BTFSC  F80.5
04BF2:  BRA    4CC8
....................             { 
....................                Buzz_on;delay_ms(10);Buzz_off; 
04BF4:  BSF    F8B.4
04BF6:  BCF    F94.4
04BF8:  MOVLW  0A
04BFA:  MOVLB  8
04BFC:  MOVWF  x68
04BFE:  MOVLB  0
04C00:  CALL   1390
04C04:  BCF    F8B.4
04C06:  BCF    F94.4
....................                if(tiempoup<4){ 
04C08:  MOVLB  5
04C0A:  MOVF   x90,W
04C0C:  SUBLW  03
04C0E:  BNC   4C3C
....................                   flagup=1; 
04C10:  BSF    x87.0
....................                   Horas1[l+((Prog-1)*Pasos)]++; 
04C12:  MOVLW  01
04C14:  MOVLB  8
04C16:  SUBWF  x62,W
04C18:  MULLW  10
04C1A:  MOVF   FF3,W
04C1C:  ADDWF  x61,W
04C1E:  MOVWF  00
04C20:  BCF    FD8.0
04C22:  RLCF   00,F
04C24:  MOVF   00,W
04C26:  CLRF   03
04C28:  MOVWF  FE9
04C2A:  MOVLW  07
04C2C:  ADDWF  03,W
04C2E:  MOVWF  FEA
04C30:  MOVLW  01
04C32:  ADDWF  FEE,F
04C34:  BNC   4C38
04C36:  INCF   FEF,F
....................                } 
....................                else{ 
04C38:  BRA    4C6E
04C3A:  MOVLB  5
....................                   flagup=0; 
04C3C:  BCF    x87.0
....................                   Horas1[l+((Prog-1)*Pasos)]+=10; 
04C3E:  MOVLW  01
04C40:  MOVLB  8
04C42:  SUBWF  x62,W
04C44:  MULLW  10
04C46:  MOVF   FF3,W
04C48:  ADDWF  x61,W
04C4A:  MOVWF  00
04C4C:  BCF    FD8.0
04C4E:  RLCF   00,F
04C50:  MOVF   00,W
04C52:  CLRF   03
04C54:  MOVWF  FE9
04C56:  MOVLW  07
04C58:  ADDWF  03,W
04C5A:  MOVWF  FEA
04C5C:  MOVLW  0A
04C5E:  ADDWF  FEF,W
04C60:  MOVWF  01
04C62:  MOVLW  00
04C64:  ADDWFC FEC,W
04C66:  MOVF   FED,F
04C68:  MOVFF  01,FEF
04C6C:  MOVWF  FEC
....................                } 
....................                if(Horas1[l+((Prog-1)*Pasos)]>99) 
04C6E:  MOVLW  01
04C70:  SUBWF  x62,W
04C72:  MULLW  10
04C74:  MOVF   FF3,W
04C76:  ADDWF  x61,W
04C78:  MOVWF  00
04C7A:  BCF    FD8.0
04C7C:  RLCF   00,F
04C7E:  MOVF   00,W
04C80:  CLRF   03
04C82:  MOVWF  FE9
04C84:  MOVLW  07
04C86:  ADDWF  03,W
04C88:  MOVWF  FEA
04C8A:  MOVFF  FEC,864
04C8E:  MOVF   FED,F
04C90:  MOVFF  FEF,863
04C94:  BTFSC  x64.7
04C96:  BRA    4CC4
04C98:  MOVF   x64,F
04C9A:  BNZ   4CA2
04C9C:  MOVF   x63,W
04C9E:  SUBLW  63
04CA0:  BC    4CC4
....................                   Horas1[l+((Prog-1)*Pasos)]=0; 
04CA2:  MOVLW  01
04CA4:  SUBWF  x62,W
04CA6:  MULLW  10
04CA8:  MOVF   FF3,W
04CAA:  ADDWF  x61,W
04CAC:  MOVWF  00
04CAE:  BCF    FD8.0
04CB0:  RLCF   00,F
04CB2:  MOVF   00,W
04CB4:  CLRF   03
04CB6:  MOVWF  FE9
04CB8:  MOVLW  07
04CBA:  ADDWF  03,W
04CBC:  MOVWF  FEA
04CBE:  CLRF   FEC
04CC0:  MOVF   FED,F
04CC2:  CLRF   FEF
....................             } 
....................             else{ 
04CC4:  BRA    4CD0
04CC6:  MOVLB  0
....................                flagup=0;tiempoup=0; 
04CC8:  MOVLB  5
04CCA:  BCF    x87.0
04CCC:  CLRF   x90
04CCE:  MOVLB  8
....................             } 
....................                       
....................             if(DOWN)//Si oprime hacia abajo 
04CD0:  BSF    F96.0
04CD2:  BTFSC  F84.0
04CD4:  BRA    4DA6
....................             { 
....................                Buzz_on;delay_ms(10);Buzz_off; 
04CD6:  BSF    F8B.4
04CD8:  BCF    F94.4
04CDA:  MOVLW  0A
04CDC:  MOVWF  x68
04CDE:  MOVLB  0
04CE0:  CALL   1390
04CE4:  BCF    F8B.4
04CE6:  BCF    F94.4
....................                if(tiempodn<4){ 
04CE8:  MOVLB  5
04CEA:  MOVF   x91,W
04CEC:  SUBLW  03
04CEE:  BNC   4D1E
....................                   flagdn=1; 
04CF0:  BSF    x87.1
....................                   Horas1[l+((Prog-1)*Pasos)]--; 
04CF2:  MOVLW  01
04CF4:  MOVLB  8
04CF6:  SUBWF  x62,W
04CF8:  MULLW  10
04CFA:  MOVF   FF3,W
04CFC:  ADDWF  x61,W
04CFE:  MOVWF  00
04D00:  BCF    FD8.0
04D02:  RLCF   00,F
04D04:  MOVF   00,W
04D06:  CLRF   03
04D08:  MOVWF  FE9
04D0A:  MOVLW  07
04D0C:  ADDWF  03,W
04D0E:  MOVWF  FEA
04D10:  MOVLW  FF
04D12:  ADDWF  FEF,F
04D14:  BC    4D1A
04D16:  MOVF   FEE,F
04D18:  DECF   FED,F
....................                } 
....................                else{ 
04D1A:  BRA    4D54
04D1C:  MOVLB  5
....................                   flagdn=0; 
04D1E:  BCF    x87.1
....................                   Horas1[l+((Prog-1)*Pasos)]-=10; 
04D20:  MOVLW  01
04D22:  MOVLB  8
04D24:  SUBWF  x62,W
04D26:  MULLW  10
04D28:  MOVF   FF3,W
04D2A:  ADDWF  x61,W
04D2C:  MOVWF  00
04D2E:  BCF    FD8.0
04D30:  RLCF   00,F
04D32:  MOVF   00,W
04D34:  CLRF   03
04D36:  MOVWF  FE9
04D38:  MOVLW  07
04D3A:  ADDWF  03,W
04D3C:  MOVWF  FEA
04D3E:  MOVLW  0A
04D40:  SUBWF  FEF,W
04D42:  MOVWF  00
04D44:  MOVLW  00
04D46:  SUBWFB FEC,W
04D48:  MOVWF  03
04D4A:  MOVF   00,W
04D4C:  MOVF   FED,F
04D4E:  MOVWF  FEF
04D50:  MOVFF  03,FEC
....................                } 
....................                if(Horas1[l+((Prog-1)*Pasos)]<0) 
04D54:  MOVLW  01
04D56:  SUBWF  x62,W
04D58:  MULLW  10
04D5A:  MOVF   FF3,W
04D5C:  ADDWF  x61,W
04D5E:  MOVWF  00
04D60:  BCF    FD8.0
04D62:  RLCF   00,F
04D64:  MOVF   00,W
04D66:  CLRF   03
04D68:  MOVWF  FE9
04D6A:  MOVLW  07
04D6C:  ADDWF  03,W
04D6E:  MOVWF  FEA
04D70:  MOVFF  FEC,864
04D74:  MOVF   FED,F
04D76:  MOVFF  FEF,863
04D7A:  BTFSC  x64.7
04D7C:  BRA    4D80
04D7E:  BRA    4DA4
....................                   Horas1[l+((Prog-1)*Pasos)]=99; 
04D80:  MOVLW  01
04D82:  SUBWF  x62,W
04D84:  MULLW  10
04D86:  MOVF   FF3,W
04D88:  ADDWF  x61,W
04D8A:  MOVWF  00
04D8C:  BCF    FD8.0
04D8E:  RLCF   00,F
04D90:  MOVF   00,W
04D92:  CLRF   03
04D94:  MOVWF  FE9
04D96:  MOVLW  07
04D98:  ADDWF  03,W
04D9A:  MOVWF  FEA
04D9C:  CLRF   FEC
04D9E:  MOVF   FED,F
04DA0:  MOVLW  63
04DA2:  MOVWF  FEF
....................             } 
....................             else{ 
04DA4:  BRA    4DAE
....................                flagdn=0;tiempodn=0; 
04DA6:  MOVLB  5
04DA8:  BCF    x87.1
04DAA:  CLRF   x91
04DAC:  MOVLB  8
....................             } 
....................          } 
....................           
....................          if(Opcio==3){ 
04DAE:  MOVF   x60,W
04DB0:  SUBLW  03
04DB2:  BTFSS  FD8.2
04DB4:  BRA    50DA
....................             strcpy(Menus.Letra,"Temperatura:"); 
04DB6:  MOVLW  08
04DB8:  MOVWF  FEA
04DBA:  MOVLW  40
04DBC:  MOVWF  FE9
04DBE:  MOVFF  FF2,863
04DC2:  BCF    FF2.7
04DC4:  MOVLW  00
04DC6:  MOVLB  0
04DC8:  CALL   075E
04DCC:  TBLRD*-
04DCE:  TBLRD*+
04DD0:  MOVF   FF5,W
04DD2:  MOVWF  FEE
04DD4:  IORLW  00
04DD6:  BNZ   4DCE
04DD8:  MOVLB  8
04DDA:  BTFSC  x63.7
04DDC:  BSF    FF2.7
....................             displayTemps(Menus.Letra,Temperatura1[l+((Prog-1)*Pasos)],0,32,0,1); 
04DDE:  MOVLW  01
04DE0:  SUBWF  x62,W
04DE2:  MULLW  10
04DE4:  MOVF   FF3,W
04DE6:  ADDWF  x61,W
04DE8:  MOVWF  00
04DEA:  BCF    FD8.0
04DEC:  RLCF   00,F
04DEE:  MOVF   00,W
04DF0:  CLRF   03
04DF2:  ADDLW  60
04DF4:  MOVWF  FE9
04DF6:  MOVLW  06
04DF8:  ADDWFC 03,W
04DFA:  MOVWF  FEA
04DFC:  MOVFF  FEC,864
04E00:  MOVF   FED,F
04E02:  MOVFF  FEF,863
04E06:  MOVLW  08
04E08:  MOVWF  x66
04E0A:  MOVLW  40
04E0C:  MOVWF  x65
04E0E:  MOVFF  864,868
04E12:  MOVFF  863,867
04E16:  CLRF   x69
04E18:  MOVLW  20
04E1A:  MOVWF  x6A
04E1C:  CLRF   x6B
04E1E:  MOVLW  01
04E20:  MOVWF  x6C
04E22:  MOVLB  0
04E24:  CALL   4046
....................             strcpy(Menus.Letra,"Horas:"); 
04E28:  MOVLW  08
04E2A:  MOVWF  FEA
04E2C:  MOVLW  40
04E2E:  MOVWF  FE9
04E30:  MOVFF  FF2,863
04E34:  BCF    FF2.7
04E36:  MOVLW  00
04E38:  CALL   078A
04E3C:  TBLRD*-
04E3E:  TBLRD*+
04E40:  MOVF   FF5,W
04E42:  MOVWF  FEE
04E44:  IORLW  00
04E46:  BNZ   4E3E
04E48:  MOVLB  8
04E4A:  BTFSC  x63.7
04E4C:  BSF    FF2.7
....................             displayTemps(Menus.Letra,Horas1[l+((Prog-1)*Pasos)],0,44,10,1); 
04E4E:  MOVLW  01
04E50:  SUBWF  x62,W
04E52:  MULLW  10
04E54:  MOVF   FF3,W
04E56:  ADDWF  x61,W
04E58:  MOVWF  00
04E5A:  BCF    FD8.0
04E5C:  RLCF   00,F
04E5E:  MOVF   00,W
04E60:  CLRF   03
04E62:  MOVWF  FE9
04E64:  MOVLW  07
04E66:  ADDWF  03,W
04E68:  MOVWF  FEA
04E6A:  MOVFF  FEC,864
04E6E:  MOVF   FED,F
04E70:  MOVFF  FEF,863
04E74:  MOVLW  08
04E76:  MOVWF  x66
04E78:  MOVLW  40
04E7A:  MOVWF  x65
04E7C:  MOVFF  864,868
04E80:  MOVFF  863,867
04E84:  CLRF   x69
04E86:  MOVLW  2C
04E88:  MOVWF  x6A
04E8A:  MOVLW  0A
04E8C:  MOVWF  x6B
04E8E:  MOVLW  01
04E90:  MOVWF  x6C
04E92:  MOVLB  0
04E94:  CALL   4046
....................             strcpy(Menus.Letra,"Minutos:"); 
04E98:  MOVLW  08
04E9A:  MOVWF  FEA
04E9C:  MOVLW  40
04E9E:  MOVWF  FE9
04EA0:  MOVFF  FF2,863
04EA4:  BCF    FF2.7
04EA6:  MOVLW  00
04EA8:  CALL   07B0
04EAC:  TBLRD*-
04EAE:  TBLRD*+
04EB0:  MOVF   FF5,W
04EB2:  MOVWF  FEE
04EB4:  IORLW  00
04EB6:  BNZ   4EAE
04EB8:  MOVLB  8
04EBA:  BTFSC  x63.7
04EBC:  BSF    FF2.7
....................             displayTemps(Menus.Letra,Minutos1[l+((Prog-1)*Pasos)],0,55,11,1); 
04EBE:  MOVLW  01
04EC0:  SUBWF  x62,W
04EC2:  MULLW  10
04EC4:  MOVF   FF3,W
04EC6:  ADDWF  x61,W
04EC8:  MOVWF  00
04ECA:  BCF    FD8.0
04ECC:  RLCF   00,F
04ECE:  MOVF   00,W
04ED0:  CLRF   03
04ED2:  ADDLW  A0
04ED4:  MOVWF  FE9
04ED6:  MOVLW  07
04ED8:  ADDWFC 03,W
04EDA:  MOVWF  FEA
04EDC:  MOVFF  FEC,864
04EE0:  MOVF   FED,F
04EE2:  MOVFF  FEF,863
04EE6:  MOVLW  08
04EE8:  MOVWF  x66
04EEA:  MOVLW  40
04EEC:  MOVWF  x65
04EEE:  MOVFF  864,868
04EF2:  MOVFF  863,867
04EF6:  CLRF   x69
04EF8:  MOVLW  37
04EFA:  MOVWF  x6A
04EFC:  MOVLW  0B
04EFE:  MOVWF  x6B
04F00:  MOVLW  01
04F02:  MOVWF  x6C
04F04:  MOVLB  0
04F06:  CALL   4046
....................             if(UP)//Si oprime hacia arriba 
04F0A:  BSF    F92.5
04F0C:  BTFSC  F80.5
04F0E:  BRA    4FEC
....................             { 
....................                Buzz_on;delay_ms(10);Buzz_off; 
04F10:  BSF    F8B.4
04F12:  BCF    F94.4
04F14:  MOVLW  0A
04F16:  MOVLB  8
04F18:  MOVWF  x68
04F1A:  MOVLB  0
04F1C:  CALL   1390
04F20:  BCF    F8B.4
04F22:  BCF    F94.4
....................                if(tiempoup<4){ 
04F24:  MOVLB  5
04F26:  MOVF   x90,W
04F28:  SUBLW  03
04F2A:  BNC   4F5A
....................                   flagup=1; 
04F2C:  BSF    x87.0
....................                   Minutos1[l+((Prog-1)*Pasos)]++; 
04F2E:  MOVLW  01
04F30:  MOVLB  8
04F32:  SUBWF  x62,W
04F34:  MULLW  10
04F36:  MOVF   FF3,W
04F38:  ADDWF  x61,W
04F3A:  MOVWF  00
04F3C:  BCF    FD8.0
04F3E:  RLCF   00,F
04F40:  MOVF   00,W
04F42:  CLRF   03
04F44:  ADDLW  A0
04F46:  MOVWF  FE9
04F48:  MOVLW  07
04F4A:  ADDWFC 03,W
04F4C:  MOVWF  FEA
04F4E:  MOVLW  01
04F50:  ADDWF  FEE,F
04F52:  BNC   4F56
04F54:  INCF   FEF,F
....................                }   
....................                else{ 
04F56:  BRA    4F8E
04F58:  MOVLB  5
....................                   flagup=0; 
04F5A:  BCF    x87.0
....................                   Minutos1[l+((Prog-1)*Pasos)]+=10; 
04F5C:  MOVLW  01
04F5E:  MOVLB  8
04F60:  SUBWF  x62,W
04F62:  MULLW  10
04F64:  MOVF   FF3,W
04F66:  ADDWF  x61,W
04F68:  MOVWF  00
04F6A:  BCF    FD8.0
04F6C:  RLCF   00,F
04F6E:  MOVF   00,W
04F70:  CLRF   03
04F72:  ADDLW  A0
04F74:  MOVWF  FE9
04F76:  MOVLW  07
04F78:  ADDWFC 03,W
04F7A:  MOVWF  FEA
04F7C:  MOVLW  0A
04F7E:  ADDWF  FEF,W
04F80:  MOVWF  01
04F82:  MOVLW  00
04F84:  ADDWFC FEC,W
04F86:  MOVF   FED,F
04F88:  MOVFF  01,FEF
04F8C:  MOVWF  FEC
....................                } 
....................                if(Minutos1[l+((Prog-1)*Pasos)]>59) 
04F8E:  MOVLW  01
04F90:  SUBWF  x62,W
04F92:  MULLW  10
04F94:  MOVF   FF3,W
04F96:  ADDWF  x61,W
04F98:  MOVWF  00
04F9A:  BCF    FD8.0
04F9C:  RLCF   00,F
04F9E:  MOVF   00,W
04FA0:  CLRF   03
04FA2:  ADDLW  A0
04FA4:  MOVWF  FE9
04FA6:  MOVLW  07
04FA8:  ADDWFC 03,W
04FAA:  MOVWF  FEA
04FAC:  MOVFF  FEC,864
04FB0:  MOVF   FED,F
04FB2:  MOVFF  FEF,863
04FB6:  BTFSC  x64.7
04FB8:  BRA    4FE8
04FBA:  MOVF   x64,F
04FBC:  BNZ   4FC4
04FBE:  MOVF   x63,W
04FC0:  SUBLW  3B
04FC2:  BC    4FE8
....................                   Minutos1[l+((Prog-1)*Pasos)]=0; 
04FC4:  MOVLW  01
04FC6:  SUBWF  x62,W
04FC8:  MULLW  10
04FCA:  MOVF   FF3,W
04FCC:  ADDWF  x61,W
04FCE:  MOVWF  00
04FD0:  BCF    FD8.0
04FD2:  RLCF   00,F
04FD4:  MOVF   00,W
04FD6:  CLRF   03
04FD8:  ADDLW  A0
04FDA:  MOVWF  FE9
04FDC:  MOVLW  07
04FDE:  ADDWFC 03,W
04FE0:  MOVWF  FEA
04FE2:  CLRF   FEC
04FE4:  MOVF   FED,F
04FE6:  CLRF   FEF
....................             } 
....................             else{ 
04FE8:  BRA    4FF4
04FEA:  MOVLB  0
....................                flagup=0;tiempoup=0; 
04FEC:  MOVLB  5
04FEE:  BCF    x87.0
04FF0:  CLRF   x90
04FF2:  MOVLB  8
....................             } 
....................                       
....................             if(DOWN)//Si oprime hacia abajo 
04FF4:  BSF    F96.0
04FF6:  BTFSC  F84.0
04FF8:  BRA    50D2
....................             { 
....................                Buzz_on;delay_ms(10);Buzz_off; 
04FFA:  BSF    F8B.4
04FFC:  BCF    F94.4
04FFE:  MOVLW  0A
05000:  MOVWF  x68
05002:  MOVLB  0
05004:  CALL   1390
05008:  BCF    F8B.4
0500A:  BCF    F94.4
....................                if(tiempodn<4){ 
0500C:  MOVLB  5
0500E:  MOVF   x91,W
05010:  SUBLW  03
05012:  BNC   5044
....................                   flagdn=1; 
05014:  BSF    x87.1
....................                   Minutos1[l+((Prog-1)*Pasos)]--; 
05016:  MOVLW  01
05018:  MOVLB  8
0501A:  SUBWF  x62,W
0501C:  MULLW  10
0501E:  MOVF   FF3,W
05020:  ADDWF  x61,W
05022:  MOVWF  00
05024:  BCF    FD8.0
05026:  RLCF   00,F
05028:  MOVF   00,W
0502A:  CLRF   03
0502C:  ADDLW  A0
0502E:  MOVWF  FE9
05030:  MOVLW  07
05032:  ADDWFC 03,W
05034:  MOVWF  FEA
05036:  MOVLW  FF
05038:  ADDWF  FEF,F
0503A:  BC    5040
0503C:  MOVF   FEE,F
0503E:  DECF   FED,F
....................                } 
....................                else{ 
05040:  BRA    507C
05042:  MOVLB  5
....................                   flagdn=0; 
05044:  BCF    x87.1
....................                   Minutos1[l+((Prog-1)*Pasos)]-=10; 
05046:  MOVLW  01
05048:  MOVLB  8
0504A:  SUBWF  x62,W
0504C:  MULLW  10
0504E:  MOVF   FF3,W
05050:  ADDWF  x61,W
05052:  MOVWF  00
05054:  BCF    FD8.0
05056:  RLCF   00,F
05058:  MOVF   00,W
0505A:  CLRF   03
0505C:  ADDLW  A0
0505E:  MOVWF  FE9
05060:  MOVLW  07
05062:  ADDWFC 03,W
05064:  MOVWF  FEA
05066:  MOVLW  0A
05068:  SUBWF  FEF,W
0506A:  MOVWF  00
0506C:  MOVLW  00
0506E:  SUBWFB FEC,W
05070:  MOVWF  03
05072:  MOVF   00,W
05074:  MOVF   FED,F
05076:  MOVWF  FEF
05078:  MOVFF  03,FEC
....................                } 
....................                if(Minutos1[l+((Prog-1)*Pasos)]<0) 
0507C:  MOVLW  01
0507E:  SUBWF  x62,W
05080:  MULLW  10
05082:  MOVF   FF3,W
05084:  ADDWF  x61,W
05086:  MOVWF  00
05088:  BCF    FD8.0
0508A:  RLCF   00,F
0508C:  MOVF   00,W
0508E:  CLRF   03
05090:  ADDLW  A0
05092:  MOVWF  FE9
05094:  MOVLW  07
05096:  ADDWFC 03,W
05098:  MOVWF  FEA
0509A:  MOVFF  FEC,864
0509E:  MOVF   FED,F
050A0:  MOVFF  FEF,863
050A4:  BTFSC  x64.7
050A6:  BRA    50AA
050A8:  BRA    50D0
....................                   Minutos1[l+((Prog-1)*Pasos)]=59; 
050AA:  MOVLW  01
050AC:  SUBWF  x62,W
050AE:  MULLW  10
050B0:  MOVF   FF3,W
050B2:  ADDWF  x61,W
050B4:  MOVWF  00
050B6:  BCF    FD8.0
050B8:  RLCF   00,F
050BA:  MOVF   00,W
050BC:  CLRF   03
050BE:  ADDLW  A0
050C0:  MOVWF  FE9
050C2:  MOVLW  07
050C4:  ADDWFC 03,W
050C6:  MOVWF  FEA
050C8:  CLRF   FEC
050CA:  MOVF   FED,F
050CC:  MOVLW  3B
050CE:  MOVWF  FEF
....................             } 
....................             else{ 
050D0:  BRA    50DA
....................                flagdn=0;tiempodn=0; 
050D2:  MOVLB  5
050D4:  BCF    x87.1
050D6:  CLRF   x91
050D8:  MOVLB  8
....................             } 
....................          } 
.................... } 
050DA:  MOVLB  0
050DC:  GOTO   932E (RETURN)
....................  
.................... void ConfigInicial(){ 
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_1); 
*
013B8:  MOVLW  85
013BA:  MOVWF  FCD
....................    enable_interrupts(INT_TIMER1); 
013BC:  BSF    F9D.0
....................    setup_adc_ports(AN0_TO_AN2); 
013BE:  MOVF   FC1,W
013C0:  ANDLW  C0
013C2:  IORLW  0C
013C4:  MOVWF  FC1
....................    setup_adc(ADC_CLOCK_DIV_64); 
013C6:  MOVF   FC0,W
013C8:  ANDLW  C0
013CA:  IORLW  06
013CC:  MOVWF  FC0
013CE:  BSF    FC0.7
013D0:  BSF    FC2.0
....................    enable_interrupts(global); 
013D2:  MOVLW  C0
013D4:  IORWF  FF2,F
.................... } 
013D6:  GOTO   6D0E (RETURN)
....................  
.................... void LeeEEPROM(){  
....................    for(j=1;j<6;j++){ 
*
01DF6:  MOVLW  01
01DF8:  MOVLB  5
01DFA:  MOVWF  x9E
01DFC:  MOVF   x9E,W
01DFE:  SUBLW  05
01E00:  BTFSS  FD8.0
01E02:  BRA    21E0
....................       for(i=0;i<Pasos;i++){ 
01E04:  CLRF   x9D
01E06:  MOVF   x9D,W
01E08:  SUBLW  0F
01E0A:  BTFSS  FD8.0
01E0C:  BRA    21DC
....................          delay_ms(10);  
01E0E:  MOVLW  0A
01E10:  MOVLB  8
01E12:  MOVWF  x68
01E14:  MOVLB  0
01E16:  CALL   1390
....................          Temperatura1[i+((j-1)*Pasos)]=make16(read_eeprom((i*2)+1+((j-1)*(Pasos*4))),read_eeprom((i*2)+((j-1)*(Pasos*4)))); 
01E1A:  MOVLW  01
01E1C:  MOVLB  5
01E1E:  SUBWF  x9E,W
01E20:  MULLW  10
01E22:  MOVF   FF3,W
01E24:  ADDWF  x9D,W
01E26:  MOVWF  00
01E28:  BCF    FD8.0
01E2A:  RLCF   00,F
01E2C:  MOVF   00,W
01E2E:  CLRF   03
01E30:  ADDLW  60
01E32:  MOVWF  FE9
01E34:  MOVLW  06
01E36:  ADDWFC 03,W
01E38:  MOVWF  FEA
01E3A:  BCF    FD8.0
01E3C:  RLCF   x9D,W
01E3E:  ADDLW  01
01E40:  MOVLB  8
01E42:  MOVWF  x62
01E44:  MOVLW  01
01E46:  MOVLB  5
01E48:  SUBWF  x9E,W
01E4A:  MULLW  40
01E4C:  MOVF   FF3,W
01E4E:  MOVLB  8
01E50:  ADDWF  x62,F
01E52:  MOVFF  FF2,863
01E56:  BCF    FF2.7
01E58:  CLRF   FAA
01E5A:  MOVFF  862,FA9
01E5E:  BCF    FA6.6
01E60:  BCF    FA6.7
01E62:  BSF    FA6.0
01E64:  MOVF   FA8,W
01E66:  BTFSC  x63.7
01E68:  BSF    FF2.7
01E6A:  MOVWF  x62
01E6C:  BCF    FD8.0
01E6E:  MOVLB  5
01E70:  RLCF   x9D,W
01E72:  MOVLB  8
01E74:  MOVWF  x64
01E76:  MOVLW  01
01E78:  MOVLB  5
01E7A:  SUBWF  x9E,W
01E7C:  MULLW  40
01E7E:  MOVF   FF3,W
01E80:  MOVLB  8
01E82:  ADDWF  x64,F
01E84:  MOVFF  FF2,865
01E88:  BCF    FF2.7
01E8A:  CLRF   FAA
01E8C:  MOVFF  864,FA9
01E90:  BCF    FA6.6
01E92:  BCF    FA6.7
01E94:  BSF    FA6.0
01E96:  MOVF   FA8,W
01E98:  BTFSC  x65.7
01E9A:  BSF    FF2.7
01E9C:  MOVWF  x64
01E9E:  MOVFF  862,FEC
01EA2:  MOVF   FED,F
01EA4:  MOVFF  864,FEF
....................          if(Temperatura1[i+((j-1)*Pasos)]>1200 || Temperatura1[i+((j-1)*Pasos)]<0){ 
01EA8:  MOVLW  01
01EAA:  MOVLB  5
01EAC:  SUBWF  x9E,W
01EAE:  MULLW  10
01EB0:  MOVF   FF3,W
01EB2:  ADDWF  x9D,W
01EB4:  MOVWF  00
01EB6:  BCF    FD8.0
01EB8:  RLCF   00,F
01EBA:  MOVF   00,W
01EBC:  CLRF   03
01EBE:  ADDLW  60
01EC0:  MOVWF  FE9
01EC2:  MOVLW  06
01EC4:  ADDWFC 03,W
01EC6:  MOVWF  FEA
01EC8:  MOVFF  FEC,861
01ECC:  MOVF   FED,F
01ECE:  MOVFF  FEF,860
01ED2:  MOVLB  8
01ED4:  BTFSC  x61.7
01ED6:  BRA    1EE8
01ED8:  MOVF   x61,W
01EDA:  SUBLW  03
01EDC:  BC    1EE8
01EDE:  XORLW  FF
01EE0:  BNZ   1F18
01EE2:  MOVF   x60,W
01EE4:  SUBLW  B0
01EE6:  BNC   1F18
01EE8:  MOVLW  01
01EEA:  MOVLB  5
01EEC:  SUBWF  x9E,W
01EEE:  MULLW  10
01EF0:  MOVF   FF3,W
01EF2:  ADDWF  x9D,W
01EF4:  MOVWF  00
01EF6:  BCF    FD8.0
01EF8:  RLCF   00,F
01EFA:  MOVF   00,W
01EFC:  CLRF   03
01EFE:  ADDLW  60
01F00:  MOVWF  FE9
01F02:  MOVLW  06
01F04:  ADDWFC 03,W
01F06:  MOVWF  FEA
01F08:  MOVFF  FEC,861
01F0C:  MOVF   FED,F
01F0E:  MOVFF  FEF,860
01F12:  MOVLB  8
01F14:  BTFSS  x61.7
01F16:  BRA    1FDC
....................             Temperatura1[i+((j-1)*Pasos)]=0; 
01F18:  MOVLW  01
01F1A:  MOVLB  5
01F1C:  SUBWF  x9E,W
01F1E:  MULLW  10
01F20:  MOVF   FF3,W
01F22:  ADDWF  x9D,W
01F24:  MOVWF  00
01F26:  BCF    FD8.0
01F28:  RLCF   00,F
01F2A:  MOVF   00,W
01F2C:  CLRF   03
01F2E:  ADDLW  60
01F30:  MOVWF  FE9
01F32:  MOVLW  06
01F34:  ADDWFC 03,W
01F36:  MOVWF  FEA
01F38:  CLRF   FEC
01F3A:  MOVF   FED,F
01F3C:  CLRF   FEF
....................             write_eeprom((i*2)+1+((j-1)*(Pasos*4)),0); 
01F3E:  BCF    FD8.0
01F40:  RLCF   x9D,W
01F42:  ADDLW  01
01F44:  MOVLB  8
01F46:  MOVWF  x60
01F48:  MOVLW  01
01F4A:  MOVLB  5
01F4C:  SUBWF  x9E,W
01F4E:  MULLW  40
01F50:  MOVF   FF3,W
01F52:  MOVLB  8
01F54:  ADDWF  x60,F
01F56:  CLRF   FAA
01F58:  MOVFF  860,FA9
01F5C:  CLRF   FA8
01F5E:  BCF    FA6.6
01F60:  BCF    FA6.7
01F62:  BSF    FA6.2
01F64:  MOVF   FF2,W
01F66:  MOVWF  00
01F68:  BCF    FF2.7
01F6A:  MOVLB  F
01F6C:  MOVLW  55
01F6E:  MOVWF  FA7
01F70:  MOVLW  AA
01F72:  MOVWF  FA7
01F74:  BSF    FA6.1
01F76:  BTFSC  FA6.1
01F78:  BRA    1F76
01F7A:  BCF    FA6.2
01F7C:  MOVF   00,W
01F7E:  IORWF  FF2,F
....................             delay_ms(20); 
01F80:  MOVLW  14
01F82:  MOVLB  8
01F84:  MOVWF  x68
01F86:  MOVLB  0
01F88:  CALL   1390
....................             write_eeprom((i*2)+((j-1)*(Pasos*4)),0); 
01F8C:  BCF    FD8.0
01F8E:  MOVLB  5
01F90:  RLCF   x9D,W
01F92:  MOVLB  8
01F94:  MOVWF  x60
01F96:  MOVLW  01
01F98:  MOVLB  5
01F9A:  SUBWF  x9E,W
01F9C:  MULLW  40
01F9E:  MOVF   FF3,W
01FA0:  MOVLB  8
01FA2:  ADDWF  x60,F
01FA4:  CLRF   FAA
01FA6:  MOVFF  860,FA9
01FAA:  CLRF   FA8
01FAC:  BCF    FA6.6
01FAE:  BCF    FA6.7
01FB0:  BSF    FA6.2
01FB2:  MOVF   FF2,W
01FB4:  MOVWF  00
01FB6:  BCF    FF2.7
01FB8:  MOVLB  F
01FBA:  MOVLW  55
01FBC:  MOVWF  FA7
01FBE:  MOVLW  AA
01FC0:  MOVWF  FA7
01FC2:  BSF    FA6.1
01FC4:  BTFSC  FA6.1
01FC6:  BRA    1FC4
01FC8:  BCF    FA6.2
01FCA:  MOVF   00,W
01FCC:  IORWF  FF2,F
....................             delay_ms(20); 
01FCE:  MOVLW  14
01FD0:  MOVLB  8
01FD2:  MOVWF  x68
01FD4:  MOVLB  0
01FD6:  CALL   1390
01FDA:  MOVLB  8
....................          } 
....................          delay_ms(10); 
01FDC:  MOVLW  0A
01FDE:  MOVWF  x68
01FE0:  MOVLB  0
01FE2:  CALL   1390
....................          Horas1[i+((j-1)*Pasos)]=read_eeprom(i+(((Pasos*4)*j)-(Pasos*2)));      
01FE6:  MOVLW  01
01FE8:  MOVLB  5
01FEA:  SUBWF  x9E,W
01FEC:  MULLW  10
01FEE:  MOVF   FF3,W
01FF0:  ADDWF  x9D,W
01FF2:  MOVWF  00
01FF4:  BCF    FD8.0
01FF6:  RLCF   00,F
01FF8:  MOVF   00,W
01FFA:  CLRF   03
01FFC:  MOVWF  FE9
01FFE:  MOVLW  07
02000:  ADDWF  03,W
02002:  MOVWF  FEA
02004:  MOVF   x9E,W
02006:  MULLW  40
02008:  MOVF   FF3,W
0200A:  ADDLW  E0
0200C:  ADDWF  x9D,W
0200E:  MOVLB  8
02010:  MOVWF  x62
02012:  MOVFF  FF2,863
02016:  BCF    FF2.7
02018:  CLRF   FAA
0201A:  MOVFF  862,FA9
0201E:  BCF    FA6.6
02020:  BCF    FA6.7
02022:  BSF    FA6.0
02024:  MOVF   FA8,W
02026:  BTFSC  x63.7
02028:  BSF    FF2.7
0202A:  CLRF   03
0202C:  MOVWF  FEF
0202E:  MOVFF  03,FEC
02032:  MOVF   FED,F
....................          if(Horas1[i+((j-1)*Pasos)]>99){ 
02034:  MOVLW  01
02036:  MOVLB  5
02038:  SUBWF  x9E,W
0203A:  MULLW  10
0203C:  MOVF   FF3,W
0203E:  ADDWF  x9D,W
02040:  MOVWF  00
02042:  BCF    FD8.0
02044:  RLCF   00,F
02046:  MOVF   00,W
02048:  CLRF   03
0204A:  MOVWF  FE9
0204C:  MOVLW  07
0204E:  ADDWF  03,W
02050:  MOVWF  FEA
02052:  MOVFF  FEC,861
02056:  MOVF   FED,F
02058:  MOVFF  FEF,860
0205C:  MOVLB  8
0205E:  BTFSC  x61.7
02060:  BRA    20D6
02062:  MOVF   x61,F
02064:  BNZ   206C
02066:  MOVF   x60,W
02068:  SUBLW  63
0206A:  BC    20D6
....................             Horas1[i+((j-1)*Pasos)]=0; 
0206C:  MOVLW  01
0206E:  MOVLB  5
02070:  SUBWF  x9E,W
02072:  MULLW  10
02074:  MOVF   FF3,W
02076:  ADDWF  x9D,W
02078:  MOVWF  00
0207A:  BCF    FD8.0
0207C:  RLCF   00,F
0207E:  MOVF   00,W
02080:  CLRF   03
02082:  MOVWF  FE9
02084:  MOVLW  07
02086:  ADDWF  03,W
02088:  MOVWF  FEA
0208A:  CLRF   FEC
0208C:  MOVF   FED,F
0208E:  CLRF   FEF
....................             write_eeprom(i+(((Pasos*4)*j)-(Pasos*2)),0); 
02090:  MOVF   x9E,W
02092:  MULLW  40
02094:  MOVF   FF3,W
02096:  ADDLW  E0
02098:  ADDWF  x9D,W
0209A:  MOVLB  8
0209C:  MOVWF  x60
0209E:  CLRF   FAA
020A0:  MOVFF  860,FA9
020A4:  CLRF   FA8
020A6:  BCF    FA6.6
020A8:  BCF    FA6.7
020AA:  BSF    FA6.2
020AC:  MOVF   FF2,W
020AE:  MOVWF  00
020B0:  BCF    FF2.7
020B2:  MOVLB  F
020B4:  MOVLW  55
020B6:  MOVWF  FA7
020B8:  MOVLW  AA
020BA:  MOVWF  FA7
020BC:  BSF    FA6.1
020BE:  BTFSC  FA6.1
020C0:  BRA    20BE
020C2:  BCF    FA6.2
020C4:  MOVF   00,W
020C6:  IORWF  FF2,F
....................             delay_ms(20); 
020C8:  MOVLW  14
020CA:  MOVLB  8
020CC:  MOVWF  x68
020CE:  MOVLB  0
020D0:  CALL   1390
020D4:  MOVLB  8
....................          } 
....................          delay_ms(10);     
020D6:  MOVLW  0A
020D8:  MOVWF  x68
020DA:  MOVLB  0
020DC:  CALL   1390
....................          Minutos1[i+((j-1)*Pasos)]=read_eeprom(i+(((Pasos*4)*j)-Pasos)); 
020E0:  MOVLW  01
020E2:  MOVLB  5
020E4:  SUBWF  x9E,W
020E6:  MULLW  10
020E8:  MOVF   FF3,W
020EA:  ADDWF  x9D,W
020EC:  MOVWF  00
020EE:  BCF    FD8.0
020F0:  RLCF   00,F
020F2:  MOVF   00,W
020F4:  CLRF   03
020F6:  ADDLW  A0
020F8:  MOVWF  FE9
020FA:  MOVLW  07
020FC:  ADDWFC 03,W
020FE:  MOVWF  FEA
02100:  MOVF   x9E,W
02102:  MULLW  40
02104:  MOVF   FF3,W
02106:  ADDLW  F0
02108:  ADDWF  x9D,W
0210A:  MOVLB  8
0210C:  MOVWF  x62
0210E:  MOVFF  FF2,863
02112:  BCF    FF2.7
02114:  CLRF   FAA
02116:  MOVFF  862,FA9
0211A:  BCF    FA6.6
0211C:  BCF    FA6.7
0211E:  BSF    FA6.0
02120:  MOVF   FA8,W
02122:  BTFSC  x63.7
02124:  BSF    FF2.7
02126:  CLRF   03
02128:  MOVWF  FEF
0212A:  MOVFF  03,FEC
0212E:  MOVF   FED,F
....................          if(Minutos1[i+((j-1)*Pasos)]>59){ 
02130:  MOVLW  01
02132:  MOVLB  5
02134:  SUBWF  x9E,W
02136:  MULLW  10
02138:  MOVF   FF3,W
0213A:  ADDWF  x9D,W
0213C:  MOVWF  00
0213E:  BCF    FD8.0
02140:  RLCF   00,F
02142:  MOVF   00,W
02144:  CLRF   03
02146:  ADDLW  A0
02148:  MOVWF  FE9
0214A:  MOVLW  07
0214C:  ADDWFC 03,W
0214E:  MOVWF  FEA
02150:  MOVFF  FEC,861
02154:  MOVF   FED,F
02156:  MOVFF  FEF,860
0215A:  MOVLB  8
0215C:  BTFSC  x61.7
0215E:  BRA    21D6
02160:  MOVF   x61,F
02162:  BNZ   216A
02164:  MOVF   x60,W
02166:  SUBLW  3B
02168:  BC    21D6
....................             Minutos1[i+((j-1)*Pasos)]=0; 
0216A:  MOVLW  01
0216C:  MOVLB  5
0216E:  SUBWF  x9E,W
02170:  MULLW  10
02172:  MOVF   FF3,W
02174:  ADDWF  x9D,W
02176:  MOVWF  00
02178:  BCF    FD8.0
0217A:  RLCF   00,F
0217C:  MOVF   00,W
0217E:  CLRF   03
02180:  ADDLW  A0
02182:  MOVWF  FE9
02184:  MOVLW  07
02186:  ADDWFC 03,W
02188:  MOVWF  FEA
0218A:  CLRF   FEC
0218C:  MOVF   FED,F
0218E:  CLRF   FEF
....................             write_eeprom(i+(((Pasos*4)*j)-Pasos),0); 
02190:  MOVF   x9E,W
02192:  MULLW  40
02194:  MOVF   FF3,W
02196:  ADDLW  F0
02198:  ADDWF  x9D,W
0219A:  MOVLB  8
0219C:  MOVWF  x60
0219E:  CLRF   FAA
021A0:  MOVFF  860,FA9
021A4:  CLRF   FA8
021A6:  BCF    FA6.6
021A8:  BCF    FA6.7
021AA:  BSF    FA6.2
021AC:  MOVF   FF2,W
021AE:  MOVWF  00
021B0:  BCF    FF2.7
021B2:  MOVLB  F
021B4:  MOVLW  55
021B6:  MOVWF  FA7
021B8:  MOVLW  AA
021BA:  MOVWF  FA7
021BC:  BSF    FA6.1
021BE:  BTFSC  FA6.1
021C0:  BRA    21BE
021C2:  BCF    FA6.2
021C4:  MOVF   00,W
021C6:  IORWF  FF2,F
....................             delay_ms(20); 
021C8:  MOVLW  14
021CA:  MOVLB  8
021CC:  MOVWF  x68
021CE:  MOVLB  0
021D0:  CALL   1390
021D4:  MOVLB  8
....................          } 
....................           
....................       } 
021D6:  MOVLB  5
021D8:  INCF   x9D,F
021DA:  BRA    1E06
....................    } 
021DC:  INCF   x9E,F
021DE:  BRA    1DFC
....................     
....................    delay_ms(50);    
021E0:  MOVLW  32
021E2:  MOVLB  8
021E4:  MOVWF  x68
021E6:  MOVLB  0
021E8:  CALL   1390
....................    Ganancia=read_eeprom(450); 
021EC:  MOVFF  FF2,860
021F0:  BCF    FF2.7
021F2:  MOVLW  01
021F4:  MOVWF  FAA
021F6:  MOVLW  C2
021F8:  MOVWF  FA9
021FA:  BCF    FA6.6
021FC:  BCF    FA6.7
021FE:  BSF    FA6.0
02200:  MOVF   FA8,W
02202:  MOVLB  8
02204:  BTFSC  x60.7
02206:  BSF    FF2.7
02208:  CLRF   x67
0220A:  MOVWF  x66
0220C:  MOVLB  0
0220E:  RCALL  1D46
02210:  MOVFF  03,613
02214:  MOVFF  02,612
02218:  MOVFF  01,611
0221C:  MOVFF  00,610
....................    delay_ms(50);    
02220:  MOVLW  32
02222:  MOVLB  8
02224:  MOVWF  x68
02226:  MOVLB  0
02228:  CALL   1390
....................    if(Ganancia>10){ 
0222C:  MOVLB  8
0222E:  CLRF   x63
02230:  CLRF   x62
02232:  MOVLW  20
02234:  MOVWF  x61
02236:  MOVLW  82
02238:  MOVWF  x60
0223A:  MOVFF  613,867
0223E:  MOVFF  612,866
02242:  MOVFF  611,865
02246:  MOVFF  610,864
0224A:  MOVLB  0
0224C:  RCALL  1D7C
0224E:  BNC   2298
....................       Ganancia=3; 
02250:  MOVLB  6
02252:  CLRF   x13
02254:  CLRF   x12
02256:  MOVLW  40
02258:  MOVWF  x11
0225A:  MOVLW  80
0225C:  MOVWF  x10
....................       write_eeprom(450,3); 
0225E:  MOVLW  01
02260:  MOVWF  FAA
02262:  MOVLW  C2
02264:  MOVWF  FA9
02266:  MOVLW  03
02268:  MOVWF  FA8
0226A:  BCF    FA6.6
0226C:  BCF    FA6.7
0226E:  BSF    FA6.2
02270:  MOVF   FF2,W
02272:  MOVWF  00
02274:  BCF    FF2.7
02276:  MOVLB  F
02278:  MOVLW  55
0227A:  MOVWF  FA7
0227C:  MOVLW  AA
0227E:  MOVWF  FA7
02280:  BSF    FA6.1
02282:  BTFSC  FA6.1
02284:  BRA    2282
02286:  BCF    FA6.2
02288:  MOVF   00,W
0228A:  IORWF  FF2,F
....................       delay_ms(20); 
0228C:  MOVLW  14
0228E:  MOVLB  8
02290:  MOVWF  x68
02292:  MOVLB  0
02294:  CALL   1390
....................    } 
....................    GananciaIn=Ganancia; 
02298:  MOVFF  613,60F
0229C:  MOVFF  612,60E
022A0:  MOVFF  611,60D
022A4:  MOVFF  610,60C
....................    Tciclo=read_eeprom(451); 
022A8:  MOVFF  FF2,860
022AC:  BCF    FF2.7
022AE:  MOVLW  01
022B0:  MOVWF  FAA
022B2:  MOVLW  C3
022B4:  MOVWF  FA9
022B6:  BCF    FA6.6
022B8:  BCF    FA6.7
022BA:  BSF    FA6.0
022BC:  MOVF   FA8,W
022BE:  MOVLB  8
022C0:  BTFSC  x60.7
022C2:  BSF    FF2.7
022C4:  CLRF   x67
022C6:  MOVWF  x66
022C8:  MOVLB  0
022CA:  RCALL  1D46
022CC:  MOVFF  03,5F7
022D0:  MOVFF  02,5F6
022D4:  MOVFF  01,5F5
022D8:  MOVFF  00,5F4
....................    delay_ms(50);    
022DC:  MOVLW  32
022DE:  MOVLB  8
022E0:  MOVWF  x68
022E2:  MOVLB  0
022E4:  CALL   1390
....................    if(Tciclo>10){ 
022E8:  MOVLB  8
022EA:  CLRF   x63
022EC:  CLRF   x62
022EE:  MOVLW  20
022F0:  MOVWF  x61
022F2:  MOVLW  82
022F4:  MOVWF  x60
022F6:  MOVFF  5F7,867
022FA:  MOVFF  5F6,866
022FE:  MOVFF  5F5,865
02302:  MOVFF  5F4,864
02306:  MOVLB  0
02308:  RCALL  1D7C
0230A:  BNC   2354
....................       Tciclo=10; 
0230C:  MOVLB  5
0230E:  CLRF   xF7
02310:  CLRF   xF6
02312:  MOVLW  20
02314:  MOVWF  xF5
02316:  MOVLW  82
02318:  MOVWF  xF4
....................       write_eeprom(451,10); 
0231A:  MOVLW  01
0231C:  MOVWF  FAA
0231E:  MOVLW  C3
02320:  MOVWF  FA9
02322:  MOVLW  0A
02324:  MOVWF  FA8
02326:  BCF    FA6.6
02328:  BCF    FA6.7
0232A:  BSF    FA6.2
0232C:  MOVF   FF2,W
0232E:  MOVWF  00
02330:  BCF    FF2.7
02332:  MOVLB  F
02334:  MOVLW  55
02336:  MOVWF  FA7
02338:  MOVLW  AA
0233A:  MOVWF  FA7
0233C:  BSF    FA6.1
0233E:  BTFSC  FA6.1
02340:  BRA    233E
02342:  BCF    FA6.2
02344:  MOVF   00,W
02346:  IORWF  FF2,F
....................       delay_ms(20); 
02348:  MOVLW  14
0234A:  MOVLB  8
0234C:  MOVWF  x68
0234E:  MOVLB  0
02350:  CALL   1390
....................    } 
....................    Ajuste=read_eeprom(452); 
02354:  MOVFF  FF2,860
02358:  BCF    FF2.7
0235A:  MOVLW  01
0235C:  MOVWF  FAA
0235E:  MOVLW  C4
02360:  MOVWF  FA9
02362:  BCF    FA6.6
02364:  BCF    FA6.7
02366:  BSF    FA6.0
02368:  MOVF   FA8,W
0236A:  MOVLB  8
0236C:  BTFSC  x60.7
0236E:  BSF    FF2.7
02370:  MOVLB  5
02372:  MOVWF  x8A
....................    delay_ms(50); 
02374:  MOVLW  32
02376:  MOVLB  8
02378:  MOVWF  x68
0237A:  MOVLB  0
0237C:  CALL   1390
....................    if(Ajuste>10){ 
02380:  MOVLB  5
02382:  MOVF   x8A,W
02384:  SUBLW  0A
02386:  BC    23C4
....................       Ajuste=0; 
02388:  CLRF   x8A
....................       write_eeprom(452,0); 
0238A:  MOVLW  01
0238C:  MOVWF  FAA
0238E:  MOVLW  C4
02390:  MOVWF  FA9
02392:  CLRF   FA8
02394:  BCF    FA6.6
02396:  BCF    FA6.7
02398:  BSF    FA6.2
0239A:  MOVF   FF2,W
0239C:  MOVWF  00
0239E:  BCF    FF2.7
023A0:  MOVLB  F
023A2:  MOVLW  55
023A4:  MOVWF  FA7
023A6:  MOVLW  AA
023A8:  MOVWF  FA7
023AA:  BSF    FA6.1
023AC:  BTFSC  FA6.1
023AE:  BRA    23AC
023B0:  BCF    FA6.2
023B2:  MOVF   00,W
023B4:  IORWF  FF2,F
....................       delay_ms(20); 
023B6:  MOVLW  14
023B8:  MOVLB  8
023BA:  MOVWF  x68
023BC:  MOVLB  0
023BE:  CALL   1390
023C2:  MOVLB  5
....................    } 
....................    Ajusten=read_eeprom(453); 
023C4:  MOVFF  FF2,860
023C8:  BCF    FF2.7
023CA:  MOVLW  01
023CC:  MOVWF  FAA
023CE:  MOVLW  C5
023D0:  MOVWF  FA9
023D2:  BCF    FA6.6
023D4:  BCF    FA6.7
023D6:  BSF    FA6.0
023D8:  MOVF   FA8,W
023DA:  MOVLB  8
023DC:  BTFSC  x60.7
023DE:  BSF    FF2.7
023E0:  MOVLB  5
023E2:  MOVWF  x8B
....................    delay_ms(50); 
023E4:  MOVLW  32
023E6:  MOVLB  8
023E8:  MOVWF  x68
023EA:  MOVLB  0
023EC:  CALL   1390
....................    if(Ajusten>10){ 
023F0:  MOVLB  5
023F2:  MOVF   x8B,W
023F4:  SUBLW  0A
023F6:  BC    2434
....................       Ajusten=0; 
023F8:  CLRF   x8B
....................       write_eeprom(453,0); 
023FA:  MOVLW  01
023FC:  MOVWF  FAA
023FE:  MOVLW  C5
02400:  MOVWF  FA9
02402:  CLRF   FA8
02404:  BCF    FA6.6
02406:  BCF    FA6.7
02408:  BSF    FA6.2
0240A:  MOVF   FF2,W
0240C:  MOVWF  00
0240E:  BCF    FF2.7
02410:  MOVLB  F
02412:  MOVLW  55
02414:  MOVWF  FA7
02416:  MOVLW  AA
02418:  MOVWF  FA7
0241A:  BSF    FA6.1
0241C:  BTFSC  FA6.1
0241E:  BRA    241C
02420:  BCF    FA6.2
02422:  MOVF   00,W
02424:  IORWF  FF2,F
....................       delay_ms(20); 
02426:  MOVLW  14
02428:  MOVLB  8
0242A:  MOVWF  x68
0242C:  MOVLB  0
0242E:  CALL   1390
02432:  MOVLB  5
....................    } 
....................    MediaMovil=read_eeprom(454); 
02434:  MOVFF  FF2,860
02438:  BCF    FF2.7
0243A:  MOVLW  01
0243C:  MOVWF  FAA
0243E:  MOVLW  C6
02440:  MOVWF  FA9
02442:  BCF    FA6.6
02444:  BCF    FA6.7
02446:  BSF    FA6.0
02448:  MOVF   FA8,W
0244A:  MOVLB  8
0244C:  BTFSC  x60.7
0244E:  BSF    FF2.7
02450:  MOVLB  5
02452:  MOVWF  x8C
....................    delay_ms(50);    
02454:  MOVLW  32
02456:  MOVLB  8
02458:  MOVWF  x68
0245A:  MOVLB  0
0245C:  CALL   1390
....................    if(MediaMovil>40){ 
02460:  MOVLB  5
02462:  MOVF   x8C,W
02464:  SUBLW  28
02466:  BC    24A8
....................       MediaMovil=20; 
02468:  MOVLW  14
0246A:  MOVWF  x8C
....................       write_eeprom(454,20); 
0246C:  MOVLW  01
0246E:  MOVWF  FAA
02470:  MOVLW  C6
02472:  MOVWF  FA9
02474:  MOVLW  14
02476:  MOVWF  FA8
02478:  BCF    FA6.6
0247A:  BCF    FA6.7
0247C:  BSF    FA6.2
0247E:  MOVF   FF2,W
02480:  MOVWF  00
02482:  BCF    FF2.7
02484:  MOVLB  F
02486:  MOVLW  55
02488:  MOVWF  FA7
0248A:  MOVLW  AA
0248C:  MOVWF  FA7
0248E:  BSF    FA6.1
02490:  BTFSC  FA6.1
02492:  BRA    2490
02494:  BCF    FA6.2
02496:  MOVF   00,W
02498:  IORWF  FF2,F
....................       delay_ms(20); 
0249A:  MOVLW  14
0249C:  MOVLB  8
0249E:  MOVWF  x68
024A0:  MOVLB  0
024A2:  CALL   1390
024A6:  MOVLB  5
....................    } 
....................    Coeficiente=read_eeprom(455); 
024A8:  MOVFF  FF2,860
024AC:  BCF    FF2.7
024AE:  MOVLW  01
024B0:  MOVWF  FAA
024B2:  MOVLW  C7
024B4:  MOVWF  FA9
024B6:  BCF    FA6.6
024B8:  BCF    FA6.7
024BA:  BSF    FA6.0
024BC:  MOVF   FA8,W
024BE:  MOVLB  8
024C0:  BTFSC  x60.7
024C2:  BSF    FF2.7
024C4:  CLRF   x67
024C6:  MOVWF  x66
024C8:  MOVLB  0
024CA:  RCALL  1D46
024CC:  MOVFF  03,61B
024D0:  MOVFF  02,61A
024D4:  MOVFF  01,619
024D8:  MOVFF  00,618
....................    delay_ms(50);    
024DC:  MOVLW  32
024DE:  MOVLB  8
024E0:  MOVWF  x68
024E2:  MOVLB  0
024E4:  CALL   1390
....................    resistencia=read_eeprom(457); 
024E8:  MOVFF  FF2,860
024EC:  BCF    FF2.7
024EE:  MOVLW  01
024F0:  MOVWF  FAA
024F2:  MOVLW  C9
024F4:  MOVWF  FA9
024F6:  BCF    FA6.6
024F8:  BCF    FA6.7
024FA:  BSF    FA6.0
024FC:  MOVF   FA8,W
024FE:  MOVLB  8
02500:  BTFSC  x60.7
02502:  BSF    FF2.7
02504:  CLRF   x67
02506:  MOVWF  x66
02508:  MOVLB  0
0250A:  RCALL  1D46
0250C:  MOVFF  03,61F
02510:  MOVFF  02,61E
02514:  MOVFF  01,61D
02518:  MOVFF  00,61C
....................    delay_ms(50);  
0251C:  MOVLW  32
0251E:  MOVLB  8
02520:  MOVWF  x68
02522:  MOVLB  0
02524:  CALL   1390
....................    if(resistencia>250){ 
02528:  MOVLB  8
0252A:  CLRF   x63
0252C:  CLRF   x62
0252E:  MOVLW  7A
02530:  MOVWF  x61
02532:  MOVLW  86
02534:  MOVWF  x60
02536:  MOVFF  61F,867
0253A:  MOVFF  61E,866
0253E:  MOVFF  61D,865
02542:  MOVFF  61C,864
02546:  MOVLB  0
02548:  RCALL  1D7C
0254A:  BNC   2594
....................       resistencia=238; 
0254C:  MOVLB  6
0254E:  CLRF   x1F
02550:  CLRF   x1E
02552:  MOVLW  6E
02554:  MOVWF  x1D
02556:  MOVLW  86
02558:  MOVWF  x1C
....................       write_eeprom(457,240); 
0255A:  MOVLW  01
0255C:  MOVWF  FAA
0255E:  MOVLW  C9
02560:  MOVWF  FA9
02562:  MOVLW  F0
02564:  MOVWF  FA8
02566:  BCF    FA6.6
02568:  BCF    FA6.7
0256A:  BSF    FA6.2
0256C:  MOVF   FF2,W
0256E:  MOVWF  00
02570:  BCF    FF2.7
02572:  MOVLB  F
02574:  MOVLW  55
02576:  MOVWF  FA7
02578:  MOVLW  AA
0257A:  MOVWF  FA7
0257C:  BSF    FA6.1
0257E:  BTFSC  FA6.1
02580:  BRA    257E
02582:  BCF    FA6.2
02584:  MOVF   00,W
02586:  IORWF  FF2,F
....................       delay_ms(20); 
02588:  MOVLW  14
0258A:  MOVLB  8
0258C:  MOVWF  x68
0258E:  MOVLB  0
02590:  CALL   1390
....................    } 
....................    penMufla=read_eeprom(458); 
02594:  MOVFF  FF2,860
02598:  BCF    FF2.7
0259A:  MOVLW  01
0259C:  MOVWF  FAA
0259E:  MOVLW  CA
025A0:  MOVWF  FA9
025A2:  BCF    FA6.6
025A4:  BCF    FA6.7
025A6:  BSF    FA6.0
025A8:  MOVF   FA8,W
025AA:  MOVLB  8
025AC:  BTFSC  x60.7
025AE:  BSF    FF2.7
025B0:  CLRF   x67
025B2:  MOVWF  x66
025B4:  MOVLB  0
025B6:  CALL   1D46
025BA:  MOVFF  03,657
025BE:  MOVFF  02,656
025C2:  MOVFF  01,655
025C6:  MOVFF  00,654
....................    delay_ms(50);  
025CA:  MOVLW  32
025CC:  MOVLB  8
025CE:  MOVWF  x68
025D0:  MOVLB  0
025D2:  CALL   1390
....................    if(penMufla>70){ 
025D6:  MOVLB  8
025D8:  CLRF   x63
025DA:  CLRF   x62
025DC:  MOVLW  0C
025DE:  MOVWF  x61
025E0:  MOVLW  85
025E2:  MOVWF  x60
025E4:  MOVFF  657,867
025E8:  MOVFF  656,866
025EC:  MOVFF  655,865
025F0:  MOVFF  654,864
025F4:  MOVLB  0
025F6:  CALL   1D7C
025FA:  BNC   2644
....................       penMufla=50; 
025FC:  MOVLB  6
025FE:  CLRF   x57
02600:  CLRF   x56
02602:  MOVLW  48
02604:  MOVWF  x55
02606:  MOVLW  84
02608:  MOVWF  x54
....................       write_eeprom(458,100); 
0260A:  MOVLW  01
0260C:  MOVWF  FAA
0260E:  MOVLW  CA
02610:  MOVWF  FA9
02612:  MOVLW  64
02614:  MOVWF  FA8
02616:  BCF    FA6.6
02618:  BCF    FA6.7
0261A:  BSF    FA6.2
0261C:  MOVF   FF2,W
0261E:  MOVWF  00
02620:  BCF    FF2.7
02622:  MOVLB  F
02624:  MOVLW  55
02626:  MOVWF  FA7
02628:  MOVLW  AA
0262A:  MOVWF  FA7
0262C:  BSF    FA6.1
0262E:  BTFSC  FA6.1
02630:  BRA    262E
02632:  BCF    FA6.2
02634:  MOVF   00,W
02636:  IORWF  FF2,F
....................       delay_ms(20); 
02638:  MOVLW  14
0263A:  MOVLB  8
0263C:  MOVWF  x68
0263E:  MOVLB  0
02640:  CALL   1390
....................    } 
....................     
....................    Password[0]=read_eeprom(460); 
02644:  MOVFF  FF2,860
02648:  BCF    FF2.7
0264A:  MOVLW  01
0264C:  MOVWF  FAA
0264E:  MOVLW  CC
02650:  MOVWF  FA9
02652:  BCF    FA6.6
02654:  BCF    FA6.7
02656:  BSF    FA6.0
02658:  MOVF   FA8,W
0265A:  MOVLB  8
0265C:  BTFSC  x60.7
0265E:  BSF    FF2.7
02660:  MOVLB  5
02662:  MOVWF  xEC
....................    delay_ms(50);    
02664:  MOVLW  32
02666:  MOVLB  8
02668:  MOVWF  x68
0266A:  MOVLB  0
0266C:  CALL   1390
....................    if(Password[0]>9 || Password[0]<0){ 
02670:  MOVLB  5
02672:  BTFSC  xEC.7
02674:  BRA    267C
02676:  MOVF   xEC,W
02678:  SUBLW  09
0267A:  BNC   2682
0267C:  BTFSC  xEC.7
0267E:  BRA    2682
02680:  BRA    26BE
....................       Password[0]=0; 
02682:  CLRF   xEC
....................       write_eeprom(460,0); 
02684:  MOVLW  01
02686:  MOVWF  FAA
02688:  MOVLW  CC
0268A:  MOVWF  FA9
0268C:  CLRF   FA8
0268E:  BCF    FA6.6
02690:  BCF    FA6.7
02692:  BSF    FA6.2
02694:  MOVF   FF2,W
02696:  MOVWF  00
02698:  BCF    FF2.7
0269A:  MOVLB  F
0269C:  MOVLW  55
0269E:  MOVWF  FA7
026A0:  MOVLW  AA
026A2:  MOVWF  FA7
026A4:  BSF    FA6.1
026A6:  BTFSC  FA6.1
026A8:  BRA    26A6
026AA:  BCF    FA6.2
026AC:  MOVF   00,W
026AE:  IORWF  FF2,F
....................       delay_ms(20); 
026B0:  MOVLW  14
026B2:  MOVLB  8
026B4:  MOVWF  x68
026B6:  MOVLB  0
026B8:  CALL   1390
026BC:  MOVLB  5
....................    } 
....................    Password[1]=read_eeprom(461); 
026BE:  MOVFF  FF2,860
026C2:  BCF    FF2.7
026C4:  MOVLW  01
026C6:  MOVWF  FAA
026C8:  MOVLW  CD
026CA:  MOVWF  FA9
026CC:  BCF    FA6.6
026CE:  BCF    FA6.7
026D0:  BSF    FA6.0
026D2:  MOVF   FA8,W
026D4:  MOVLB  8
026D6:  BTFSC  x60.7
026D8:  BSF    FF2.7
026DA:  MOVLB  5
026DC:  MOVWF  xED
....................    delay_ms(50);    
026DE:  MOVLW  32
026E0:  MOVLB  8
026E2:  MOVWF  x68
026E4:  MOVLB  0
026E6:  CALL   1390
....................    if(Password[1]>9 || Password[1]<0){ 
026EA:  MOVLB  5
026EC:  BTFSC  xED.7
026EE:  BRA    26F6
026F0:  MOVF   xED,W
026F2:  SUBLW  09
026F4:  BNC   26FC
026F6:  BTFSC  xED.7
026F8:  BRA    26FC
026FA:  BRA    2738
....................       Password[1]=0; 
026FC:  CLRF   xED
....................       write_eeprom(461,0); 
026FE:  MOVLW  01
02700:  MOVWF  FAA
02702:  MOVLW  CD
02704:  MOVWF  FA9
02706:  CLRF   FA8
02708:  BCF    FA6.6
0270A:  BCF    FA6.7
0270C:  BSF    FA6.2
0270E:  MOVF   FF2,W
02710:  MOVWF  00
02712:  BCF    FF2.7
02714:  MOVLB  F
02716:  MOVLW  55
02718:  MOVWF  FA7
0271A:  MOVLW  AA
0271C:  MOVWF  FA7
0271E:  BSF    FA6.1
02720:  BTFSC  FA6.1
02722:  BRA    2720
02724:  BCF    FA6.2
02726:  MOVF   00,W
02728:  IORWF  FF2,F
....................       delay_ms(20); 
0272A:  MOVLW  14
0272C:  MOVLB  8
0272E:  MOVWF  x68
02730:  MOVLB  0
02732:  CALL   1390
02736:  MOVLB  5
....................    } 
....................    Password[2]=read_eeprom(462); 
02738:  MOVFF  FF2,860
0273C:  BCF    FF2.7
0273E:  MOVLW  01
02740:  MOVWF  FAA
02742:  MOVLW  CE
02744:  MOVWF  FA9
02746:  BCF    FA6.6
02748:  BCF    FA6.7
0274A:  BSF    FA6.0
0274C:  MOVF   FA8,W
0274E:  MOVLB  8
02750:  BTFSC  x60.7
02752:  BSF    FF2.7
02754:  MOVLB  5
02756:  MOVWF  xEE
....................    delay_ms(50);    
02758:  MOVLW  32
0275A:  MOVLB  8
0275C:  MOVWF  x68
0275E:  MOVLB  0
02760:  CALL   1390
....................    if(Password[2]>9 || Password[2]<0){ 
02764:  MOVLB  5
02766:  BTFSC  xEE.7
02768:  BRA    2770
0276A:  MOVF   xEE,W
0276C:  SUBLW  09
0276E:  BNC   2776
02770:  BTFSC  xEE.7
02772:  BRA    2776
02774:  BRA    27B2
....................       Password[2]=0; 
02776:  CLRF   xEE
....................       write_eeprom(462,0); 
02778:  MOVLW  01
0277A:  MOVWF  FAA
0277C:  MOVLW  CE
0277E:  MOVWF  FA9
02780:  CLRF   FA8
02782:  BCF    FA6.6
02784:  BCF    FA6.7
02786:  BSF    FA6.2
02788:  MOVF   FF2,W
0278A:  MOVWF  00
0278C:  BCF    FF2.7
0278E:  MOVLB  F
02790:  MOVLW  55
02792:  MOVWF  FA7
02794:  MOVLW  AA
02796:  MOVWF  FA7
02798:  BSF    FA6.1
0279A:  BTFSC  FA6.1
0279C:  BRA    279A
0279E:  BCF    FA6.2
027A0:  MOVF   00,W
027A2:  IORWF  FF2,F
....................       delay_ms(20); 
027A4:  MOVLW  14
027A6:  MOVLB  8
027A8:  MOVWF  x68
027AA:  MOVLB  0
027AC:  CALL   1390
027B0:  MOVLB  5
....................    } 
....................    Password[3]=read_eeprom(463); 
027B2:  MOVFF  FF2,860
027B6:  BCF    FF2.7
027B8:  MOVLW  01
027BA:  MOVWF  FAA
027BC:  MOVLW  CF
027BE:  MOVWF  FA9
027C0:  BCF    FA6.6
027C2:  BCF    FA6.7
027C4:  BSF    FA6.0
027C6:  MOVF   FA8,W
027C8:  MOVLB  8
027CA:  BTFSC  x60.7
027CC:  BSF    FF2.7
027CE:  MOVLB  5
027D0:  MOVWF  xEF
....................    delay_ms(50); 
027D2:  MOVLW  32
027D4:  MOVLB  8
027D6:  MOVWF  x68
027D8:  MOVLB  0
027DA:  CALL   1390
....................    if(Password[3]>9 || Password[3]<0){ 
027DE:  MOVLB  5
027E0:  BTFSC  xEF.7
027E2:  BRA    27EA
027E4:  MOVF   xEF,W
027E6:  SUBLW  09
027E8:  BNC   27F0
027EA:  BTFSC  xEF.7
027EC:  BRA    27F0
027EE:  BRA    282C
....................       Password[3]=0; 
027F0:  CLRF   xEF
....................       write_eeprom(463,0); 
027F2:  MOVLW  01
027F4:  MOVWF  FAA
027F6:  MOVLW  CF
027F8:  MOVWF  FA9
027FA:  CLRF   FA8
027FC:  BCF    FA6.6
027FE:  BCF    FA6.7
02800:  BSF    FA6.2
02802:  MOVF   FF2,W
02804:  MOVWF  00
02806:  BCF    FF2.7
02808:  MOVLB  F
0280A:  MOVLW  55
0280C:  MOVWF  FA7
0280E:  MOVLW  AA
02810:  MOVWF  FA7
02812:  BSF    FA6.1
02814:  BTFSC  FA6.1
02816:  BRA    2814
02818:  BCF    FA6.2
0281A:  MOVF   00,W
0281C:  IORWF  FF2,F
....................       delay_ms(20); 
0281E:  MOVLW  14
02820:  MOVLB  8
02822:  MOVWF  x68
02824:  MOVLB  0
02826:  CALL   1390
0282A:  MOVLB  5
....................    } 
....................     
....................    Integral=read_eeprom(470); 
0282C:  MOVFF  FF2,860
02830:  BCF    FF2.7
02832:  MOVLW  01
02834:  MOVWF  FAA
02836:  MOVLW  D6
02838:  MOVWF  FA9
0283A:  BCF    FA6.6
0283C:  BCF    FA6.7
0283E:  BSF    FA6.0
02840:  MOVF   FA8,W
02842:  MOVLB  8
02844:  BTFSC  x60.7
02846:  BSF    FF2.7
02848:  CLRF   x67
0284A:  MOVWF  x66
0284C:  MOVLB  0
0284E:  CALL   1D46
02852:  MOVFF  03,637
02856:  MOVFF  02,636
0285A:  MOVFF  01,635
0285E:  MOVFF  00,634
....................    delay_ms(50);  
02862:  MOVLW  32
02864:  MOVLB  8
02866:  MOVWF  x68
02868:  MOVLB  0
0286A:  CALL   1390
....................    if(Integral>5){ 
0286E:  MOVLB  8
02870:  CLRF   x63
02872:  CLRF   x62
02874:  MOVLW  20
02876:  MOVWF  x61
02878:  MOVLW  81
0287A:  MOVWF  x60
0287C:  MOVFF  637,867
02880:  MOVFF  636,866
02884:  MOVFF  635,865
02888:  MOVFF  634,864
0288C:  MOVLB  0
0288E:  CALL   1D7C
02892:  BNC   28DA
....................       Integral=1; 
02894:  MOVLB  6
02896:  CLRF   x37
02898:  CLRF   x36
0289A:  CLRF   x35
0289C:  MOVLW  7F
0289E:  MOVWF  x34
....................       write_eeprom(470,1); 
028A0:  MOVLW  01
028A2:  MOVWF  FAA
028A4:  MOVLW  D6
028A6:  MOVWF  FA9
028A8:  MOVLW  01
028AA:  MOVWF  FA8
028AC:  BCF    FA6.6
028AE:  BCF    FA6.7
028B0:  BSF    FA6.2
028B2:  MOVF   FF2,W
028B4:  MOVWF  00
028B6:  BCF    FF2.7
028B8:  MOVLB  F
028BA:  MOVLW  55
028BC:  MOVWF  FA7
028BE:  MOVLW  AA
028C0:  MOVWF  FA7
028C2:  BSF    FA6.1
028C4:  BTFSC  FA6.1
028C6:  BRA    28C4
028C8:  BCF    FA6.2
028CA:  MOVF   00,W
028CC:  IORWF  FF2,F
....................       delay_ms(20); 
028CE:  MOVLW  14
028D0:  MOVLB  8
028D2:  MOVWF  x68
028D4:  MOVLB  0
028D6:  CALL   1390
....................    } 
....................    Derivativo=read_eeprom(471); 
028DA:  MOVFF  FF2,860
028DE:  BCF    FF2.7
028E0:  MOVLW  01
028E2:  MOVWF  FAA
028E4:  MOVLW  D7
028E6:  MOVWF  FA9
028E8:  BCF    FA6.6
028EA:  BCF    FA6.7
028EC:  BSF    FA6.0
028EE:  MOVF   FA8,W
028F0:  MOVLB  8
028F2:  BTFSC  x60.7
028F4:  BSF    FF2.7
028F6:  CLRF   x67
028F8:  MOVWF  x66
028FA:  MOVLB  0
028FC:  CALL   1D46
02900:  MOVFF  03,63B
02904:  MOVFF  02,63A
02908:  MOVFF  01,639
0290C:  MOVFF  00,638
....................    delay_ms(50);  
02910:  MOVLW  32
02912:  MOVLB  8
02914:  MOVWF  x68
02916:  MOVLB  0
02918:  CALL   1390
....................    if(Derivativo>40){ 
0291C:  MOVLB  8
0291E:  CLRF   x63
02920:  CLRF   x62
02922:  MOVLW  20
02924:  MOVWF  x61
02926:  MOVLW  84
02928:  MOVWF  x60
0292A:  MOVFF  63B,867
0292E:  MOVFF  63A,866
02932:  MOVFF  639,865
02936:  MOVFF  638,864
0293A:  MOVLB  0
0293C:  CALL   1D7C
02940:  BNC   298A
....................       Derivativo=30; 
02942:  MOVLB  6
02944:  CLRF   x3B
02946:  CLRF   x3A
02948:  MOVLW  70
0294A:  MOVWF  x39
0294C:  MOVLW  83
0294E:  MOVWF  x38
....................       write_eeprom(471,30); 
02950:  MOVLW  01
02952:  MOVWF  FAA
02954:  MOVLW  D7
02956:  MOVWF  FA9
02958:  MOVLW  1E
0295A:  MOVWF  FA8
0295C:  BCF    FA6.6
0295E:  BCF    FA6.7
02960:  BSF    FA6.2
02962:  MOVF   FF2,W
02964:  MOVWF  00
02966:  BCF    FF2.7
02968:  MOVLB  F
0296A:  MOVLW  55
0296C:  MOVWF  FA7
0296E:  MOVLW  AA
02970:  MOVWF  FA7
02972:  BSF    FA6.1
02974:  BTFSC  FA6.1
02976:  BRA    2974
02978:  BCF    FA6.2
0297A:  MOVF   00,W
0297C:  IORWF  FF2,F
....................       delay_ms(20); 
0297E:  MOVLW  14
02980:  MOVLB  8
02982:  MOVWF  x68
02984:  MOVLB  0
02986:  CALL   1390
....................    } 
....................    AlTem=make16(read_eeprom(473),read_eeprom(472)); 
0298A:  MOVFF  FF2,860
0298E:  BCF    FF2.7
02990:  MOVLW  01
02992:  MOVWF  FAA
02994:  MOVLW  D9
02996:  MOVWF  FA9
02998:  BCF    FA6.6
0299A:  BCF    FA6.7
0299C:  BSF    FA6.0
0299E:  MOVF   FA8,W
029A0:  MOVLB  8
029A2:  BTFSC  x60.7
029A4:  BSF    FF2.7
029A6:  MOVWF  x61
029A8:  MOVFF  FF2,862
029AC:  BCF    FF2.7
029AE:  MOVLW  01
029B0:  MOVWF  FAA
029B2:  MOVLW  D8
029B4:  MOVWF  FA9
029B6:  BCF    FA6.6
029B8:  BCF    FA6.7
029BA:  BSF    FA6.0
029BC:  MOVF   FA8,W
029BE:  BTFSC  x62.7
029C0:  BSF    FF2.7
029C2:  MOVWF  x63
029C4:  MOVFF  861,5B7
029C8:  MOVFF  863,5B6
....................    delay_ms(50);  
029CC:  MOVLW  32
029CE:  MOVWF  x68
029D0:  MOVLB  0
029D2:  CALL   1390
....................    if(AlTem>500){ 
029D6:  MOVLB  5
029D8:  MOVF   xB7,W
029DA:  SUBLW  00
029DC:  BC    2A62
029DE:  XORLW  FF
029E0:  BNZ   29E8
029E2:  MOVF   xB6,W
029E4:  SUBLW  F4
029E6:  BC    2A62
....................       AlTem=200; 
029E8:  CLRF   xB7
029EA:  MOVLW  C8
029EC:  MOVWF  xB6
....................       write_eeprom(472,200); 
029EE:  MOVLW  01
029F0:  MOVWF  FAA
029F2:  MOVLW  D8
029F4:  MOVWF  FA9
029F6:  MOVLW  C8
029F8:  MOVWF  FA8
029FA:  BCF    FA6.6
029FC:  BCF    FA6.7
029FE:  BSF    FA6.2
02A00:  MOVF   FF2,W
02A02:  MOVWF  00
02A04:  BCF    FF2.7
02A06:  MOVLB  F
02A08:  MOVLW  55
02A0A:  MOVWF  FA7
02A0C:  MOVLW  AA
02A0E:  MOVWF  FA7
02A10:  BSF    FA6.1
02A12:  BTFSC  FA6.1
02A14:  BRA    2A12
02A16:  BCF    FA6.2
02A18:  MOVF   00,W
02A1A:  IORWF  FF2,F
....................       delay_ms(20); 
02A1C:  MOVLW  14
02A1E:  MOVLB  8
02A20:  MOVWF  x68
02A22:  MOVLB  0
02A24:  CALL   1390
....................       write_eeprom(473,0); 
02A28:  MOVLW  01
02A2A:  MOVWF  FAA
02A2C:  MOVLW  D9
02A2E:  MOVWF  FA9
02A30:  CLRF   FA8
02A32:  BCF    FA6.6
02A34:  BCF    FA6.7
02A36:  BSF    FA6.2
02A38:  MOVF   FF2,W
02A3A:  MOVWF  00
02A3C:  BCF    FF2.7
02A3E:  MOVLB  F
02A40:  MOVLW  55
02A42:  MOVWF  FA7
02A44:  MOVLW  AA
02A46:  MOVWF  FA7
02A48:  BSF    FA6.1
02A4A:  BTFSC  FA6.1
02A4C:  BRA    2A4A
02A4E:  BCF    FA6.2
02A50:  MOVF   00,W
02A52:  IORWF  FF2,F
....................       delay_ms(20); 
02A54:  MOVLW  14
02A56:  MOVLB  8
02A58:  MOVWF  x68
02A5A:  MOVLB  0
02A5C:  CALL   1390
02A60:  MOVLB  5
....................    } 
....................    Modo=read_eeprom(480); 
02A62:  MOVFF  FF2,860
02A66:  BCF    FF2.7
02A68:  MOVLW  01
02A6A:  MOVWF  FAA
02A6C:  MOVLW  E0
02A6E:  MOVWF  FA9
02A70:  BCF    FA6.6
02A72:  BCF    FA6.7
02A74:  BSF    FA6.0
02A76:  MOVF   FA8,W
02A78:  MOVLB  8
02A7A:  BTFSC  x60.7
02A7C:  BSF    FF2.7
02A7E:  MOVLB  5
02A80:  MOVWF  x94
....................    delay_ms(50);  
02A82:  MOVLW  32
02A84:  MOVLB  8
02A86:  MOVWF  x68
02A88:  MOVLB  0
02A8A:  CALL   1390
.................... } 
02A8E:  GOTO   6EC4 (RETURN)
....................  
.................... short PidePassword(int8 MenuAnt, int8 MenuActual, int8 MenuPost, int8 clave0,int8 clave1, int8 clave2,int8 clave3){ 
....................       if(n==0) 
*
03202:  MOVLB  5
03204:  MOVF   x9A,F
03206:  BNZ   32AA
....................       { 
....................          displayContrasena(Contrasena[0],20,30,1);displayContrasena(Contrasena[1],40,30,0); 
03208:  MOVFF  5E8,869
0320C:  MOVLW  14
0320E:  MOVLB  8
03210:  MOVWF  x6A
03212:  MOVLW  1E
03214:  MOVWF  x6B
03216:  MOVLW  01
03218:  MOVWF  x6C
0321A:  MOVLB  0
0321C:  CALL   1C90
03220:  MOVFF  5E9,869
03224:  MOVLW  28
03226:  MOVLB  8
03228:  MOVWF  x6A
0322A:  MOVLW  1E
0322C:  MOVWF  x6B
0322E:  CLRF   x6C
03230:  MOVLB  0
03232:  CALL   1C90
....................          displayContrasena(Contrasena[2],60,30,0);displayContrasena(Contrasena[0],80,30,0); 
03236:  MOVFF  5EA,869
0323A:  MOVLW  3C
0323C:  MOVLB  8
0323E:  MOVWF  x6A
03240:  MOVLW  1E
03242:  MOVWF  x6B
03244:  CLRF   x6C
03246:  MOVLB  0
03248:  CALL   1C90
0324C:  MOVFF  5E8,869
03250:  MOVLW  50
03252:  MOVLB  8
03254:  MOVWF  x6A
03256:  MOVLW  1E
03258:  MOVWF  x6B
0325A:  CLRF   x6C
0325C:  MOVLB  0
0325E:  CALL   1C90
....................          strcpy(Menus.Letra,"Clave"); 
03262:  MOVLW  08
03264:  MOVWF  FEA
03266:  MOVLW  40
03268:  MOVWF  FE9
0326A:  MOVFF  FF2,867
0326E:  BCF    FF2.7
03270:  MOVLW  00
03272:  CALL   07D8
03276:  TBLRD*-
03278:  TBLRD*+
0327A:  MOVF   FF5,W
0327C:  MOVWF  FEE
0327E:  IORLW  00
03280:  BNZ   3278
03282:  MOVLB  8
03284:  BTFSC  x67.7
03286:  BSF    FF2.7
....................          displayMenu(Menus.Letra,20,0,1,3); 
03288:  MOVLW  08
0328A:  MOVWF  x68
0328C:  MOVLW  40
0328E:  MOVWF  x67
03290:  MOVLW  14
03292:  MOVWF  x69
03294:  CLRF   x6A
03296:  MOVLW  01
03298:  MOVWF  x6B
0329A:  MOVLW  03
0329C:  MOVWF  x6C
0329E:  MOVLB  0
032A0:  CALL   1A3E
....................          n=1; 
032A4:  MOVLW  01
032A6:  MOVLB  5
032A8:  MOVWF  x9A
....................       } 
....................        
....................       if(UP){ 
032AA:  BSF    F92.5
032AC:  BTFSC  F80.5
032AE:  BRA    3384
....................          if(Flanco == 0){ 
032B0:  BTFSC  x87.4
032B2:  BRA    3382
....................             Flanco = 1;delay_ms(5); 
032B4:  BSF    x87.4
032B6:  MOVLW  05
032B8:  MOVLB  8
032BA:  MOVWF  x68
032BC:  MOVLB  0
032BE:  CALL   1390
....................             for(i=1;i<=4;i++){ 
032C2:  MOVLW  01
032C4:  MOVLB  5
032C6:  MOVWF  x9D
032C8:  MOVF   x9D,W
032CA:  SUBLW  04
032CC:  BNC   3382
....................                if(unidad==i){ 
032CE:  MOVF   x9D,W
032D0:  SUBWF  x9C,W
032D2:  BNZ   334A
....................                   Contrasena[i-1]++; 
032D4:  MOVLW  01
032D6:  SUBWF  x9D,W
032D8:  CLRF   03
032DA:  ADDLW  E8
032DC:  MOVWF  FE9
032DE:  MOVLW  05
032E0:  ADDWFC 03,W
032E2:  MOVWF  FEA
032E4:  INCF   FEF,F
....................                   if(Contrasena[i-1]>9){ 
032E6:  MOVLW  01
032E8:  SUBWF  x9D,W
032EA:  CLRF   03
032EC:  ADDLW  E8
032EE:  MOVWF  FE9
032F0:  MOVLW  05
032F2:  ADDWFC 03,W
032F4:  MOVWF  FEA
032F6:  BTFSC  FEF.7
032F8:  BRA    3312
032FA:  MOVF   FEF,W
032FC:  SUBLW  09
032FE:  BC    3312
....................                      Contrasena[i-1]=0; 
03300:  MOVLW  01
03302:  SUBWF  x9D,W
03304:  CLRF   03
03306:  ADDLW  E8
03308:  MOVWF  FE9
0330A:  MOVLW  05
0330C:  ADDWFC 03,W
0330E:  MOVWF  FEA
03310:  CLRF   FEF
....................                   } 
....................                   displayContrasena(Contrasena[i-1],i*20,30,1); 
03312:  MOVLW  01
03314:  SUBWF  x9D,W
03316:  CLRF   03
03318:  ADDLW  E8
0331A:  MOVWF  FE9
0331C:  MOVLW  05
0331E:  ADDWFC 03,W
03320:  MOVWF  FEA
03322:  MOVFF  FEF,867
03326:  MOVF   x9D,W
03328:  MULLW  14
0332A:  MOVFF  FF3,868
0332E:  MOVLB  8
03330:  MOVFF  867,869
03334:  MOVFF  868,86A
03338:  MOVLW  1E
0333A:  MOVWF  x6B
0333C:  MOVLW  01
0333E:  MOVWF  x6C
03340:  MOVLB  0
03342:  CALL   1C90
....................                }else{ 
03346:  BRA    337C
03348:  MOVLB  5
....................                   displayContrasena(Contrasena[i-1],i*20,30,0); 
0334A:  MOVLW  01
0334C:  SUBWF  x9D,W
0334E:  CLRF   03
03350:  ADDLW  E8
03352:  MOVWF  FE9
03354:  MOVLW  05
03356:  ADDWFC 03,W
03358:  MOVWF  FEA
0335A:  MOVFF  FEF,867
0335E:  MOVF   x9D,W
03360:  MULLW  14
03362:  MOVFF  FF3,868
03366:  MOVLB  8
03368:  MOVFF  867,869
0336C:  MOVFF  868,86A
03370:  MOVLW  1E
03372:  MOVWF  x6B
03374:  CLRF   x6C
03376:  MOVLB  0
03378:  CALL   1C90
....................                } 
....................             } 
0337C:  MOVLB  5
0337E:  INCF   x9D,F
03380:  BRA    32C8
....................          } 
....................       }else{ 
03382:  BRA    3386
....................          Flanco = 0; 
03384:  BCF    x87.4
....................       } 
....................              
....................       if(DOWN){ 
03386:  BSF    F96.0
03388:  BTFSC  F84.0
0338A:  BRA    345E
....................          if(Flanco2 == 0){ 
0338C:  BTFSC  x87.6
0338E:  BRA    345C
....................             Flanco2 = 1;delay_ms(5); 
03390:  BSF    x87.6
03392:  MOVLW  05
03394:  MOVLB  8
03396:  MOVWF  x68
03398:  MOVLB  0
0339A:  CALL   1390
....................             for(i=1;i<=4;i++){ 
0339E:  MOVLW  01
033A0:  MOVLB  5
033A2:  MOVWF  x9D
033A4:  MOVF   x9D,W
033A6:  SUBLW  04
033A8:  BNC   345C
....................                if(unidad==i){ 
033AA:  MOVF   x9D,W
033AC:  SUBWF  x9C,W
033AE:  BNZ   3424
....................                   Contrasena[i-1]--; 
033B0:  MOVLW  01
033B2:  SUBWF  x9D,W
033B4:  CLRF   03
033B6:  ADDLW  E8
033B8:  MOVWF  FE9
033BA:  MOVLW  05
033BC:  ADDWFC 03,W
033BE:  MOVWF  FEA
033C0:  DECF   FEF,F
....................                   if(Contrasena[i-1]<0){ 
033C2:  MOVLW  01
033C4:  SUBWF  x9D,W
033C6:  CLRF   03
033C8:  ADDLW  E8
033CA:  MOVWF  FE9
033CC:  MOVLW  05
033CE:  ADDWFC 03,W
033D0:  MOVWF  FEA
033D2:  BTFSC  FEF.7
033D4:  BRA    33D8
033D6:  BRA    33EC
....................                      Contrasena[i-1]=9; 
033D8:  MOVLW  01
033DA:  SUBWF  x9D,W
033DC:  CLRF   03
033DE:  ADDLW  E8
033E0:  MOVWF  FE9
033E2:  MOVLW  05
033E4:  ADDWFC 03,W
033E6:  MOVWF  FEA
033E8:  MOVLW  09
033EA:  MOVWF  FEF
....................                   } 
....................                   displayContrasena(Contrasena[i-1],i*20,30,1); 
033EC:  MOVLW  01
033EE:  SUBWF  x9D,W
033F0:  CLRF   03
033F2:  ADDLW  E8
033F4:  MOVWF  FE9
033F6:  MOVLW  05
033F8:  ADDWFC 03,W
033FA:  MOVWF  FEA
033FC:  MOVFF  FEF,867
03400:  MOVF   x9D,W
03402:  MULLW  14
03404:  MOVFF  FF3,868
03408:  MOVLB  8
0340A:  MOVFF  867,869
0340E:  MOVFF  868,86A
03412:  MOVLW  1E
03414:  MOVWF  x6B
03416:  MOVLW  01
03418:  MOVWF  x6C
0341A:  MOVLB  0
0341C:  CALL   1C90
....................                }else{ 
03420:  BRA    3456
03422:  MOVLB  5
....................                   displayContrasena(Contrasena[i-1],i*20,30,0); 
03424:  MOVLW  01
03426:  SUBWF  x9D,W
03428:  CLRF   03
0342A:  ADDLW  E8
0342C:  MOVWF  FE9
0342E:  MOVLW  05
03430:  ADDWFC 03,W
03432:  MOVWF  FEA
03434:  MOVFF  FEF,867
03438:  MOVF   x9D,W
0343A:  MULLW  14
0343C:  MOVFF  FF3,868
03440:  MOVLB  8
03442:  MOVFF  867,869
03446:  MOVFF  868,86A
0344A:  MOVLW  1E
0344C:  MOVWF  x6B
0344E:  CLRF   x6C
03450:  MOVLB  0
03452:  CALL   1C90
....................                } 
....................             }       
03456:  MOVLB  5
03458:  INCF   x9D,F
0345A:  BRA    33A4
....................          }      
....................       }else{ 
0345C:  BRA    3460
....................          Flanco2 = 0; 
0345E:  BCF    x87.6
....................       } 
....................              
....................       if(RIGHT){ 
03460:  BSF    F96.1
03462:  BTFSC  F84.1
03464:  BRA    34FE
....................          if(Flanco1 == 0){ 
03466:  BTFSC  x87.5
03468:  BRA    34FC
....................             Flanco1 = 1;delay_ms(5);unidad++; 
0346A:  BSF    x87.5
0346C:  MOVLW  05
0346E:  MOVLB  8
03470:  MOVWF  x68
03472:  MOVLB  0
03474:  CALL   1390
03478:  MOVLB  5
0347A:  INCF   x9C,F
....................             for(i=1;i<=4;i++){ 
0347C:  MOVLW  01
0347E:  MOVWF  x9D
03480:  MOVF   x9D,W
03482:  SUBLW  04
03484:  BNC   34FC
....................                if(unidad==i){ 
03486:  MOVF   x9D,W
03488:  SUBWF  x9C,W
0348A:  BNZ   34C4
....................                   displayContrasena(Contrasena[i-1],i*20,30,1); 
0348C:  MOVLW  01
0348E:  SUBWF  x9D,W
03490:  CLRF   03
03492:  ADDLW  E8
03494:  MOVWF  FE9
03496:  MOVLW  05
03498:  ADDWFC 03,W
0349A:  MOVWF  FEA
0349C:  MOVFF  FEF,867
034A0:  MOVF   x9D,W
034A2:  MULLW  14
034A4:  MOVFF  FF3,868
034A8:  MOVLB  8
034AA:  MOVFF  867,869
034AE:  MOVFF  868,86A
034B2:  MOVLW  1E
034B4:  MOVWF  x6B
034B6:  MOVLW  01
034B8:  MOVWF  x6C
034BA:  MOVLB  0
034BC:  CALL   1C90
....................                }else{ 
034C0:  BRA    34F6
034C2:  MOVLB  5
....................                   displayContrasena(Contrasena[i-1],i*20,30,0); 
034C4:  MOVLW  01
034C6:  SUBWF  x9D,W
034C8:  CLRF   03
034CA:  ADDLW  E8
034CC:  MOVWF  FE9
034CE:  MOVLW  05
034D0:  ADDWFC 03,W
034D2:  MOVWF  FEA
034D4:  MOVFF  FEF,867
034D8:  MOVF   x9D,W
034DA:  MULLW  14
034DC:  MOVFF  FF3,868
034E0:  MOVLB  8
034E2:  MOVFF  867,869
034E6:  MOVFF  868,86A
034EA:  MOVLW  1E
034EC:  MOVWF  x6B
034EE:  CLRF   x6C
034F0:  MOVLB  0
034F2:  CALL   1C90
....................                } 
....................             } 
034F6:  MOVLB  5
034F8:  INCF   x9D,F
034FA:  BRA    3480
....................          } 
....................       }else{ 
034FC:  BRA    3500
....................          Flanco1 = 0; 
034FE:  BCF    x87.5
....................       } 
....................        
....................       if(LEFT){ 
03500:  BSF    F96.2
03502:  BTFSC  F84.2
03504:  BRA    354E
....................          delay_ms(100); 
03506:  MOVLW  64
03508:  MOVLB  8
0350A:  MOVWF  x68
0350C:  MOVLB  0
0350E:  CALL   1390
....................          if(LEFT){ 
03512:  BSF    F96.2
03514:  BTFSC  F84.2
03516:  BRA    354C
....................             Menu=MenuAnt;glcd_fillScreen(OFF);n=0;Opcion=1;unidad=1; 
03518:  MOVFF  860,59B
0351C:  MOVLB  8
0351E:  CLRF   x67
03520:  MOVLB  0
03522:  CALL   1410
03526:  MOVLB  5
03528:  CLRF   x9A
0352A:  MOVLW  01
0352C:  MOVWF  xA2
0352E:  MOVWF  x9C
....................             Contrasena[0]=0;Contrasena[1]=0;Contrasena[2]=0;Contrasena[3]=0; 
03530:  CLRF   xE8
03532:  CLRF   xE9
03534:  CLRF   xEA
03536:  CLRF   xEB
....................             glcd_fillScreen(OFF);glcd_update(); 
03538:  MOVLB  8
0353A:  CLRF   x67
0353C:  MOVLB  0
0353E:  CALL   1410
03542:  CALL   146A
....................             return 1; 
03546:  MOVLW  01
03548:  MOVWF  01
0354A:  BRA    37EA
0354C:  MOVLB  5
....................          } 
....................       } 
....................      
....................       if(unidad>4){ 
0354E:  MOVF   x9C,W
03550:  SUBLW  04
03552:  BTFSC  FD8.0
03554:  BRA    37EC
....................          glcd_fillScreen(OFF);unidad=1; 
03556:  MOVLB  8
03558:  CLRF   x67
0355A:  MOVLB  0
0355C:  CALL   1410
03560:  MOVLW  01
03562:  MOVLB  5
03564:  MOVWF  x9C
....................          /* 
....................          if(Contrasena[0]==3&&Contrasena[1]==8&&Contrasena[2]==9&&Contrasena[3]==2 && MenuActual==0){ // Si Ingresa clave para reset general del sistema. 
....................             write_eeprom(0,0);delay_ms(20);write_eeprom(1,0);delay_ms(20);// Reestablece a contraseña de Fabrica y reinicia Programa. 
....................             write_eeprom(2,0);delay_ms(20);write_eeprom(3,0);delay_ms(20); 
....................             reset_cpu(); 
....................          } 
....................       */ 
....................          if((Contrasena[0]==clave0)&&(Contrasena[1]==clave1)&&(Contrasena[2]==clave2)&&(Contrasena[3]==clave3)){ 
03566:  MOVLB  8
03568:  MOVF   x63,W
0356A:  MOVLB  5
0356C:  SUBWF  xE8,W
0356E:  BTFSS  FD8.2
03570:  BRA    365A
03572:  MOVLB  8
03574:  MOVF   x64,W
03576:  MOVLB  5
03578:  SUBWF  xE9,W
0357A:  BNZ   365A
0357C:  MOVLB  8
0357E:  MOVF   x65,W
03580:  MOVLB  5
03582:  SUBWF  xEA,W
03584:  BNZ   365A
03586:  MOVLB  8
03588:  MOVF   x66,W
0358A:  MOVLB  5
0358C:  SUBWF  xEB,W
0358E:  BNZ   365A
....................             glcd_fillScreen(OFF); 
03590:  MOVLB  8
03592:  CLRF   x67
03594:  MOVLB  0
03596:  CALL   1410
....................             strcpy(Menus.Letra,"Clave"); 
0359A:  MOVLW  08
0359C:  MOVWF  FEA
0359E:  MOVLW  40
035A0:  MOVWF  FE9
035A2:  MOVFF  FF2,867
035A6:  BCF    FF2.7
035A8:  MOVLW  00
035AA:  CALL   07D8
035AE:  TBLRD*-
035B0:  TBLRD*+
035B2:  MOVF   FF5,W
035B4:  MOVWF  FEE
035B6:  IORLW  00
035B8:  BNZ   35B0
035BA:  MOVLB  8
035BC:  BTFSC  x67.7
035BE:  BSF    FF2.7
....................             displayMenu(Menus.Letra,30,0,0,2); 
035C0:  MOVLW  08
035C2:  MOVWF  x68
035C4:  MOVLW  40
035C6:  MOVWF  x67
035C8:  MOVLW  1E
035CA:  MOVWF  x69
035CC:  CLRF   x6A
035CE:  CLRF   x6B
035D0:  MOVLW  02
035D2:  MOVWF  x6C
035D4:  MOVLB  0
035D6:  CALL   1A3E
....................             strcpy(Menus.Letra,"Correcta"); 
035DA:  MOVLW  08
035DC:  MOVWF  FEA
035DE:  MOVLW  40
035E0:  MOVWF  FE9
035E2:  MOVFF  FF2,867
035E6:  BCF    FF2.7
035E8:  MOVLW  00
035EA:  CALL   07FC
035EE:  TBLRD*-
035F0:  TBLRD*+
035F2:  MOVF   FF5,W
035F4:  MOVWF  FEE
035F6:  IORLW  00
035F8:  BNZ   35F0
035FA:  MOVLB  8
035FC:  BTFSC  x67.7
035FE:  BSF    FF2.7
....................             displayMenu(Menus.Letra,15,30,0,2); 
03600:  MOVLW  08
03602:  MOVWF  x68
03604:  MOVLW  40
03606:  MOVWF  x67
03608:  MOVLW  0F
0360A:  MOVWF  x69
0360C:  MOVLW  1E
0360E:  MOVWF  x6A
03610:  CLRF   x6B
03612:  MOVLW  02
03614:  MOVWF  x6C
03616:  MOVLB  0
03618:  CALL   1A3E
....................             Menu=MenuPost;glcd_update();delay_ms(1000);glcd_fillScreen(OFF); 
0361C:  MOVFF  862,59B
03620:  CALL   146A
03624:  MOVLW  04
03626:  MOVLB  8
03628:  MOVWF  x67
0362A:  MOVLW  FA
0362C:  MOVWF  x68
0362E:  MOVLB  0
03630:  CALL   1390
03634:  MOVLB  8
03636:  DECFSZ x67,F
03638:  BRA    362A
0363A:  CLRF   x67
0363C:  MOVLB  0
0363E:  CALL   1410
....................             Contrasena[0]=0;Contrasena[1]=0;Contrasena[2]=0;Contrasena[3]=0; 
03642:  MOVLB  5
03644:  CLRF   xE8
03646:  CLRF   xE9
03648:  CLRF   xEA
0364A:  CLRF   xEB
....................             n=0; 
0364C:  CLRF   x9A
....................             return 1; 
0364E:  MOVLW  01
03650:  MOVWF  01
03652:  MOVLB  0
03654:  BRA    37EA
....................          }else{ 
03656:  BRA    37EA
03658:  MOVLB  5
....................             glcd_fillScreen(OFF); 
0365A:  MOVLB  8
0365C:  CLRF   x67
0365E:  MOVLB  0
03660:  CALL   1410
....................             strcpy(Menus.Letra,"Clave"); 
03664:  MOVLW  08
03666:  MOVWF  FEA
03668:  MOVLW  40
0366A:  MOVWF  FE9
0366C:  MOVFF  FF2,867
03670:  BCF    FF2.7
03672:  MOVLW  00
03674:  CALL   07D8
03678:  TBLRD*-
0367A:  TBLRD*+
0367C:  MOVF   FF5,W
0367E:  MOVWF  FEE
03680:  IORLW  00
03682:  BNZ   367A
03684:  MOVLB  8
03686:  BTFSC  x67.7
03688:  BSF    FF2.7
....................             displayMenu(Menus.Letra,30,0,0,2); 
0368A:  MOVLW  08
0368C:  MOVWF  x68
0368E:  MOVLW  40
03690:  MOVWF  x67
03692:  MOVLW  1E
03694:  MOVWF  x69
03696:  CLRF   x6A
03698:  CLRF   x6B
0369A:  MOVLW  02
0369C:  MOVWF  x6C
0369E:  MOVLB  0
036A0:  CALL   1A3E
....................             strcpy(Menus.Letra,"Incorrecta"); 
036A4:  MOVLW  08
036A6:  MOVWF  FEA
036A8:  MOVLW  40
036AA:  MOVWF  FE9
036AC:  MOVFF  FF2,867
036B0:  BCF    FF2.7
036B2:  MOVLW  00
036B4:  CALL   0824
036B8:  TBLRD*-
036BA:  TBLRD*+
036BC:  MOVF   FF5,W
036BE:  MOVWF  FEE
036C0:  IORLW  00
036C2:  BNZ   36BA
036C4:  MOVLB  8
036C6:  BTFSC  x67.7
036C8:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,30,0,2); 
036CA:  MOVLW  08
036CC:  MOVWF  x68
036CE:  MOVLW  40
036D0:  MOVWF  x67
036D2:  CLRF   x69
036D4:  MOVLW  1E
036D6:  MOVWF  x6A
036D8:  CLRF   x6B
036DA:  MOVLW  02
036DC:  MOVWF  x6C
036DE:  MOVLB  0
036E0:  CALL   1A3E
....................             unidad=1;glcd_update();delay_ms(1000);Contrasena[0]=0;Contrasena[1]=0;Contrasena[2]=0;Contrasena[3]=0;glcd_fillScreen(OFF); 
036E4:  MOVLW  01
036E6:  MOVLB  5
036E8:  MOVWF  x9C
036EA:  MOVLB  0
036EC:  CALL   146A
036F0:  MOVLW  04
036F2:  MOVLB  8
036F4:  MOVWF  x67
036F6:  MOVLW  FA
036F8:  MOVWF  x68
036FA:  MOVLB  0
036FC:  CALL   1390
03700:  MOVLB  8
03702:  DECFSZ x67,F
03704:  BRA    36F6
03706:  MOVLB  5
03708:  CLRF   xE8
0370A:  CLRF   xE9
0370C:  CLRF   xEA
0370E:  CLRF   xEB
03710:  MOVLB  8
03712:  CLRF   x67
03714:  MOVLB  0
03716:  CALL   1410
....................             glcd_rect(0, 0, 127, 25, YES, ON);strcpy(Menus.Letra,"Clave");glcd_text57(25, 1, Menus.Letra, 3, OFF);displayContrasena(Contrasena[0],20,30,1); 
0371A:  MOVLB  8
0371C:  CLRF   x78
0371E:  CLRF   x79
03720:  MOVLW  7F
03722:  MOVWF  x7A
03724:  MOVLW  19
03726:  MOVWF  x7B
03728:  MOVLW  01
0372A:  MOVWF  x7C
0372C:  MOVWF  x7D
0372E:  MOVLB  0
03730:  CALL   17C4
03734:  MOVLW  08
03736:  MOVWF  FEA
03738:  MOVLW  40
0373A:  MOVWF  FE9
0373C:  MOVFF  FF2,867
03740:  BCF    FF2.7
03742:  MOVLW  00
03744:  CALL   07D8
03748:  TBLRD*-
0374A:  TBLRD*+
0374C:  MOVF   FF5,W
0374E:  MOVWF  FEE
03750:  IORLW  00
03752:  BNZ   374A
03754:  MOVLB  8
03756:  BTFSC  x67.7
03758:  BSF    FF2.7
0375A:  MOVLW  19
0375C:  MOVWF  x78
0375E:  MOVLW  01
03760:  MOVWF  x79
03762:  MOVLW  08
03764:  MOVWF  x7B
03766:  MOVLW  40
03768:  MOVWF  x7A
0376A:  MOVLW  03
0376C:  MOVWF  x7C
0376E:  CLRF   x7D
03770:  MOVLB  0
03772:  CALL   1886
03776:  MOVFF  5E8,869
0377A:  MOVLW  14
0377C:  MOVLB  8
0377E:  MOVWF  x6A
03780:  MOVLW  1E
03782:  MOVWF  x6B
03784:  MOVLW  01
03786:  MOVWF  x6C
03788:  MOVLB  0
0378A:  CALL   1C90
....................             displayContrasena(Contrasena[1],40,30,0);displayContrasena(Contrasena[2],60,30,0);displayContrasena(Contrasena[0],80,30,0); 
0378E:  MOVFF  5E9,869
03792:  MOVLW  28
03794:  MOVLB  8
03796:  MOVWF  x6A
03798:  MOVLW  1E
0379A:  MOVWF  x6B
0379C:  CLRF   x6C
0379E:  MOVLB  0
037A0:  CALL   1C90
037A4:  MOVFF  5EA,869
037A8:  MOVLW  3C
037AA:  MOVLB  8
037AC:  MOVWF  x6A
037AE:  MOVLW  1E
037B0:  MOVWF  x6B
037B2:  CLRF   x6C
037B4:  MOVLB  0
037B6:  CALL   1C90
037BA:  MOVFF  5E8,869
037BE:  MOVLW  50
037C0:  MOVLB  8
037C2:  MOVWF  x6A
037C4:  MOVLW  1E
037C6:  MOVWF  x6B
037C8:  CLRF   x6C
037CA:  MOVLB  0
037CC:  CALL   1C90
....................             Menu=MenuAnt;glcd_fillScreen(OFF);n=0; 
037D0:  MOVFF  860,59B
037D4:  MOVLB  8
037D6:  CLRF   x67
037D8:  MOVLB  0
037DA:  CALL   1410
037DE:  MOVLB  5
037E0:  CLRF   x9A
....................             return 0; 
037E2:  MOVLW  00
037E4:  MOVWF  01
037E6:  MOVLB  0
037E8:  BRA    37EA
037EA:  MOVLB  5
....................          } 
....................       } 
.................... } 
037EC:  MOVLB  0
037EE:  RETLW  00
....................  
....................  
.................... #int_TIMER1 
.................... void temp1s(void){ 
....................    //set_timer1(45612);  // 5 ms 5536 , Posiblemente cargar con 22144 debido a F=12MHz 
....................    set_timer1(40536); 
*
012DC:  MOVLW  9E
012DE:  MOVWF  FCF
012E0:  MOVLW  58
012E2:  MOVWF  FCE
....................    tiempos++; 
012E4:  MOVLB  5
012E6:  INCF   xA6,F
012E8:  BTFSC  FD8.2
012EA:  INCF   xA7,F
....................    tiempos3++; 
012EC:  INCF   xA8,F
012EE:  BTFSC  FD8.2
012F0:  INCF   xA9,F
....................    tiempoctrl++; 
012F2:  INCF   xAA,F
012F4:  BTFSC  FD8.2
012F6:  INCF   xAB,F
....................     
....................    if(Control==1){ 
012F8:  DECFSZ x99,W
012FA:  BRA    1328
....................       if(tiempoctrl>=Tc) // Si el tiempo de control es mayor al tiempo de ciclo se reinicia tiempo de control 
012FC:  MOVF   xB5,W
012FE:  SUBWF  xAB,W
01300:  BNC   130E
01302:  BNZ   130A
01304:  MOVF   xB4,W
01306:  SUBWF  xAA,W
01308:  BNC   130E
....................          tiempoctrl=0; 
0130A:  CLRF   xAB
0130C:  CLRF   xAA
....................        // tiempoctrl incrementa una unidad cada 5ms, por eso se dividen los tiempos por 0.005. 
....................        
....................       if(tiempoctrl<=Tp) // Si el tiempo es menor o igual al tiempo de control se enciende la resistencia de lo contrario se apaga. 
0130E:  MOVF   xAB,W
01310:  SUBWF  xB3,W
01312:  BNC   1322
01314:  BNZ   131C
01316:  MOVF   xAA,W
01318:  SUBWF  xB2,W
0131A:  BNC   1322
....................          Resistencia_on;  
0131C:  BSF    F8B.0
0131E:  BCF    F94.0
....................       else          
01320:  BRA    1326
....................          Resistencia_off; 
01322:  BCF    F8B.0
01324:  BCF    F94.0
....................    }else{ 
01326:  BRA    132C
....................       Resistencia_off; 
01328:  BCF    F8B.0
0132A:  BCF    F94.0
....................    } 
....................     
....................    if(tiempos3>=200){ 
0132C:  MOVF   xA9,F
0132E:  BNZ   1336
01330:  MOVF   xA8,W
01332:  SUBLW  C7
01334:  BC    134A
....................       Lectura2=1; 
01336:  MOVLW  01
01338:  MOVWF  x8F
....................       if(flagup) 
0133A:  BTFSS  x87.0
0133C:  BRA    1340
....................          tiempoup++; 
0133E:  INCF   x90,F
....................       if(flagdn) 
01340:  BTFSS  x87.1
01342:  BRA    1346
....................          tiempodn++;    
01344:  INCF   x91,F
....................       tiempos3=0; 
01346:  CLRF   xA9
01348:  CLRF   xA8
....................    } 
....................      
....................    if(tiempos>=200){  // 12000 para que incremente cada minuto, 200para que incremente cada segundo. 
0134A:  MOVF   xA7,F
0134C:  BNZ   1354
0134E:  MOVF   xA6,W
01350:  SUBLW  C7
01352:  BC    1388
....................       tiempos=0;Lectura=1;tiemporeset++;TiempoControl++;tiemporecta++;mensaje=!mensaje; 
01354:  CLRF   xA7
01356:  CLRF   xA6
01358:  BSF    x95.0
0135A:  INCF   x97,F
0135C:  INCF   xA1,F
0135E:  INCF   x8D,F
01360:  BTG    x87.3
....................     
....................       if(flag_setpoint==1) 
01362:  BTFSS  x95.6
01364:  BRA    136C
....................          tiemposetpoint++; 
01366:  INCF   xB0,F
01368:  BTFSC  FD8.2
0136A:  INCF   xB1,F
....................        
....................       if(tiempo_esterilizacion==1 || tiempo_esterilizacion==2){                
0136C:  DECFSZ xA3,W
0136E:  BRA    1372
01370:  BRA    1378
01372:  MOVF   xA3,W
01374:  SUBLW  02
01376:  BNZ   137E
....................          tinicio++; 
01378:  INCF   xAC,F
0137A:  BTFSC  FD8.2
0137C:  INCF   xAD,F
....................       } 
....................           
....................       if(flag_tiempocalentamiento==1) 
0137E:  BTFSS  x95.4
01380:  BRA    1388
....................          tiempocalentamiento++; 
01382:  INCF   xAE,F
01384:  BTFSC  FD8.2
01386:  INCF   xAF,F
....................    }         
.................... } 
....................  
01388:  BCF    F9E.0
0138A:  MOVLB  0
0138C:  GOTO   0058
.................... void main()  
.................... {  
*
067F6:  CLRF   FF8
067F8:  BCF    FD0.7
067FA:  BSF    07.7
067FC:  CLRF   FEA
067FE:  CLRF   FE9
06800:  MOVLB  5
06802:  BCF    x87.0
06804:  BCF    x87.1
06806:  BCF    x87.2
06808:  BCF    x87.3
0680A:  CLRF   x88
0680C:  CLRF   x89
0680E:  CLRF   x8A
06810:  CLRF   x8B
06812:  MOVLW  0A
06814:  MOVWF  x8C
06816:  CLRF   x8D
06818:  CLRF   x8E
0681A:  CLRF   x8F
0681C:  CLRF   x90
0681E:  CLRF   x91
06820:  CLRF   x92
06822:  CLRF   x93
06824:  MOVLW  05
06826:  MOVWF  x94
06828:  BCF    x87.4
0682A:  BCF    x87.5
0682C:  BCF    x87.6
0682E:  BSF    x87.7
06830:  BCF    x95.0
06832:  BCF    x95.1
06834:  BCF    x95.2
06836:  BCF    x95.3
06838:  BCF    x95.4
0683A:  BCF    x95.5
0683C:  BCF    x95.6
0683E:  BCF    x95.7
06840:  CLRF   x96
06842:  CLRF   x97
06844:  MOVLW  01
06846:  MOVWF  x98
06848:  CLRF   x99
0684A:  CLRF   x9A
0684C:  CLRF   x9B
0684E:  MOVWF  x9C
06850:  CLRF   x9D
06852:  MOVWF  x9E
06854:  CLRF   x9F
06856:  CLRF   xA0
06858:  CLRF   xA1
0685A:  MOVWF  xA2
0685C:  CLRF   xA3
0685E:  CLRF   xA4
06860:  MOVLW  0A
06862:  MOVWF  xA5
06864:  CLRF   xA7
06866:  CLRF   xA6
06868:  CLRF   xA9
0686A:  CLRF   xA8
0686C:  CLRF   xAB
0686E:  CLRF   xAA
06870:  CLRF   xAD
06872:  CLRF   xAC
06874:  CLRF   xAF
06876:  CLRF   xAE
06878:  CLRF   xB1
0687A:  CLRF   xB0
0687C:  CLRF   xB3
0687E:  CLRF   xB2
06880:  CLRF   xB5
06882:  CLRF   xB4
06884:  CLRF   xB7
06886:  MOVLW  14
06888:  MOVWF  xB6
0688A:  CLRF   xBB
0688C:  CLRF   xBA
0688E:  CLRF   xB9
06890:  CLRF   xB8
06892:  CLRF   xBF
06894:  CLRF   xBE
06896:  MOVLW  20
06898:  MOVWF  xBD
0689A:  MOVLW  83
0689C:  MOVWF  xBC
0689E:  CLRF   xC3
068A0:  CLRF   xC2
068A2:  CLRF   xC1
068A4:  CLRF   xC0
068A6:  CLRF   xC7
068A8:  CLRF   xC6
068AA:  CLRF   xC5
068AC:  CLRF   xC4
068AE:  CLRF   xCB
068B0:  CLRF   xCA
068B2:  CLRF   xC9
068B4:  CLRF   xC8
068B6:  CLRF   xCF
068B8:  CLRF   xCE
068BA:  CLRF   xCD
068BC:  CLRF   xCC
068BE:  CLRF   xD3
068C0:  CLRF   xD2
068C2:  CLRF   xD1
068C4:  CLRF   xD0
068C6:  CLRF   xD7
068C8:  CLRF   xD6
068CA:  CLRF   xD5
068CC:  CLRF   xD4
068CE:  CLRF   xDB
068D0:  CLRF   xDA
068D2:  CLRF   xD9
068D4:  CLRF   xD8
068D6:  CLRF   xDF
068D8:  CLRF   xDE
068DA:  CLRF   xDD
068DC:  CLRF   xDC
068DE:  CLRF   xF3
068E0:  CLRF   xF2
068E2:  CLRF   xF1
068E4:  CLRF   xF0
068E6:  CLRF   xF7
068E8:  CLRF   xF6
068EA:  MOVLW  20
068EC:  MOVWF  xF5
068EE:  MOVLW  82
068F0:  MOVWF  xF4
068F2:  CLRF   xFB
068F4:  CLRF   xFA
068F6:  CLRF   xF9
068F8:  CLRF   xF8
068FA:  CLRF   xFF
068FC:  CLRF   xFE
068FE:  CLRF   xFD
06900:  CLRF   xFC
06902:  MOVLB  6
06904:  CLRF   x03
06906:  CLRF   x02
06908:  CLRF   x01
0690A:  CLRF   x00
0690C:  CLRF   x07
0690E:  CLRF   x06
06910:  CLRF   x05
06912:  CLRF   x04
06914:  CLRF   x0B
06916:  CLRF   x0A
06918:  CLRF   x09
0691A:  CLRF   x08
0691C:  CLRF   x0F
0691E:  CLRF   x0E
06920:  CLRF   x0D
06922:  CLRF   x0C
06924:  CLRF   x13
06926:  CLRF   x12
06928:  MOVLW  40
0692A:  MOVWF  x11
0692C:  MOVLW  80
0692E:  MOVWF  x10
06930:  CLRF   x17
06932:  CLRF   x16
06934:  MOVLW  40
06936:  MOVWF  x15
06938:  MOVLW  80
0693A:  MOVWF  x14
0693C:  CLRF   x1B
0693E:  CLRF   x1A
06940:  MOVLW  16
06942:  MOVWF  x19
06944:  MOVLW  86
06946:  MOVWF  x18
06948:  CLRF   x1F
0694A:  CLRF   x1E
0694C:  MOVLW  70
0694E:  MOVWF  x1D
06950:  MOVLW  86
06952:  MOVWF  x1C
06954:  CLRF   x23
06956:  CLRF   x22
06958:  CLRF   x21
0695A:  CLRF   x20
0695C:  CLRF   x27
0695E:  CLRF   x26
06960:  CLRF   x25
06962:  CLRF   x24
06964:  CLRF   x2B
06966:  CLRF   x2A
06968:  CLRF   x29
0696A:  CLRF   x28
0696C:  CLRF   x2F
0696E:  CLRF   x2E
06970:  CLRF   x2D
06972:  CLRF   x2C
06974:  CLRF   x33
06976:  CLRF   x32
06978:  CLRF   x31
0697A:  CLRF   x30
0697C:  CLRF   x37
0697E:  CLRF   x36
06980:  CLRF   x35
06982:  CLRF   x34
06984:  CLRF   x3B
06986:  CLRF   x3A
06988:  CLRF   x39
0698A:  CLRF   x38
0698C:  CLRF   x3F
0698E:  CLRF   x3E
06990:  CLRF   x3D
06992:  CLRF   x3C
06994:  CLRF   x43
06996:  CLRF   x42
06998:  CLRF   x41
0699A:  CLRF   x40
0699C:  CLRF   x47
0699E:  CLRF   x46
069A0:  CLRF   x45
069A2:  CLRF   x44
069A4:  CLRF   x4B
069A6:  CLRF   x4A
069A8:  CLRF   x49
069AA:  CLRF   x48
069AC:  CLRF   x4F
069AE:  MOVLW  40
069B0:  MOVWF  x4E
069B2:  MOVLW  1C
069B4:  MOVWF  x4D
069B6:  MOVLW  89
069B8:  MOVWF  x4C
069BA:  CLRF   x53
069BC:  CLRF   x52
069BE:  CLRF   x51
069C0:  CLRF   x50
069C2:  CLRF   x57
069C4:  CLRF   x56
069C6:  MOVLW  48
069C8:  MOVWF  x55
069CA:  MOVLW  84
069CC:  MOVWF  x54
069CE:  CLRF   x5B
069D0:  CLRF   x5A
069D2:  CLRF   x59
069D4:  CLRF   x58
069D6:  CLRF   x5F
069D8:  CLRF   x5E
069DA:  CLRF   x5D
069DC:  CLRF   x5C
069DE:  MOVF   FC1,W
069E0:  ANDLW  C0
069E2:  IORLW  0F
069E4:  MOVWF  FC1
069E6:  MOVLW  07
069E8:  MOVWF  FB4
069EA:  MOVLB  4
069EC:  CLRF   x17
069EE:  CLRF   x18
069F0:  CLRF   x19
069F2:  CLRF   x1A
069F4:  CLRF   x1B
069F6:  CLRF   x1C
069F8:  CLRF   x1D
069FA:  CLRF   x1E
069FC:  CLRF   x1F
069FE:  CLRF   x20
06A00:  CLRF   x21
06A02:  CLRF   x22
06A04:  CLRF   x23
06A06:  CLRF   x24
06A08:  CLRF   x25
06A0A:  CLRF   x26
06A0C:  CLRF   x27
06A0E:  CLRF   x28
06A10:  CLRF   x29
06A12:  CLRF   x2A
06A14:  CLRF   x2B
06A16:  CLRF   x2C
06A18:  CLRF   x2D
06A1A:  CLRF   x2E
06A1C:  CLRF   x2F
06A1E:  CLRF   x30
06A20:  CLRF   x31
06A22:  CLRF   x32
06A24:  CLRF   x33
06A26:  CLRF   x34
06A28:  CLRF   x35
06A2A:  CLRF   x36
06A2C:  CLRF   x37
06A2E:  CLRF   x38
06A30:  CLRF   x39
06A32:  CLRF   x3A
06A34:  CLRF   x3B
06A36:  CLRF   x3C
06A38:  CLRF   x3D
06A3A:  CLRF   x3E
06A3C:  CLRF   x3F
06A3E:  CLRF   x40
06A40:  CLRF   x41
06A42:  CLRF   x42
06A44:  CLRF   x43
06A46:  CLRF   x44
06A48:  CLRF   x45
06A4A:  CLRF   x46
06A4C:  CLRF   x47
06A4E:  CLRF   x48
06A50:  CLRF   x49
06A52:  CLRF   x4A
06A54:  CLRF   x4B
06A56:  CLRF   x4C
06A58:  CLRF   x4D
06A5A:  CLRF   x4E
06A5C:  CLRF   x4F
06A5E:  CLRF   x50
06A60:  CLRF   x51
06A62:  CLRF   x52
06A64:  CLRF   x53
06A66:  CLRF   x54
06A68:  CLRF   x55
06A6A:  CLRF   x56
06A6C:  CLRF   x57
06A6E:  CLRF   x58
06A70:  CLRF   x59
06A72:  CLRF   x5A
06A74:  CLRF   x5B
06A76:  CLRF   x5C
06A78:  CLRF   x5D
06A7A:  CLRF   x5E
06A7C:  CLRF   x5F
06A7E:  CLRF   x60
06A80:  CLRF   x61
06A82:  CLRF   x62
06A84:  CLRF   x63
06A86:  CLRF   x64
06A88:  CLRF   x65
06A8A:  CLRF   x66
06A8C:  CLRF   x67
06A8E:  CLRF   x68
06A90:  CLRF   x69
06A92:  CLRF   x6A
06A94:  CLRF   x6B
06A96:  CLRF   x6C
06A98:  CLRF   x6D
06A9A:  CLRF   x6E
06A9C:  CLRF   x6F
06A9E:  CLRF   x70
06AA0:  CLRF   x71
06AA2:  CLRF   x72
06AA4:  CLRF   x73
06AA6:  CLRF   x74
06AA8:  CLRF   x75
06AAA:  CLRF   x76
06AAC:  CLRF   x77
06AAE:  CLRF   x78
06AB0:  CLRF   x79
06AB2:  CLRF   x7A
06AB4:  CLRF   x7B
06AB6:  CLRF   x7C
06AB8:  CLRF   x7D
06ABA:  CLRF   x7E
06ABC:  CLRF   x7F
06ABE:  CLRF   x80
06AC0:  CLRF   x81
06AC2:  CLRF   x82
06AC4:  CLRF   x83
06AC6:  CLRF   x84
06AC8:  CLRF   x85
06ACA:  CLRF   x86
06ACC:  CLRF   x87
06ACE:  CLRF   x88
06AD0:  CLRF   x89
06AD2:  CLRF   x8A
06AD4:  CLRF   x8B
06AD6:  CLRF   x8C
06AD8:  CLRF   x8D
06ADA:  CLRF   x8E
06ADC:  CLRF   x8F
06ADE:  CLRF   x90
06AE0:  CLRF   x91
06AE2:  CLRF   x92
06AE4:  CLRF   x93
06AE6:  CLRF   x94
06AE8:  CLRF   x95
06AEA:  CLRF   x96
06AEC:  CLRF   x97
06AEE:  CLRF   x98
06AF0:  CLRF   x99
06AF2:  CLRF   x9A
06AF4:  CLRF   x9B
06AF6:  CLRF   x9C
06AF8:  CLRF   x9D
06AFA:  CLRF   x9E
06AFC:  CLRF   x9F
06AFE:  CLRF   xA0
06B00:  CLRF   xA1
06B02:  CLRF   xA2
06B04:  CLRF   xA3
06B06:  CLRF   xA4
06B08:  CLRF   xA5
06B0A:  CLRF   xA6
06B0C:  CLRF   xA7
06B0E:  CLRF   xA8
06B10:  CLRF   xA9
06B12:  CLRF   xAA
06B14:  CLRF   xAB
06B16:  CLRF   xAC
06B18:  CLRF   xAD
06B1A:  CLRF   xAE
06B1C:  CLRF   xAF
06B1E:  CLRF   xB0
06B20:  CLRF   xB1
06B22:  CLRF   xB2
06B24:  CLRF   xB3
06B26:  CLRF   xB4
06B28:  CLRF   xB5
06B2A:  CLRF   xB6
06B2C:  CLRF   xB7
06B2E:  CLRF   xB8
06B30:  CLRF   xB9
06B32:  CLRF   xBA
06B34:  CLRF   xBB
06B36:  CLRF   xBC
06B38:  CLRF   xBD
06B3A:  CLRF   xBE
06B3C:  CLRF   xBF
06B3E:  CLRF   xC0
06B40:  CLRF   xC1
06B42:  CLRF   xC2
06B44:  CLRF   xC3
06B46:  CLRF   xC4
06B48:  CLRF   xC5
06B4A:  CLRF   xC6
06B4C:  CLRF   xC7
06B4E:  CLRF   xC8
06B50:  CLRF   xC9
06B52:  CLRF   xCA
06B54:  CLRF   xCB
06B56:  CLRF   xCC
06B58:  CLRF   xCD
06B5A:  CLRF   xCE
06B5C:  CLRF   xCF
06B5E:  CLRF   xD0
06B60:  CLRF   xD1
06B62:  CLRF   xD2
06B64:  CLRF   xD3
06B66:  CLRF   xD4
06B68:  CLRF   xD5
06B6A:  CLRF   xD6
06B6C:  CLRF   xD7
06B6E:  CLRF   xD8
06B70:  CLRF   xD9
06B72:  CLRF   xDA
06B74:  CLRF   xDB
06B76:  CLRF   xDC
06B78:  CLRF   xDD
06B7A:  CLRF   xDE
06B7C:  CLRF   xDF
06B7E:  CLRF   xE0
06B80:  CLRF   xE1
06B82:  CLRF   xE2
06B84:  CLRF   xE3
06B86:  CLRF   xE4
06B88:  CLRF   xE5
06B8A:  CLRF   xE6
06B8C:  CLRF   xE7
06B8E:  CLRF   xE8
06B90:  CLRF   xE9
06B92:  CLRF   xEA
06B94:  CLRF   xEB
06B96:  CLRF   xEC
06B98:  CLRF   xED
06B9A:  CLRF   xEE
06B9C:  CLRF   xEF
06B9E:  CLRF   xF0
06BA0:  CLRF   xF1
06BA2:  CLRF   xF2
06BA4:  CLRF   xF3
06BA6:  CLRF   xF4
06BA8:  CLRF   xF5
06BAA:  CLRF   xF6
06BAC:  CLRF   xF7
06BAE:  CLRF   xF8
06BB0:  CLRF   xF9
06BB2:  CLRF   xFA
06BB4:  CLRF   xFB
06BB6:  CLRF   xFC
06BB8:  CLRF   xFD
06BBA:  CLRF   xFE
06BBC:  CLRF   xFF
06BBE:  MOVLB  5
06BC0:  CLRF   x00
06BC2:  CLRF   x01
06BC4:  CLRF   x02
06BC6:  CLRF   x03
06BC8:  CLRF   x04
06BCA:  CLRF   x05
06BCC:  CLRF   x06
06BCE:  CLRF   x07
06BD0:  CLRF   x08
06BD2:  CLRF   x09
06BD4:  CLRF   x0A
06BD6:  CLRF   x0B
06BD8:  CLRF   x0C
06BDA:  CLRF   x0D
06BDC:  CLRF   x0E
06BDE:  CLRF   x0F
06BE0:  CLRF   x10
06BE2:  CLRF   x11
06BE4:  CLRF   x12
06BE6:  CLRF   x13
06BE8:  CLRF   x14
06BEA:  CLRF   x15
06BEC:  CLRF   x16
06BEE:  CLRF   x17
06BF0:  CLRF   x18
06BF2:  CLRF   x19
06BF4:  CLRF   x1A
06BF6:  CLRF   x1B
06BF8:  CLRF   x1C
06BFA:  CLRF   x1D
06BFC:  CLRF   x1E
06BFE:  CLRF   x1F
06C00:  CLRF   x20
06C02:  CLRF   x21
06C04:  CLRF   x22
06C06:  CLRF   x23
06C08:  CLRF   x24
06C0A:  CLRF   x25
06C0C:  CLRF   x26
06C0E:  CLRF   x27
06C10:  CLRF   x28
06C12:  CLRF   x29
06C14:  CLRF   x2A
06C16:  CLRF   x2B
06C18:  CLRF   x2C
06C1A:  CLRF   x2D
06C1C:  CLRF   x2E
06C1E:  CLRF   x2F
06C20:  CLRF   x30
06C22:  CLRF   x31
06C24:  CLRF   x32
06C26:  CLRF   x33
06C28:  CLRF   x34
06C2A:  CLRF   x35
06C2C:  CLRF   x36
06C2E:  CLRF   x37
06C30:  CLRF   x38
06C32:  CLRF   x39
06C34:  CLRF   x3A
06C36:  CLRF   x3B
06C38:  CLRF   x3C
06C3A:  CLRF   x3D
06C3C:  CLRF   x3E
06C3E:  CLRF   x3F
06C40:  CLRF   x40
06C42:  CLRF   x41
06C44:  CLRF   x42
06C46:  CLRF   x43
06C48:  CLRF   x44
06C4A:  CLRF   x45
06C4C:  CLRF   x46
06C4E:  CLRF   x47
06C50:  CLRF   x48
06C52:  CLRF   x49
06C54:  CLRF   x4A
06C56:  CLRF   x4B
06C58:  CLRF   x4C
06C5A:  CLRF   x4D
06C5C:  CLRF   x4E
06C5E:  CLRF   x4F
06C60:  CLRF   x50
06C62:  CLRF   x51
06C64:  CLRF   x52
06C66:  CLRF   x53
06C68:  CLRF   x54
06C6A:  CLRF   x55
06C6C:  CLRF   x56
06C6E:  CLRF   x57
06C70:  CLRF   x58
06C72:  CLRF   x59
06C74:  CLRF   x5A
06C76:  CLRF   x5B
06C78:  CLRF   x5C
06C7A:  CLRF   x5D
06C7C:  CLRF   x5E
06C7E:  CLRF   x5F
06C80:  CLRF   x60
06C82:  CLRF   x61
06C84:  CLRF   x62
06C86:  CLRF   x63
06C88:  CLRF   x64
06C8A:  CLRF   x65
06C8C:  CLRF   x66
06C8E:  CLRF   x67
06C90:  CLRF   x68
06C92:  CLRF   x69
06C94:  CLRF   x6A
06C96:  CLRF   x6B
06C98:  CLRF   x6C
06C9A:  CLRF   x6D
06C9C:  CLRF   x6E
06C9E:  CLRF   x6F
06CA0:  CLRF   x70
06CA2:  CLRF   x71
06CA4:  CLRF   x72
06CA6:  CLRF   x73
06CA8:  CLRF   x74
06CAA:  CLRF   x75
06CAC:  CLRF   x76
06CAE:  CLRF   x77
06CB0:  CLRF   x78
06CB2:  CLRF   x79
06CB4:  CLRF   x7A
06CB6:  CLRF   x7B
06CB8:  CLRF   x7C
06CBA:  CLRF   x7D
06CBC:  CLRF   x7E
06CBE:  CLRF   x7F
06CC0:  CLRF   x80
06CC2:  CLRF   x81
06CC4:  CLRF   x82
06CC6:  CLRF   x83
06CC8:  CLRF   x84
06CCA:  CLRF   x85
06CCC:  CLRF   x86
06CCE:  CLRF   xE0
06CD0:  CLRF   xE1
06CD2:  CLRF   xE2
06CD4:  CLRF   xE3
06CD6:  CLRF   xE4
06CD8:  CLRF   xE5
06CDA:  CLRF   xE6
06CDC:  CLRF   xE7
06CDE:  CLRF   xE8
06CE0:  CLRF   xE9
06CE2:  CLRF   xEA
06CE4:  CLRF   xEB
06CE6:  CLRF   xEC
06CE8:  CLRF   xED
06CEA:  CLRF   xEE
06CEC:  CLRF   xEF
06CEE:  MOVLB  8
06CF0:  CLRF   x5E
06CF2:  CLRF   x5F
....................    delay_ms(1000); 
06CF4:  MOVLW  04
06CF6:  MOVWF  x60
06CF8:  MOVLW  FA
06CFA:  MOVWF  x68
06CFC:  MOVLB  0
06CFE:  CALL   1390
06D02:  MOVLB  8
06D04:  DECFSZ x60,F
06D06:  BRA    6CF8
....................    ConfigInicial(); 
06D08:  MOVLB  0
06D0A:  GOTO   13B8
....................     
....................    glcd_init(ON);             //Inicializa la glcd 
06D0E:  MOVLW  01
06D10:  MOVLB  8
06D12:  MOVWF  x60
06D14:  MOVLB  0
06D16:  CALL   1522
....................    glcd_fillScreen(OFF);      //Limpia la pantalla 
06D1A:  MOVLB  8
06D1C:  CLRF   x67
06D1E:  MOVLB  0
06D20:  CALL   1410
....................    glcd_rect(0,61,127,63,YES,ON); 
06D24:  MOVLB  8
06D26:  CLRF   x78
06D28:  MOVLW  3D
06D2A:  MOVWF  x79
06D2C:  MOVLW  7F
06D2E:  MOVWF  x7A
06D30:  MOVLW  3F
06D32:  MOVWF  x7B
06D34:  MOVLW  01
06D36:  MOVWF  x7C
06D38:  MOVWF  x7D
06D3A:  MOVLB  0
06D3C:  CALL   17C4
....................    strcpy(Menus.Letra,"JP Inglobal"); 
06D40:  MOVLW  08
06D42:  MOVWF  FEA
06D44:  MOVLW  40
06D46:  MOVWF  FE9
06D48:  MOVFF  FF2,860
06D4C:  BCF    FF2.7
06D4E:  MOVLW  00
06D50:  CALL   084E
06D54:  TBLRD*-
06D56:  TBLRD*+
06D58:  MOVF   FF5,W
06D5A:  MOVWF  FEE
06D5C:  IORLW  00
06D5E:  BNZ   6D56
06D60:  MOVLB  8
06D62:  BTFSC  x60.7
06D64:  BSF    FF2.7
....................    displayMenu(Menus.Letra,0,0,0,2);      
06D66:  MOVLW  08
06D68:  MOVWF  x68
06D6A:  MOVLW  40
06D6C:  MOVWF  x67
06D6E:  CLRF   x69
06D70:  CLRF   x6A
06D72:  CLRF   x6B
06D74:  MOVLW  02
06D76:  MOVWF  x6C
06D78:  MOVLB  0
06D7A:  CALL   1A3E
....................    strcpy(Menus.Letra,"    Mufla Digital"); 
06D7E:  MOVLW  08
06D80:  MOVWF  FEA
06D82:  MOVLW  40
06D84:  MOVWF  FE9
06D86:  MOVFF  FF2,860
06D8A:  BCF    FF2.7
06D8C:  MOVLW  00
06D8E:  CALL   0878
06D92:  TBLRD*-
06D94:  TBLRD*+
06D96:  MOVF   FF5,W
06D98:  MOVWF  FEE
06D9A:  IORLW  00
06D9C:  BNZ   6D94
06D9E:  MOVLB  8
06DA0:  BTFSC  x60.7
06DA2:  BSF    FF2.7
....................    displayMenu(Menus.Letra,0,20,0,1);        
06DA4:  MOVLW  08
06DA6:  MOVWF  x68
06DA8:  MOVLW  40
06DAA:  MOVWF  x67
06DAC:  CLRF   x69
06DAE:  MOVLW  14
06DB0:  MOVWF  x6A
06DB2:  CLRF   x6B
06DB4:  MOVLW  01
06DB6:  MOVWF  x6C
06DB8:  MOVLB  0
06DBA:  CALL   1A3E
....................    strcpy(Menus.Letra,"     con Rampas"); 
06DBE:  MOVLW  08
06DC0:  MOVWF  FEA
06DC2:  MOVLW  40
06DC4:  MOVWF  FE9
06DC6:  MOVFF  FF2,860
06DCA:  BCF    FF2.7
06DCC:  MOVLW  00
06DCE:  CALL   08A8
06DD2:  TBLRD*-
06DD4:  TBLRD*+
06DD6:  MOVF   FF5,W
06DD8:  MOVWF  FEE
06DDA:  IORLW  00
06DDC:  BNZ   6DD4
06DDE:  MOVLB  8
06DE0:  BTFSC  x60.7
06DE2:  BSF    FF2.7
....................    displayMenu(Menus.Letra,0,29,0,1);        
06DE4:  MOVLW  08
06DE6:  MOVWF  x68
06DE8:  MOVLW  40
06DEA:  MOVWF  x67
06DEC:  CLRF   x69
06DEE:  MOVLW  1D
06DF0:  MOVWF  x6A
06DF2:  CLRF   x6B
06DF4:  MOVLW  01
06DF6:  MOVWF  x6C
06DF8:  MOVLB  0
06DFA:  CALL   1A3E
....................    strcpy(Menus.Letra,"   16.4L"); 
06DFE:  MOVLW  08
06E00:  MOVWF  FEA
06E02:  MOVLW  40
06E04:  MOVWF  FE9
06E06:  MOVFF  FF2,860
06E0A:  BCF    FF2.7
06E0C:  MOVLW  00
06E0E:  CALL   08D6
06E12:  TBLRD*-
06E14:  TBLRD*+
06E16:  MOVF   FF5,W
06E18:  MOVWF  FEE
06E1A:  IORLW  00
06E1C:  BNZ   6E14
06E1E:  MOVLB  8
06E20:  BTFSC  x60.7
06E22:  BSF    FF2.7
....................    displayMenu(Menus.Letra,0,45,0,2); 
06E24:  MOVLW  08
06E26:  MOVWF  x68
06E28:  MOVLW  40
06E2A:  MOVWF  x67
06E2C:  CLRF   x69
06E2E:  MOVLW  2D
06E30:  MOVWF  x6A
06E32:  CLRF   x6B
06E34:  MOVLW  02
06E36:  MOVWF  x6C
06E38:  MOVLB  0
06E3A:  CALL   1A3E
....................    delay_ms(1000); 
06E3E:  MOVLW  04
06E40:  MOVLB  8
06E42:  MOVWF  x60
06E44:  MOVLW  FA
06E46:  MOVWF  x68
06E48:  MOVLB  0
06E4A:  CALL   1390
06E4E:  MOVLB  8
06E50:  DECFSZ x60,F
06E52:  BRA    6E44
....................     
....................    Resistencia_off; 
06E54:  BCF    F8B.0
06E56:  BCF    F94.0
....................    glcd_fillScreen(OFF);      //Limpia la pantalla 
06E58:  CLRF   x67
06E5A:  MOVLB  0
06E5C:  CALL   1410
....................    displayContrasena(Contrasena[0],20,30,1); 
06E60:  MOVFF  5E8,869
06E64:  MOVLW  14
06E66:  MOVLB  8
06E68:  MOVWF  x6A
06E6A:  MOVLW  1E
06E6C:  MOVWF  x6B
06E6E:  MOVLW  01
06E70:  MOVWF  x6C
06E72:  MOVLB  0
06E74:  CALL   1C90
....................    displayContrasena(Contrasena[1],40,30,0); 
06E78:  MOVFF  5E9,869
06E7C:  MOVLW  28
06E7E:  MOVLB  8
06E80:  MOVWF  x6A
06E82:  MOVLW  1E
06E84:  MOVWF  x6B
06E86:  CLRF   x6C
06E88:  MOVLB  0
06E8A:  CALL   1C90
....................    displayContrasena(Contrasena[2],60,30,0); 
06E8E:  MOVFF  5EA,869
06E92:  MOVLW  3C
06E94:  MOVLB  8
06E96:  MOVWF  x6A
06E98:  MOVLW  1E
06E9A:  MOVWF  x6B
06E9C:  CLRF   x6C
06E9E:  MOVLB  0
06EA0:  CALL   1C90
....................    displayContrasena(Contrasena[3],80,30,0);  
06EA4:  MOVFF  5EB,869
06EA8:  MOVLW  50
06EAA:  MOVLB  8
06EAC:  MOVWF  x6A
06EAE:  MOVLW  1E
06EB0:  MOVWF  x6B
06EB2:  CLRF   x6C
06EB4:  MOVLB  0
06EB6:  CALL   1C90
....................    Menu=0; 
06EBA:  MOVLB  5
06EBC:  CLRF   x9B
....................    LeeEEPROM(); 
06EBE:  MOVLB  0
06EC0:  GOTO   1DF6
....................     
....................    for(i=0;i<80;i++){ 
06EC4:  MOVLB  5
06EC6:  CLRF   x9D
06EC8:  MOVF   x9D,W
06ECA:  SUBLW  4F
06ECC:  BNC   6EEE
....................       Temperatura=Leer_Sensor(MediaMovil); 
06ECE:  MOVFF  58C,860
06ED2:  MOVLB  0
06ED4:  CALL   2FDA
06ED8:  MOVFF  03,627
06EDC:  MOVFF  02,626
06EE0:  MOVFF  01,625
06EE4:  MOVFF  00,624
....................    } 
06EE8:  MOVLB  5
06EEA:  INCF   x9D,F
06EEC:  BRA    6EC8
....................     
....................    //adcInf=(0.004*resistencia*1023)/5.0; 
....................    //adcSup=(0.02*resistencia*1023)/5.0; 
....................    //m=(Tsup-Tinf)/(adcSup-adcInf); 
....................    //b=Tsup-(m*adcSup); 
....................    m=1.9233; 
06EEE:  MOVLW  B2
06EF0:  MOVLB  6
06EF2:  MOVWF  x3F
06EF4:  MOVLW  2E
06EF6:  MOVWF  x3E
06EF8:  MOVLW  76
06EFA:  MOVWF  x3D
06EFC:  MOVLW  7F
06EFE:  MOVWF  x3C
....................    b=-371.28; 
06F00:  MOVLW  D7
06F02:  MOVWF  x43
06F04:  MOVLW  A3
06F06:  MOVWF  x42
06F08:  MOVLW  B9
06F0A:  MOVWF  x41
06F0C:  MOVLW  87
06F0E:  MOVWF  x40
....................    penInicial=penMufla; 
06F10:  MOVFF  657,65F
06F14:  MOVFF  656,65E
06F18:  MOVFF  655,65D
06F1C:  MOVFF  654,65C
....................    while(TRUE)  
....................    {  
....................       glcd_update();             
06F20:  MOVLB  0
06F22:  CALL   146A
....................        
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................       if(Menu==0){ //Menu de Contraseña. 
06F26:  MOVLB  5
06F28:  MOVF   x9B,F
06F2A:  BTFSS  FD8.2
06F2C:  BRA    74F6
....................        
....................       strcpy(Menus.Letra,"Clave"); 
06F2E:  MOVLW  08
06F30:  MOVWF  FEA
06F32:  MOVLW  40
06F34:  MOVWF  FE9
06F36:  MOVFF  FF2,860
06F3A:  BCF    FF2.7
06F3C:  MOVLW  00
06F3E:  MOVLB  0
06F40:  CALL   07D8
06F44:  TBLRD*-
06F46:  TBLRD*+
06F48:  MOVF   FF5,W
06F4A:  MOVWF  FEE
06F4C:  IORLW  00
06F4E:  BNZ   6F46
06F50:  MOVLB  8
06F52:  BTFSC  x60.7
06F54:  BSF    FF2.7
....................       displayMenu(Menus.Letra,30,0,1,2);      
06F56:  MOVLW  08
06F58:  MOVWF  x68
06F5A:  MOVLW  40
06F5C:  MOVWF  x67
06F5E:  MOVLW  1E
06F60:  MOVWF  x69
06F62:  CLRF   x6A
06F64:  MOVLW  01
06F66:  MOVWF  x6B
06F68:  MOVLW  02
06F6A:  MOVWF  x6C
06F6C:  MOVLB  0
06F6E:  CALL   1A3E
....................        
....................       if(UP)//Si oprime hacia arriba 
06F72:  BSF    F92.5
06F74:  BTFSC  F80.5
06F76:  BRA    705A
....................       { 
....................          Buzz_on;delay_ms(10);Buzz_off; 
06F78:  BSF    F8B.4
06F7A:  BCF    F94.4
06F7C:  MOVLW  0A
06F7E:  MOVLB  8
06F80:  MOVWF  x68
06F82:  MOVLB  0
06F84:  CALL   1390
06F88:  BCF    F8B.4
06F8A:  BCF    F94.4
....................          delay_ms(200); 
06F8C:  MOVLW  C8
06F8E:  MOVLB  8
06F90:  MOVWF  x68
06F92:  MOVLB  0
06F94:  CALL   1390
....................          for(i=1;i<=4;i++) 
06F98:  MOVLW  01
06F9A:  MOVLB  5
06F9C:  MOVWF  x9D
06F9E:  MOVF   x9D,W
06FA0:  SUBLW  04
06FA2:  BNC   7058
....................          { 
....................             if(unidad==i) 
06FA4:  MOVF   x9D,W
06FA6:  SUBWF  x9C,W
06FA8:  BNZ   7020
....................             { 
....................                Contrasena[i-1]++; 
06FAA:  MOVLW  01
06FAC:  SUBWF  x9D,W
06FAE:  CLRF   03
06FB0:  ADDLW  E8
06FB2:  MOVWF  FE9
06FB4:  MOVLW  05
06FB6:  ADDWFC 03,W
06FB8:  MOVWF  FEA
06FBA:  INCF   FEF,F
....................                if(Contrasena[i-1]>9)    
06FBC:  MOVLW  01
06FBE:  SUBWF  x9D,W
06FC0:  CLRF   03
06FC2:  ADDLW  E8
06FC4:  MOVWF  FE9
06FC6:  MOVLW  05
06FC8:  ADDWFC 03,W
06FCA:  MOVWF  FEA
06FCC:  BTFSC  FEF.7
06FCE:  BRA    6FE8
06FD0:  MOVF   FEF,W
06FD2:  SUBLW  09
06FD4:  BC    6FE8
....................                { 
....................                   Contrasena[i-1]=0; 
06FD6:  MOVLW  01
06FD8:  SUBWF  x9D,W
06FDA:  CLRF   03
06FDC:  ADDLW  E8
06FDE:  MOVWF  FE9
06FE0:  MOVLW  05
06FE2:  ADDWFC 03,W
06FE4:  MOVWF  FEA
06FE6:  CLRF   FEF
....................                } 
....................                displayContrasena(Contrasena[i-1],i*20,30,1); 
06FE8:  MOVLW  01
06FEA:  SUBWF  x9D,W
06FEC:  CLRF   03
06FEE:  ADDLW  E8
06FF0:  MOVWF  FE9
06FF2:  MOVLW  05
06FF4:  ADDWFC 03,W
06FF6:  MOVWF  FEA
06FF8:  MOVFF  FEF,860
06FFC:  MOVF   x9D,W
06FFE:  MULLW  14
07000:  MOVFF  FF3,861
07004:  MOVLB  8
07006:  MOVFF  860,869
0700A:  MOVFF  861,86A
0700E:  MOVLW  1E
07010:  MOVWF  x6B
07012:  MOVLW  01
07014:  MOVWF  x6C
07016:  MOVLB  0
07018:  CALL   1C90
....................             } 
....................             else 
0701C:  BRA    7052
0701E:  MOVLB  5
....................             { 
....................                displayContrasena(Contrasena[i-1],i*20,30,0); 
07020:  MOVLW  01
07022:  SUBWF  x9D,W
07024:  CLRF   03
07026:  ADDLW  E8
07028:  MOVWF  FE9
0702A:  MOVLW  05
0702C:  ADDWFC 03,W
0702E:  MOVWF  FEA
07030:  MOVFF  FEF,860
07034:  MOVF   x9D,W
07036:  MULLW  14
07038:  MOVFF  FF3,861
0703C:  MOVLB  8
0703E:  MOVFF  860,869
07042:  MOVFF  861,86A
07046:  MOVLW  1E
07048:  MOVWF  x6B
0704A:  CLRF   x6C
0704C:  MOVLB  0
0704E:  CALL   1C90
....................             } 
....................          } 
07052:  MOVLB  5
07054:  INCF   x9D,F
07056:  BRA    6F9E
07058:  MOVLB  0
....................       } 
....................              
....................       if(DOWN)//Si oprime hacia abajo 
0705A:  BSF    F96.0
0705C:  BTFSC  F84.0
0705E:  BRA    7140
....................       { 
....................          Buzz_on;delay_ms(10);Buzz_off; 
07060:  BSF    F8B.4
07062:  BCF    F94.4
07064:  MOVLW  0A
07066:  MOVLB  8
07068:  MOVWF  x68
0706A:  MOVLB  0
0706C:  CALL   1390
07070:  BCF    F8B.4
07072:  BCF    F94.4
....................          delay_ms(200); 
07074:  MOVLW  C8
07076:  MOVLB  8
07078:  MOVWF  x68
0707A:  MOVLB  0
0707C:  CALL   1390
....................          for(i=1;i<=4;i++) 
07080:  MOVLW  01
07082:  MOVLB  5
07084:  MOVWF  x9D
07086:  MOVF   x9D,W
07088:  SUBLW  04
0708A:  BNC   713E
....................          { 
....................             if(unidad==i) 
0708C:  MOVF   x9D,W
0708E:  SUBWF  x9C,W
07090:  BNZ   7106
....................             { 
....................                Contrasena[i-1]--; 
07092:  MOVLW  01
07094:  SUBWF  x9D,W
07096:  CLRF   03
07098:  ADDLW  E8
0709A:  MOVWF  FE9
0709C:  MOVLW  05
0709E:  ADDWFC 03,W
070A0:  MOVWF  FEA
070A2:  DECF   FEF,F
....................                if(Contrasena[i-1]<0) 
070A4:  MOVLW  01
070A6:  SUBWF  x9D,W
070A8:  CLRF   03
070AA:  ADDLW  E8
070AC:  MOVWF  FE9
070AE:  MOVLW  05
070B0:  ADDWFC 03,W
070B2:  MOVWF  FEA
070B4:  BTFSC  FEF.7
070B6:  BRA    70BA
070B8:  BRA    70CE
....................                   {Contrasena[i-1]=9;} 
070BA:  MOVLW  01
070BC:  SUBWF  x9D,W
070BE:  CLRF   03
070C0:  ADDLW  E8
070C2:  MOVWF  FE9
070C4:  MOVLW  05
070C6:  ADDWFC 03,W
070C8:  MOVWF  FEA
070CA:  MOVLW  09
070CC:  MOVWF  FEF
....................                displayContrasena(Contrasena[i-1],i*20,30,1);} 
070CE:  MOVLW  01
070D0:  SUBWF  x9D,W
070D2:  CLRF   03
070D4:  ADDLW  E8
070D6:  MOVWF  FE9
070D8:  MOVLW  05
070DA:  ADDWFC 03,W
070DC:  MOVWF  FEA
070DE:  MOVFF  FEF,860
070E2:  MOVF   x9D,W
070E4:  MULLW  14
070E6:  MOVFF  FF3,861
070EA:  MOVLB  8
070EC:  MOVFF  860,869
070F0:  MOVFF  861,86A
070F4:  MOVLW  1E
070F6:  MOVWF  x6B
070F8:  MOVLW  01
070FA:  MOVWF  x6C
070FC:  MOVLB  0
070FE:  CALL   1C90
....................             else 
07102:  BRA    7138
07104:  MOVLB  5
....................             {displayContrasena(Contrasena[i-1],i*20,30,0);} 
07106:  MOVLW  01
07108:  SUBWF  x9D,W
0710A:  CLRF   03
0710C:  ADDLW  E8
0710E:  MOVWF  FE9
07110:  MOVLW  05
07112:  ADDWFC 03,W
07114:  MOVWF  FEA
07116:  MOVFF  FEF,860
0711A:  MOVF   x9D,W
0711C:  MULLW  14
0711E:  MOVFF  FF3,861
07122:  MOVLB  8
07124:  MOVFF  860,869
07128:  MOVFF  861,86A
0712C:  MOVLW  1E
0712E:  MOVWF  x6B
07130:  CLRF   x6C
07132:  MOVLB  0
07134:  CALL   1C90
....................          }         
07138:  MOVLB  5
0713A:  INCF   x9D,F
0713C:  BRA    7086
0713E:  MOVLB  0
....................       } 
....................              
....................       if(RIGHT)//Si oprime RIGHT 
07140:  BSF    F96.1
07142:  BTFSC  F84.1
07144:  BRA    71EA
....................       { 
....................          Buzz_on;delay_ms(10);Buzz_off; 
07146:  BSF    F8B.4
07148:  BCF    F94.4
0714A:  MOVLW  0A
0714C:  MOVLB  8
0714E:  MOVWF  x68
07150:  MOVLB  0
07152:  CALL   1390
07156:  BCF    F8B.4
07158:  BCF    F94.4
....................          delay_ms(200);unidad++; 
0715A:  MOVLW  C8
0715C:  MOVLB  8
0715E:  MOVWF  x68
07160:  MOVLB  0
07162:  CALL   1390
07166:  MOVLB  5
07168:  INCF   x9C,F
....................          for(i=1;i<=4;i++) 
0716A:  MOVLW  01
0716C:  MOVWF  x9D
0716E:  MOVF   x9D,W
07170:  SUBLW  04
07172:  BNC   71EA
....................          { 
....................             if(unidad==i) 
07174:  MOVF   x9D,W
07176:  SUBWF  x9C,W
07178:  BNZ   71B2
....................             {displayContrasena(Contrasena[i-1],i*20,30,1);} 
0717A:  MOVLW  01
0717C:  SUBWF  x9D,W
0717E:  CLRF   03
07180:  ADDLW  E8
07182:  MOVWF  FE9
07184:  MOVLW  05
07186:  ADDWFC 03,W
07188:  MOVWF  FEA
0718A:  MOVFF  FEF,860
0718E:  MOVF   x9D,W
07190:  MULLW  14
07192:  MOVFF  FF3,861
07196:  MOVLB  8
07198:  MOVFF  860,869
0719C:  MOVFF  861,86A
071A0:  MOVLW  1E
071A2:  MOVWF  x6B
071A4:  MOVLW  01
071A6:  MOVWF  x6C
071A8:  MOVLB  0
071AA:  CALL   1C90
....................             else 
071AE:  BRA    71E4
071B0:  MOVLB  5
....................             {displayContrasena(Contrasena[i-1],i*20,30,0);} 
071B2:  MOVLW  01
071B4:  SUBWF  x9D,W
071B6:  CLRF   03
071B8:  ADDLW  E8
071BA:  MOVWF  FE9
071BC:  MOVLW  05
071BE:  ADDWFC 03,W
071C0:  MOVWF  FEA
071C2:  MOVFF  FEF,860
071C6:  MOVF   x9D,W
071C8:  MULLW  14
071CA:  MOVFF  FF3,861
071CE:  MOVLB  8
071D0:  MOVFF  860,869
071D4:  MOVFF  861,86A
071D8:  MOVLW  1E
071DA:  MOVWF  x6B
071DC:  CLRF   x6C
071DE:  MOVLB  0
071E0:  CALL   1C90
....................          } 
071E4:  MOVLB  5
071E6:  INCF   x9D,F
071E8:  BRA    716E
....................       } 
....................      
....................       if(unidad>4) 
071EA:  MOVLB  5
071EC:  MOVF   x9C,W
071EE:  SUBLW  04
071F0:  BTFSC  FD8.0
071F2:  BRA    74F6
....................       {glcd_fillScreen(OFF);unidad=4; 
071F4:  MOVLB  8
071F6:  CLRF   x67
071F8:  MOVLB  0
071FA:  CALL   1410
071FE:  MOVLW  04
07200:  MOVLB  5
07202:  MOVWF  x9C
....................          if(Contrasena[0]==3&&Contrasena[1]==8&&Contrasena[2]==9&&Contrasena[3]==2) // Si Ingresa clave para reset general del sistema. 
07204:  MOVF   xE8,W
07206:  SUBLW  03
07208:  BTFSS  FD8.2
0720A:  BRA    7304
0720C:  MOVF   xE9,W
0720E:  SUBLW  08
07210:  BTFSS  FD8.2
07212:  BRA    7304
07214:  MOVF   xEA,W
07216:  SUBLW  09
07218:  BNZ   7304
0721A:  MOVF   xEB,W
0721C:  SUBLW  02
0721E:  BNZ   7304
....................             {write_eeprom(460,0);delay_ms(20);write_eeprom(461,0);delay_ms(20);// Reestablece a contraseña de Fabrica y reinicia Programa. 
07220:  MOVLW  01
07222:  MOVWF  FAA
07224:  MOVLW  CC
07226:  MOVWF  FA9
07228:  CLRF   FA8
0722A:  BCF    FA6.6
0722C:  BCF    FA6.7
0722E:  BSF    FA6.2
07230:  MOVF   FF2,W
07232:  MOVWF  00
07234:  BCF    FF2.7
07236:  MOVLB  F
07238:  MOVLW  55
0723A:  MOVWF  FA7
0723C:  MOVLW  AA
0723E:  MOVWF  FA7
07240:  BSF    FA6.1
07242:  BTFSC  FA6.1
07244:  BRA    7242
07246:  BCF    FA6.2
07248:  MOVF   00,W
0724A:  IORWF  FF2,F
0724C:  MOVLW  14
0724E:  MOVLB  8
07250:  MOVWF  x68
07252:  MOVLB  0
07254:  CALL   1390
07258:  MOVLW  01
0725A:  MOVWF  FAA
0725C:  MOVLW  CD
0725E:  MOVWF  FA9
07260:  CLRF   FA8
07262:  BCF    FA6.6
07264:  BCF    FA6.7
07266:  BSF    FA6.2
07268:  MOVF   FF2,W
0726A:  MOVWF  00
0726C:  BCF    FF2.7
0726E:  MOVLB  F
07270:  MOVLW  55
07272:  MOVWF  FA7
07274:  MOVLW  AA
07276:  MOVWF  FA7
07278:  BSF    FA6.1
0727A:  BTFSC  FA6.1
0727C:  BRA    727A
0727E:  BCF    FA6.2
07280:  MOVF   00,W
07282:  IORWF  FF2,F
07284:  MOVLW  14
07286:  MOVLB  8
07288:  MOVWF  x68
0728A:  MOVLB  0
0728C:  CALL   1390
....................              write_eeprom(462,0);delay_ms(20);write_eeprom(463,0);delay_ms(20); 
07290:  MOVLW  01
07292:  MOVWF  FAA
07294:  MOVLW  CE
07296:  MOVWF  FA9
07298:  CLRF   FA8
0729A:  BCF    FA6.6
0729C:  BCF    FA6.7
0729E:  BSF    FA6.2
072A0:  MOVF   FF2,W
072A2:  MOVWF  00
072A4:  BCF    FF2.7
072A6:  MOVLB  F
072A8:  MOVLW  55
072AA:  MOVWF  FA7
072AC:  MOVLW  AA
072AE:  MOVWF  FA7
072B0:  BSF    FA6.1
072B2:  BTFSC  FA6.1
072B4:  BRA    72B2
072B6:  BCF    FA6.2
072B8:  MOVF   00,W
072BA:  IORWF  FF2,F
072BC:  MOVLW  14
072BE:  MOVLB  8
072C0:  MOVWF  x68
072C2:  MOVLB  0
072C4:  CALL   1390
072C8:  MOVLW  01
072CA:  MOVWF  FAA
072CC:  MOVLW  CF
072CE:  MOVWF  FA9
072D0:  CLRF   FA8
072D2:  BCF    FA6.6
072D4:  BCF    FA6.7
072D6:  BSF    FA6.2
072D8:  MOVF   FF2,W
072DA:  MOVWF  00
072DC:  BCF    FF2.7
072DE:  MOVLB  F
072E0:  MOVLW  55
072E2:  MOVWF  FA7
072E4:  MOVLW  AA
072E6:  MOVWF  FA7
072E8:  BSF    FA6.1
072EA:  BTFSC  FA6.1
072EC:  BRA    72EA
072EE:  BCF    FA6.2
072F0:  MOVF   00,W
072F2:  IORWF  FF2,F
072F4:  MOVLW  14
072F6:  MOVLB  8
072F8:  MOVWF  x68
072FA:  MOVLB  0
072FC:  CALL   1390
....................              reset_cpu();}         
07300:  RESET
07302:  MOVLB  5
....................           
....................          if((Contrasena[0]==Password[0])&&(Contrasena[1]==Password[1])&&(Contrasena[2]==Password[2])&&(Contrasena[3]==Password[3])) 
07304:  MOVF   xEC,W
07306:  SUBWF  xE8,W
07308:  BNZ   73DA
0730A:  MOVF   xED,W
0730C:  SUBWF  xE9,W
0730E:  BNZ   73DA
07310:  MOVF   xEE,W
07312:  SUBWF  xEA,W
07314:  BNZ   73DA
07316:  MOVF   xEF,W
07318:  SUBWF  xEB,W
0731A:  BNZ   73DA
....................          { 
....................             glcd_fillScreen(OFF); 
0731C:  MOVLB  8
0731E:  CLRF   x67
07320:  MOVLB  0
07322:  CALL   1410
....................             strcpy(Menus.Letra,"Clave"); 
07326:  MOVLW  08
07328:  MOVWF  FEA
0732A:  MOVLW  40
0732C:  MOVWF  FE9
0732E:  MOVFF  FF2,860
07332:  BCF    FF2.7
07334:  MOVLW  00
07336:  CALL   07D8
0733A:  TBLRD*-
0733C:  TBLRD*+
0733E:  MOVF   FF5,W
07340:  MOVWF  FEE
07342:  IORLW  00
07344:  BNZ   733C
07346:  MOVLB  8
07348:  BTFSC  x60.7
0734A:  BSF    FF2.7
....................             displayMenu(Menus.Letra,30,0,0,2); 
0734C:  MOVLW  08
0734E:  MOVWF  x68
07350:  MOVLW  40
07352:  MOVWF  x67
07354:  MOVLW  1E
07356:  MOVWF  x69
07358:  CLRF   x6A
0735A:  CLRF   x6B
0735C:  MOVLW  02
0735E:  MOVWF  x6C
07360:  MOVLB  0
07362:  CALL   1A3E
....................             strcpy(Menus.Letra,"Correcta"); 
07366:  MOVLW  08
07368:  MOVWF  FEA
0736A:  MOVLW  40
0736C:  MOVWF  FE9
0736E:  MOVFF  FF2,860
07372:  BCF    FF2.7
07374:  MOVLW  00
07376:  CALL   07FC
0737A:  TBLRD*-
0737C:  TBLRD*+
0737E:  MOVF   FF5,W
07380:  MOVWF  FEE
07382:  IORLW  00
07384:  BNZ   737C
07386:  MOVLB  8
07388:  BTFSC  x60.7
0738A:  BSF    FF2.7
....................             displayMenu(Menus.Letra,15,30,0,2); 
0738C:  MOVLW  08
0738E:  MOVWF  x68
07390:  MOVLW  40
07392:  MOVWF  x67
07394:  MOVLW  0F
07396:  MOVWF  x69
07398:  MOVLW  1E
0739A:  MOVWF  x6A
0739C:  CLRF   x6B
0739E:  MOVLW  02
073A0:  MOVWF  x6C
073A2:  MOVLB  0
073A4:  CALL   1A3E
....................             Menu=1;glcd_update();delay_ms(1000); 
073A8:  MOVLW  01
073AA:  MOVLB  5
073AC:  MOVWF  x9B
073AE:  MOVLB  0
073B0:  CALL   146A
073B4:  MOVLW  04
073B6:  MOVLB  8
073B8:  MOVWF  x60
073BA:  MOVLW  FA
073BC:  MOVWF  x68
073BE:  MOVLB  0
073C0:  CALL   1390
073C4:  MOVLB  8
073C6:  DECFSZ x60,F
073C8:  BRA    73BA
....................             glcd_fillScreen(OFF);unidad=1; 
073CA:  CLRF   x67
073CC:  MOVLB  0
073CE:  CALL   1410
073D2:  MOVLW  01
073D4:  MOVLB  5
073D6:  MOVWF  x9C
....................          }// Esta parte se puede agregar en el Menu 1 dependiendo de la ubicación del vidrio. 
....................          else 
073D8:  BRA    74F6
....................          { 
....................             glcd_fillScreen(OFF); 
073DA:  MOVLB  8
073DC:  CLRF   x67
073DE:  MOVLB  0
073E0:  CALL   1410
....................             strcpy(Menus.Letra,"Clave"); 
073E4:  MOVLW  08
073E6:  MOVWF  FEA
073E8:  MOVLW  40
073EA:  MOVWF  FE9
073EC:  MOVFF  FF2,860
073F0:  BCF    FF2.7
073F2:  MOVLW  00
073F4:  CALL   07D8
073F8:  TBLRD*-
073FA:  TBLRD*+
073FC:  MOVF   FF5,W
073FE:  MOVWF  FEE
07400:  IORLW  00
07402:  BNZ   73FA
07404:  MOVLB  8
07406:  BTFSC  x60.7
07408:  BSF    FF2.7
....................             displayMenu(Menus.Letra,30,0,0,2); 
0740A:  MOVLW  08
0740C:  MOVWF  x68
0740E:  MOVLW  40
07410:  MOVWF  x67
07412:  MOVLW  1E
07414:  MOVWF  x69
07416:  CLRF   x6A
07418:  CLRF   x6B
0741A:  MOVLW  02
0741C:  MOVWF  x6C
0741E:  MOVLB  0
07420:  CALL   1A3E
....................             strcpy(Menus.Letra,"Incorrecta"); 
07424:  MOVLW  08
07426:  MOVWF  FEA
07428:  MOVLW  40
0742A:  MOVWF  FE9
0742C:  MOVFF  FF2,860
07430:  BCF    FF2.7
07432:  MOVLW  00
07434:  CALL   0824
07438:  TBLRD*-
0743A:  TBLRD*+
0743C:  MOVF   FF5,W
0743E:  MOVWF  FEE
07440:  IORLW  00
07442:  BNZ   743A
07444:  MOVLB  8
07446:  BTFSC  x60.7
07448:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,30,0,2); 
0744A:  MOVLW  08
0744C:  MOVWF  x68
0744E:  MOVLW  40
07450:  MOVWF  x67
07452:  CLRF   x69
07454:  MOVLW  1E
07456:  MOVWF  x6A
07458:  CLRF   x6B
0745A:  MOVLW  02
0745C:  MOVWF  x6C
0745E:  MOVLB  0
07460:  CALL   1A3E
....................             Menu=0;glcd_update();delay_ms(1000); 
07464:  MOVLB  5
07466:  CLRF   x9B
07468:  MOVLB  0
0746A:  CALL   146A
0746E:  MOVLW  04
07470:  MOVLB  8
07472:  MOVWF  x60
07474:  MOVLW  FA
07476:  MOVWF  x68
07478:  MOVLB  0
0747A:  CALL   1390
0747E:  MOVLB  8
07480:  DECFSZ x60,F
07482:  BRA    7474
....................             glcd_fillScreen(OFF);unidad=1; 
07484:  CLRF   x67
07486:  MOVLB  0
07488:  CALL   1410
0748C:  MOVLW  01
0748E:  MOVLB  5
07490:  MOVWF  x9C
....................             Contrasena[0]=0;Contrasena[1]=0;Contrasena[2]=0;Contrasena[3]=0; 
07492:  CLRF   xE8
07494:  CLRF   xE9
07496:  CLRF   xEA
07498:  CLRF   xEB
....................             displayContrasena(Contrasena[0],20,30,1); 
0749A:  MOVFF  5E8,869
0749E:  MOVLW  14
074A0:  MOVLB  8
074A2:  MOVWF  x6A
074A4:  MOVLW  1E
074A6:  MOVWF  x6B
074A8:  MOVLW  01
074AA:  MOVWF  x6C
074AC:  MOVLB  0
074AE:  CALL   1C90
....................             displayContrasena(Contrasena[1],40,30,0); 
074B2:  MOVFF  5E9,869
074B6:  MOVLW  28
074B8:  MOVLB  8
074BA:  MOVWF  x6A
074BC:  MOVLW  1E
074BE:  MOVWF  x6B
074C0:  CLRF   x6C
074C2:  MOVLB  0
074C4:  CALL   1C90
....................             displayContrasena(Contrasena[2],60,30,0); 
074C8:  MOVFF  5EA,869
074CC:  MOVLW  3C
074CE:  MOVLB  8
074D0:  MOVWF  x6A
074D2:  MOVLW  1E
074D4:  MOVWF  x6B
074D6:  CLRF   x6C
074D8:  MOVLB  0
074DA:  CALL   1C90
....................             displayContrasena(Contrasena[3],80,30,0); 
074DE:  MOVFF  5EB,869
074E2:  MOVLW  50
074E4:  MOVLB  8
074E6:  MOVWF  x6A
074E8:  MOVLW  1E
074EA:  MOVWF  x6B
074EC:  CLRF   x6C
074EE:  MOVLB  0
074F0:  CALL   1C90
074F4:  MOVLB  5
....................          } 
....................       } 
....................     } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------        
....................  
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................       if(Menu==1){ //Menu Principal.       
074F6:  DECFSZ x9B,W
074F8:  BRA    7900
....................        
....................          if(Opcion>5) 
074FA:  MOVF   xA2,W
074FC:  SUBLW  05
074FE:  BC    7504
....................          {Opcion=1;} 
07500:  MOVLW  01
07502:  MOVWF  xA2
....................          if(Opcion<1) 
07504:  MOVF   xA2,F
07506:  BNZ   750C
....................          {Opcion=5;} 
07508:  MOVLW  05
0750A:  MOVWF  xA2
....................           
....................          strcpy(Menus.Letra,"Menu"); 
0750C:  MOVLW  08
0750E:  MOVWF  FEA
07510:  MOVLW  40
07512:  MOVWF  FE9
07514:  MOVFF  FF2,860
07518:  BCF    FF2.7
0751A:  MOVLW  00
0751C:  MOVLB  0
0751E:  CALL   08FE
07522:  TBLRD*-
07524:  TBLRD*+
07526:  MOVF   FF5,W
07528:  MOVWF  FEE
0752A:  IORLW  00
0752C:  BNZ   7524
0752E:  MOVLB  8
07530:  BTFSC  x60.7
07532:  BSF    FF2.7
....................          displayMenu(Menus.Letra,30,0,1,2); 
07534:  MOVLW  08
07536:  MOVWF  x68
07538:  MOVLW  40
0753A:  MOVWF  x67
0753C:  MOVLW  1E
0753E:  MOVWF  x69
07540:  CLRF   x6A
07542:  MOVLW  01
07544:  MOVWF  x6B
07546:  MOVLW  02
07548:  MOVWF  x6C
0754A:  MOVLB  0
0754C:  CALL   1A3E
....................        
....................          if(Opcion==1)    
07550:  MOVLB  5
07552:  DECFSZ xA2,W
07554:  BRA    759C
....................             {strcpy(Menus.Letra,"Iniciar Programa"); 
07556:  MOVLW  08
07558:  MOVWF  FEA
0755A:  MOVLW  40
0755C:  MOVWF  FE9
0755E:  MOVFF  FF2,860
07562:  BCF    FF2.7
07564:  MOVLW  00
07566:  MOVLB  0
07568:  CALL   0922
0756C:  TBLRD*-
0756E:  TBLRD*+
07570:  MOVF   FF5,W
07572:  MOVWF  FEE
07574:  IORLW  00
07576:  BNZ   756E
07578:  MOVLB  8
0757A:  BTFSC  x60.7
0757C:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,18,1,1);} 
0757E:  MOVLW  08
07580:  MOVWF  x68
07582:  MOVLW  40
07584:  MOVWF  x67
07586:  CLRF   x69
07588:  MOVLW  12
0758A:  MOVWF  x6A
0758C:  MOVLW  01
0758E:  MOVWF  x6B
07590:  MOVWF  x6C
07592:  MOVLB  0
07594:  CALL   1A3E
....................          else 
07598:  BRA    75DE
0759A:  MOVLB  5
....................             {strcpy(Menus.Letra,"Iniciar Programa"); 
0759C:  MOVLW  08
0759E:  MOVWF  FEA
075A0:  MOVLW  40
075A2:  MOVWF  FE9
075A4:  MOVFF  FF2,860
075A8:  BCF    FF2.7
075AA:  MOVLW  00
075AC:  MOVLB  0
075AE:  CALL   0922
075B2:  TBLRD*-
075B4:  TBLRD*+
075B6:  MOVF   FF5,W
075B8:  MOVWF  FEE
075BA:  IORLW  00
075BC:  BNZ   75B4
075BE:  MOVLB  8
075C0:  BTFSC  x60.7
075C2:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,18,0,1);} 
075C4:  MOVLW  08
075C6:  MOVWF  x68
075C8:  MOVLW  40
075CA:  MOVWF  x67
075CC:  CLRF   x69
075CE:  MOVLW  12
075D0:  MOVWF  x6A
075D2:  CLRF   x6B
075D4:  MOVLW  01
075D6:  MOVWF  x6C
075D8:  MOVLB  0
075DA:  CALL   1A3E
....................           
....................          if(Opcion==2)    
075DE:  MOVLB  5
075E0:  MOVF   xA2,W
075E2:  SUBLW  02
075E4:  BNZ   762C
....................             {strcpy(Menus.Letra,"Editar Programa"); 
075E6:  MOVLW  08
075E8:  MOVWF  FEA
075EA:  MOVLW  40
075EC:  MOVWF  FE9
075EE:  MOVFF  FF2,860
075F2:  BCF    FF2.7
075F4:  MOVLW  00
075F6:  MOVLB  0
075F8:  CALL   0952
075FC:  TBLRD*-
075FE:  TBLRD*+
07600:  MOVF   FF5,W
07602:  MOVWF  FEE
07604:  IORLW  00
07606:  BNZ   75FE
07608:  MOVLB  8
0760A:  BTFSC  x60.7
0760C:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,27,1,1);} 
0760E:  MOVLW  08
07610:  MOVWF  x68
07612:  MOVLW  40
07614:  MOVWF  x67
07616:  CLRF   x69
07618:  MOVLW  1B
0761A:  MOVWF  x6A
0761C:  MOVLW  01
0761E:  MOVWF  x6B
07620:  MOVWF  x6C
07622:  MOVLB  0
07624:  CALL   1A3E
....................          else 
07628:  BRA    766E
0762A:  MOVLB  5
....................             {strcpy(Menus.Letra,"Editar Programa"); 
0762C:  MOVLW  08
0762E:  MOVWF  FEA
07630:  MOVLW  40
07632:  MOVWF  FE9
07634:  MOVFF  FF2,860
07638:  BCF    FF2.7
0763A:  MOVLW  00
0763C:  MOVLB  0
0763E:  CALL   0952
07642:  TBLRD*-
07644:  TBLRD*+
07646:  MOVF   FF5,W
07648:  MOVWF  FEE
0764A:  IORLW  00
0764C:  BNZ   7644
0764E:  MOVLB  8
07650:  BTFSC  x60.7
07652:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,27,0,1);} 
07654:  MOVLW  08
07656:  MOVWF  x68
07658:  MOVLW  40
0765A:  MOVWF  x67
0765C:  CLRF   x69
0765E:  MOVLW  1B
07660:  MOVWF  x6A
07662:  CLRF   x6B
07664:  MOVLW  01
07666:  MOVWF  x6C
07668:  MOVLB  0
0766A:  CALL   1A3E
....................              
....................          if(Opcion==3)    
0766E:  MOVLB  5
07670:  MOVF   xA2,W
07672:  SUBLW  03
07674:  BNZ   76BC
....................             {strcpy(Menus.Letra,"Borrar Programa"); 
07676:  MOVLW  08
07678:  MOVWF  FEA
0767A:  MOVLW  40
0767C:  MOVWF  FE9
0767E:  MOVFF  FF2,860
07682:  BCF    FF2.7
07684:  MOVLW  00
07686:  MOVLB  0
07688:  CALL   0980
0768C:  TBLRD*-
0768E:  TBLRD*+
07690:  MOVF   FF5,W
07692:  MOVWF  FEE
07694:  IORLW  00
07696:  BNZ   768E
07698:  MOVLB  8
0769A:  BTFSC  x60.7
0769C:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,36,1,1);} 
0769E:  MOVLW  08
076A0:  MOVWF  x68
076A2:  MOVLW  40
076A4:  MOVWF  x67
076A6:  CLRF   x69
076A8:  MOVLW  24
076AA:  MOVWF  x6A
076AC:  MOVLW  01
076AE:  MOVWF  x6B
076B0:  MOVWF  x6C
076B2:  MOVLB  0
076B4:  CALL   1A3E
....................          else 
076B8:  BRA    76FE
076BA:  MOVLB  5
....................             {strcpy(Menus.Letra,"Borrar Programa"); 
076BC:  MOVLW  08
076BE:  MOVWF  FEA
076C0:  MOVLW  40
076C2:  MOVWF  FE9
076C4:  MOVFF  FF2,860
076C8:  BCF    FF2.7
076CA:  MOVLW  00
076CC:  MOVLB  0
076CE:  CALL   0980
076D2:  TBLRD*-
076D4:  TBLRD*+
076D6:  MOVF   FF5,W
076D8:  MOVWF  FEE
076DA:  IORLW  00
076DC:  BNZ   76D4
076DE:  MOVLB  8
076E0:  BTFSC  x60.7
076E2:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,36,0,1);}    
076E4:  MOVLW  08
076E6:  MOVWF  x68
076E8:  MOVLW  40
076EA:  MOVWF  x67
076EC:  CLRF   x69
076EE:  MOVLW  24
076F0:  MOVWF  x6A
076F2:  CLRF   x6B
076F4:  MOVLW  01
076F6:  MOVWF  x6C
076F8:  MOVLB  0
076FA:  CALL   1A3E
....................                          
....................          if(Opcion==4)    
076FE:  MOVLB  5
07700:  MOVF   xA2,W
07702:  SUBLW  04
07704:  BNZ   774C
....................             {strcpy(Menus.Letra,"Ajustes"); 
07706:  MOVLW  08
07708:  MOVWF  FEA
0770A:  MOVLW  40
0770C:  MOVWF  FE9
0770E:  MOVFF  FF2,860
07712:  BCF    FF2.7
07714:  MOVLW  00
07716:  MOVLB  0
07718:  CALL   09AE
0771C:  TBLRD*-
0771E:  TBLRD*+
07720:  MOVF   FF5,W
07722:  MOVWF  FEE
07724:  IORLW  00
07726:  BNZ   771E
07728:  MOVLB  8
0772A:  BTFSC  x60.7
0772C:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,45,1,1);} 
0772E:  MOVLW  08
07730:  MOVWF  x68
07732:  MOVLW  40
07734:  MOVWF  x67
07736:  CLRF   x69
07738:  MOVLW  2D
0773A:  MOVWF  x6A
0773C:  MOVLW  01
0773E:  MOVWF  x6B
07740:  MOVWF  x6C
07742:  MOVLB  0
07744:  CALL   1A3E
....................          else 
07748:  BRA    778E
0774A:  MOVLB  5
....................             {strcpy(Menus.Letra,"Ajustes"); 
0774C:  MOVLW  08
0774E:  MOVWF  FEA
07750:  MOVLW  40
07752:  MOVWF  FE9
07754:  MOVFF  FF2,860
07758:  BCF    FF2.7
0775A:  MOVLW  00
0775C:  MOVLB  0
0775E:  CALL   09AE
07762:  TBLRD*-
07764:  TBLRD*+
07766:  MOVF   FF5,W
07768:  MOVWF  FEE
0776A:  IORLW  00
0776C:  BNZ   7764
0776E:  MOVLB  8
07770:  BTFSC  x60.7
07772:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,45,0,1);}      
07774:  MOVLW  08
07776:  MOVWF  x68
07778:  MOVLW  40
0777A:  MOVWF  x67
0777C:  CLRF   x69
0777E:  MOVLW  2D
07780:  MOVWF  x6A
07782:  CLRF   x6B
07784:  MOVLW  01
07786:  MOVWF  x6C
07788:  MOVLB  0
0778A:  CALL   1A3E
....................           
....................          if(Opcion==5)    
0778E:  MOVLB  5
07790:  MOVF   xA2,W
07792:  SUBLW  05
07794:  BNZ   77DC
....................             {strcpy(Menus.Letra,"Cambio Clave"); 
07796:  MOVLW  08
07798:  MOVWF  FEA
0779A:  MOVLW  40
0779C:  MOVWF  FE9
0779E:  MOVFF  FF2,860
077A2:  BCF    FF2.7
077A4:  MOVLW  00
077A6:  MOVLB  0
077A8:  CALL   09D4
077AC:  TBLRD*-
077AE:  TBLRD*+
077B0:  MOVF   FF5,W
077B2:  MOVWF  FEE
077B4:  IORLW  00
077B6:  BNZ   77AE
077B8:  MOVLB  8
077BA:  BTFSC  x60.7
077BC:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,54,1,1);} 
077BE:  MOVLW  08
077C0:  MOVWF  x68
077C2:  MOVLW  40
077C4:  MOVWF  x67
077C6:  CLRF   x69
077C8:  MOVLW  36
077CA:  MOVWF  x6A
077CC:  MOVLW  01
077CE:  MOVWF  x6B
077D0:  MOVWF  x6C
077D2:  MOVLB  0
077D4:  CALL   1A3E
....................          else 
077D8:  BRA    781E
077DA:  MOVLB  5
....................             {strcpy(Menus.Letra,"Cambio Clave"); 
077DC:  MOVLW  08
077DE:  MOVWF  FEA
077E0:  MOVLW  40
077E2:  MOVWF  FE9
077E4:  MOVFF  FF2,860
077E8:  BCF    FF2.7
077EA:  MOVLW  00
077EC:  MOVLB  0
077EE:  CALL   09D4
077F2:  TBLRD*-
077F4:  TBLRD*+
077F6:  MOVF   FF5,W
077F8:  MOVWF  FEE
077FA:  IORLW  00
077FC:  BNZ   77F4
077FE:  MOVLB  8
07800:  BTFSC  x60.7
07802:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,54,0,1);}      
07804:  MOVLW  08
07806:  MOVWF  x68
07808:  MOVLW  40
0780A:  MOVWF  x67
0780C:  CLRF   x69
0780E:  MOVLW  36
07810:  MOVWF  x6A
07812:  CLRF   x6B
07814:  MOVLW  01
07816:  MOVWF  x6C
07818:  MOVLB  0
0781A:  CALL   1A3E
....................           
....................          if(UP)//Si oprime hacia arriba 
0781E:  BSF    F92.5
07820:  BTFSC  F80.5
07822:  BRA    783E
....................          { 
....................             Buzz_on;delay_ms(30);Opcion--;Buzz_off; 
07824:  BSF    F8B.4
07826:  BCF    F94.4
07828:  MOVLW  1E
0782A:  MOVLB  8
0782C:  MOVWF  x68
0782E:  MOVLB  0
07830:  CALL   1390
07834:  MOVLB  5
07836:  DECF   xA2,F
07838:  BCF    F8B.4
0783A:  BCF    F94.4
0783C:  MOVLB  0
....................          } 
....................                    
....................          if(DOWN)//Si oprime hacia abajo 
0783E:  BSF    F96.0
07840:  BTFSC  F84.0
07842:  BRA    785E
....................          { 
....................             Buzz_on;delay_ms(30);Opcion++; Buzz_off; 
07844:  BSF    F8B.4
07846:  BCF    F94.4
07848:  MOVLW  1E
0784A:  MOVLB  8
0784C:  MOVWF  x68
0784E:  MOVLB  0
07850:  CALL   1390
07854:  MOVLB  5
07856:  INCF   xA2,F
07858:  BCF    F8B.4
0785A:  BCF    F94.4
0785C:  MOVLB  0
....................          } 
....................                 
....................          if(RIGHT)//Si oprime SET 
0785E:  BSF    F96.1
07860:  BTFSC  F84.1
07862:  BRA    7902
....................          {  
....................             Buzz_on;delay_ms(50);Menu=Opcion+3;Opcion=1;glcd_fillscreen(OFF);Buzz_off; 
07864:  BSF    F8B.4
07866:  BCF    F94.4
07868:  MOVLW  32
0786A:  MOVLB  8
0786C:  MOVWF  x68
0786E:  MOVLB  0
07870:  CALL   1390
07874:  MOVLW  03
07876:  MOVLB  5
07878:  ADDWF  xA2,W
0787A:  MOVWF  x9B
0787C:  MOVLW  01
0787E:  MOVWF  xA2
07880:  MOVLB  8
07882:  CLRF   x67
07884:  MOVLB  0
07886:  CALL   1410
0788A:  BCF    F8B.4
0788C:  BCF    F94.4
....................             if(Menu==7){ 
0788E:  MOVLB  5
07890:  MOVF   x9B,W
07892:  SUBLW  07
07894:  BNZ   7900
....................                //Menu=100; 
....................             delay_ms(100); 
07896:  MOVLW  64
07898:  MOVLB  8
0789A:  MOVWF  x68
0789C:  MOVLB  0
0789E:  CALL   1390
....................             glcd_fillScreen(OFF); 
078A2:  MOVLB  8
078A4:  CLRF   x67
078A6:  MOVLB  0
078A8:  CALL   1410
....................             while(!PidePassword(1,1,100,4,4,4,4)){ 
078AC:  MOVLW  01
078AE:  MOVLB  8
078B0:  MOVWF  x60
078B2:  MOVWF  x61
078B4:  MOVLW  64
078B6:  MOVWF  x62
078B8:  MOVLW  04
078BA:  MOVWF  x63
078BC:  MOVWF  x64
078BE:  MOVWF  x65
078C0:  MOVWF  x66
078C2:  MOVLB  0
078C4:  CALL   3202
078C8:  MOVF   01,F
078CA:  BNZ   78EE
....................                PidePassword(1,1,100,4,4,4,4);glcd_update(); 
078CC:  MOVLW  01
078CE:  MOVLB  8
078D0:  MOVWF  x60
078D2:  MOVWF  x61
078D4:  MOVLW  64
078D6:  MOVWF  x62
078D8:  MOVLW  04
078DA:  MOVWF  x63
078DC:  MOVWF  x64
078DE:  MOVWF  x65
078E0:  MOVWF  x66
078E2:  MOVLB  0
078E4:  CALL   3202
078E8:  CALL   146A
....................             }             
078EC:  BRA    78AC
....................             glcd_fillScreen(OFF);Opcion=1;unidad=1; 
078EE:  MOVLB  8
078F0:  CLRF   x67
078F2:  MOVLB  0
078F4:  CALL   1410
078F8:  MOVLW  01
078FA:  MOVLB  5
078FC:  MOVWF  xA2
078FE:  MOVWF  x9C
07900:  MOVLB  0
....................           
....................        
....................             } 
....................          } 
....................        
....................  
....................    } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------        
....................  
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................       if(Menu==4){ //Menu de Continuar 
07902:  MOVLB  5
07904:  MOVF   x9B,W
07906:  SUBLW  04
07908:  BTFSS  FD8.2
0790A:  BRA    805A
....................        
....................       if(Opcion>5) 
0790C:  MOVF   xA2,W
0790E:  SUBLW  05
07910:  BC    7916
....................          Opcion=1; 
07912:  MOVLW  01
07914:  MOVWF  xA2
....................           
....................       if(Opcion<1) 
07916:  MOVF   xA2,F
07918:  BNZ   791E
....................          Opcion=5; 
0791A:  MOVLW  05
0791C:  MOVWF  xA2
....................        
....................          strcpy(Menus.Letra,"Seleccione"); 
0791E:  MOVLW  08
07920:  MOVWF  FEA
07922:  MOVLW  40
07924:  MOVWF  FE9
07926:  MOVFF  FF2,860
0792A:  BCF    FF2.7
0792C:  MOVLW  00
0792E:  MOVLB  0
07930:  CALL   0A00
07934:  TBLRD*-
07936:  TBLRD*+
07938:  MOVF   FF5,W
0793A:  MOVWF  FEE
0793C:  IORLW  00
0793E:  BNZ   7936
07940:  MOVLB  8
07942:  BTFSC  x60.7
07944:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,0,1,2); 
07946:  MOVLW  08
07948:  MOVWF  x68
0794A:  MOVLW  40
0794C:  MOVWF  x67
0794E:  CLRF   x69
07950:  CLRF   x6A
07952:  MOVLW  01
07954:  MOVWF  x6B
07956:  MOVLW  02
07958:  MOVWF  x6C
0795A:  MOVLB  0
0795C:  CALL   1A3E
....................           
....................          strcpy(Menus.Letra," Programa"); 
07960:  MOVLW  08
07962:  MOVWF  FEA
07964:  MOVLW  40
07966:  MOVWF  FE9
07968:  MOVFF  FF2,860
0796C:  BCF    FF2.7
0796E:  MOVLW  00
07970:  CALL   0A2A
07974:  TBLRD*-
07976:  TBLRD*+
07978:  MOVF   FF5,W
0797A:  MOVWF  FEE
0797C:  IORLW  00
0797E:  BNZ   7976
07980:  MOVLB  8
07982:  BTFSC  x60.7
07984:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,16,1,2); 
07986:  MOVLW  08
07988:  MOVWF  x68
0798A:  MOVLW  40
0798C:  MOVWF  x67
0798E:  CLRF   x69
07990:  MOVLW  10
07992:  MOVWF  x6A
07994:  MOVLW  01
07996:  MOVWF  x6B
07998:  MOVLW  02
0799A:  MOVWF  x6C
0799C:  MOVLB  0
0799E:  CALL   1A3E
....................            
....................           
....................          if(Opcion==1) 
079A2:  MOVLB  5
079A4:  DECFSZ xA2,W
079A6:  BRA    79EC
....................          { 
....................             strcpy(Menus.Letra,"Programa 01"); 
079A8:  MOVLW  08
079AA:  MOVWF  FEA
079AC:  MOVLW  40
079AE:  MOVWF  FE9
079B0:  MOVFF  FF2,860
079B4:  BCF    FF2.7
079B6:  MOVLW  00
079B8:  MOVLB  0
079BA:  CALL   0A52
079BE:  TBLRD*-
079C0:  TBLRD*+
079C2:  MOVF   FF5,W
079C4:  MOVWF  FEE
079C6:  IORLW  00
079C8:  BNZ   79C0
079CA:  MOVLB  8
079CC:  BTFSC  x60.7
079CE:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,38,0,2); 
079D0:  MOVLW  08
079D2:  MOVWF  x68
079D4:  MOVLW  40
079D6:  MOVWF  x67
079D8:  CLRF   x69
079DA:  MOVLW  26
079DC:  MOVWF  x6A
079DE:  CLRF   x6B
079E0:  MOVLW  02
079E2:  MOVWF  x6C
079E4:  MOVLB  0
079E6:  CALL   1A3E
079EA:  MOVLB  5
....................          } 
....................           
....................          if(Opcion==2) 
079EC:  MOVF   xA2,W
079EE:  SUBLW  02
079F0:  BNZ   7A36
....................          { 
....................             strcpy(Menus.Letra,"Programa 02"); 
079F2:  MOVLW  08
079F4:  MOVWF  FEA
079F6:  MOVLW  40
079F8:  MOVWF  FE9
079FA:  MOVFF  FF2,860
079FE:  BCF    FF2.7
07A00:  MOVLW  00
07A02:  MOVLB  0
07A04:  CALL   0A7C
07A08:  TBLRD*-
07A0A:  TBLRD*+
07A0C:  MOVF   FF5,W
07A0E:  MOVWF  FEE
07A10:  IORLW  00
07A12:  BNZ   7A0A
07A14:  MOVLB  8
07A16:  BTFSC  x60.7
07A18:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,38,0,2); 
07A1A:  MOVLW  08
07A1C:  MOVWF  x68
07A1E:  MOVLW  40
07A20:  MOVWF  x67
07A22:  CLRF   x69
07A24:  MOVLW  26
07A26:  MOVWF  x6A
07A28:  CLRF   x6B
07A2A:  MOVLW  02
07A2C:  MOVWF  x6C
07A2E:  MOVLB  0
07A30:  CALL   1A3E
07A34:  MOVLB  5
....................          } 
....................           
....................          if(Opcion==3) 
07A36:  MOVF   xA2,W
07A38:  SUBLW  03
07A3A:  BNZ   7A80
....................          { 
....................             strcpy(Menus.Letra,"Programa 03"); 
07A3C:  MOVLW  08
07A3E:  MOVWF  FEA
07A40:  MOVLW  40
07A42:  MOVWF  FE9
07A44:  MOVFF  FF2,860
07A48:  BCF    FF2.7
07A4A:  MOVLW  00
07A4C:  MOVLB  0
07A4E:  CALL   0AA6
07A52:  TBLRD*-
07A54:  TBLRD*+
07A56:  MOVF   FF5,W
07A58:  MOVWF  FEE
07A5A:  IORLW  00
07A5C:  BNZ   7A54
07A5E:  MOVLB  8
07A60:  BTFSC  x60.7
07A62:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,38,0,2); 
07A64:  MOVLW  08
07A66:  MOVWF  x68
07A68:  MOVLW  40
07A6A:  MOVWF  x67
07A6C:  CLRF   x69
07A6E:  MOVLW  26
07A70:  MOVWF  x6A
07A72:  CLRF   x6B
07A74:  MOVLW  02
07A76:  MOVWF  x6C
07A78:  MOVLB  0
07A7A:  CALL   1A3E
07A7E:  MOVLB  5
....................          } 
....................           
....................          if(Opcion==4) 
07A80:  MOVF   xA2,W
07A82:  SUBLW  04
07A84:  BNZ   7ACA
....................          { 
....................             strcpy(Menus.Letra,"Programa 04"); 
07A86:  MOVLW  08
07A88:  MOVWF  FEA
07A8A:  MOVLW  40
07A8C:  MOVWF  FE9
07A8E:  MOVFF  FF2,860
07A92:  BCF    FF2.7
07A94:  MOVLW  00
07A96:  MOVLB  0
07A98:  CALL   0AD0
07A9C:  TBLRD*-
07A9E:  TBLRD*+
07AA0:  MOVF   FF5,W
07AA2:  MOVWF  FEE
07AA4:  IORLW  00
07AA6:  BNZ   7A9E
07AA8:  MOVLB  8
07AAA:  BTFSC  x60.7
07AAC:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,38,0,2); 
07AAE:  MOVLW  08
07AB0:  MOVWF  x68
07AB2:  MOVLW  40
07AB4:  MOVWF  x67
07AB6:  CLRF   x69
07AB8:  MOVLW  26
07ABA:  MOVWF  x6A
07ABC:  CLRF   x6B
07ABE:  MOVLW  02
07AC0:  MOVWF  x6C
07AC2:  MOVLB  0
07AC4:  CALL   1A3E
07AC8:  MOVLB  5
....................          } 
....................           
....................          if(Opcion==5) 
07ACA:  MOVF   xA2,W
07ACC:  SUBLW  05
07ACE:  BNZ   7B14
....................          { 
....................             strcpy(Menus.Letra,"Programa 05"); 
07AD0:  MOVLW  08
07AD2:  MOVWF  FEA
07AD4:  MOVLW  40
07AD6:  MOVWF  FE9
07AD8:  MOVFF  FF2,860
07ADC:  BCF    FF2.7
07ADE:  MOVLW  00
07AE0:  MOVLB  0
07AE2:  CALL   0AFA
07AE6:  TBLRD*-
07AE8:  TBLRD*+
07AEA:  MOVF   FF5,W
07AEC:  MOVWF  FEE
07AEE:  IORLW  00
07AF0:  BNZ   7AE8
07AF2:  MOVLB  8
07AF4:  BTFSC  x60.7
07AF6:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,38,0,2); 
07AF8:  MOVLW  08
07AFA:  MOVWF  x68
07AFC:  MOVLW  40
07AFE:  MOVWF  x67
07B00:  CLRF   x69
07B02:  MOVLW  26
07B04:  MOVWF  x6A
07B06:  CLRF   x6B
07B08:  MOVLW  02
07B0A:  MOVWF  x6C
07B0C:  MOVLB  0
07B0E:  CALL   1A3E
07B12:  MOVLB  5
....................          } 
....................           
....................          
....................       if(UP)//Si oprime hacia arriba 
07B14:  BSF    F92.5
07B16:  BTFSC  F80.5
07B18:  BRA    7B52
....................       { 
....................          Buzz_on;delay_ms(30);Opcion++;Buzz_off; 
07B1A:  BSF    F8B.4
07B1C:  BCF    F94.4
07B1E:  MOVLW  1E
07B20:  MOVLB  8
07B22:  MOVWF  x68
07B24:  MOVLB  0
07B26:  CALL   1390
07B2A:  MOVLB  5
07B2C:  INCF   xA2,F
07B2E:  BCF    F8B.4
07B30:  BCF    F94.4
....................          glcd_rect(40, 35, 85, 60, YES, OFF); 
07B32:  MOVLW  28
07B34:  MOVLB  8
07B36:  MOVWF  x78
07B38:  MOVLW  23
07B3A:  MOVWF  x79
07B3C:  MOVLW  55
07B3E:  MOVWF  x7A
07B40:  MOVLW  3C
07B42:  MOVWF  x7B
07B44:  MOVLW  01
07B46:  MOVWF  x7C
07B48:  CLRF   x7D
07B4A:  MOVLB  0
07B4C:  CALL   17C4
07B50:  MOVLB  5
....................       } 
....................              
....................       if(DOWN)//Si oprime hacia abajo 
07B52:  BSF    F96.0
07B54:  BTFSC  F84.0
07B56:  BRA    7B90
....................       {   
....................          Buzz_on;delay_ms(30);Opcion--;Buzz_off; 
07B58:  BSF    F8B.4
07B5A:  BCF    F94.4
07B5C:  MOVLW  1E
07B5E:  MOVLB  8
07B60:  MOVWF  x68
07B62:  MOVLB  0
07B64:  CALL   1390
07B68:  MOVLB  5
07B6A:  DECF   xA2,F
07B6C:  BCF    F8B.4
07B6E:  BCF    F94.4
....................          glcd_rect(40, 35, 85, 60, YES, OFF); 
07B70:  MOVLW  28
07B72:  MOVLB  8
07B74:  MOVWF  x78
07B76:  MOVLW  23
07B78:  MOVWF  x79
07B7A:  MOVLW  55
07B7C:  MOVWF  x7A
07B7E:  MOVLW  3C
07B80:  MOVWF  x7B
07B82:  MOVLW  01
07B84:  MOVWF  x7C
07B86:  CLRF   x7D
07B88:  MOVLB  0
07B8A:  CALL   17C4
07B8E:  MOVLB  5
....................       } 
....................              
....................       if(RIGHT)//Si oprime SET 
07B90:  BSF    F96.1
07B92:  BTFSC  F84.1
07B94:  BRA    8024
....................       {   
....................          Menu=20;glcd_fillscreen(OFF); 
07B96:  MOVLW  14
07B98:  MOVWF  x9B
07B9A:  MOVLB  8
07B9C:  CLRF   x67
07B9E:  MOVLB  0
07BA0:  CALL   1410
....................          for(i=0;i<Pasos;i++){ 
07BA4:  MOVLB  5
07BA6:  CLRF   x9D
07BA8:  MOVF   x9D,W
07BAA:  SUBLW  0F
07BAC:  BNC   7BF6
....................             if(Temperatura1[i+((Opcion-1)*Pasos)]==0){ 
07BAE:  MOVLW  01
07BB0:  SUBWF  xA2,W
07BB2:  MULLW  10
07BB4:  MOVF   FF3,W
07BB6:  ADDWF  x9D,W
07BB8:  MOVWF  00
07BBA:  BCF    FD8.0
07BBC:  RLCF   00,F
07BBE:  MOVF   00,W
07BC0:  CLRF   03
07BC2:  ADDLW  60
07BC4:  MOVWF  FE9
07BC6:  MOVLW  06
07BC8:  ADDWFC 03,W
07BCA:  MOVWF  FEA
07BCC:  MOVFF  FEC,861
07BD0:  MOVF   FED,F
07BD2:  MOVFF  FEF,860
07BD6:  MOVLB  8
07BD8:  MOVF   x60,F
07BDA:  BNZ   7BEC
07BDC:  MOVF   x61,F
07BDE:  BNZ   7BEC
....................                Segmentos=i; 
07BE0:  MOVFF  59D,592
....................                break; 
07BE4:  MOVLB  5
07BE6:  BRA    7BF6
....................             } 
....................             else{ 
07BE8:  BRA    7BF2
07BEA:  MOVLB  8
....................                Segmentos=Pasos-1; 
07BEC:  MOVLW  0F
07BEE:  MOVLB  5
07BF0:  MOVWF  x92
....................             } 
....................             //Horas1[i+((Opcion-1)*10)]=0; 
....................             //Minutos1[i+((Opcion-1)*10)]=0; 
....................          } 
07BF2:  INCF   x9D,F
07BF4:  BRA    7BA8
....................          if(Segmentos>0){ 
07BF6:  MOVF   x92,F
07BF8:  BTFSC  FD8.2
07BFA:  BRA    7F64
....................             ProgramaSeleccionado=Opcion-1; 
07BFC:  MOVLW  01
07BFE:  SUBWF  xA2,W
07C00:  MOVWF  xA4
....................             glcd_fillscreen(OFF); 
07C02:  MOVLB  8
07C04:  CLRF   x67
07C06:  MOVLB  0
07C08:  CALL   1410
....................              
....................             strcpy(Menus.Letra," Segmentos"); 
07C0C:  MOVLW  08
07C0E:  MOVWF  FEA
07C10:  MOVLW  40
07C12:  MOVWF  FE9
07C14:  MOVFF  FF2,860
07C18:  BCF    FF2.7
07C1A:  MOVLW  00
07C1C:  CALL   0B24
07C20:  TBLRD*-
07C22:  TBLRD*+
07C24:  MOVF   FF5,W
07C26:  MOVWF  FEE
07C28:  IORLW  00
07C2A:  BNZ   7C22
07C2C:  MOVLB  8
07C2E:  BTFSC  x60.7
07C30:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,0,0,2); 
07C32:  MOVLW  08
07C34:  MOVWF  x68
07C36:  MOVLW  40
07C38:  MOVWF  x67
07C3A:  CLRF   x69
07C3C:  CLRF   x6A
07C3E:  CLRF   x6B
07C40:  MOVLW  02
07C42:  MOVWF  x6C
07C44:  MOVLB  0
07C46:  CALL   1A3E
....................              
....................             displayTiempo(Segmentos,63,30,3,2); 
07C4A:  MOVFF  592,863
07C4E:  MOVLW  3F
07C50:  MOVLB  8
07C52:  MOVWF  x64
07C54:  MOVLW  1E
07C56:  MOVWF  x65
07C58:  MOVLW  03
07C5A:  MOVWF  x66
07C5C:  MOVLW  02
07C5E:  MOVWF  x67
07C60:  MOVLB  0
07C62:  CALL   3876
....................             delay_ms(2000); 
07C66:  MOVLW  08
07C68:  MOVLB  8
07C6A:  MOVWF  x60
07C6C:  MOVLW  FA
07C6E:  MOVWF  x68
07C70:  MOVLB  0
07C72:  CALL   1390
07C76:  MOVLB  8
07C78:  DECFSZ x60,F
07C7A:  BRA    7C6C
....................             glcd_fillscreen(OFF); 
07C7C:  CLRF   x67
07C7E:  MOVLB  0
07C80:  CALL   1410
....................             Opcion=1;visual=1;//Faltaa cuadrar esta parte 
07C84:  MOVLW  01
07C86:  MOVLB  5
07C88:  MOVWF  xA2
07C8A:  BSF    x87.7
....................             TempeInicial=Temperatura; 
07C8C:  MOVFF  627,5BF
07C90:  MOVFF  626,5BE
07C94:  MOVFF  625,5BD
07C98:  MOVFF  624,5BC
....................             Ganancia=GananciaIn*(Setpoint/Coeficiente); 
07C9C:  MOVFF  633,867
07CA0:  MOVFF  632,866
07CA4:  MOVFF  631,865
07CA8:  MOVFF  630,864
07CAC:  MOVFF  61B,86B
07CB0:  MOVFF  61A,86A
07CB4:  MOVFF  619,869
07CB8:  MOVFF  618,868
07CBC:  MOVLB  0
07CBE:  CALL   2D86
07CC2:  MOVFF  60F,880
07CC6:  MOVFF  60E,87F
07CCA:  MOVFF  60D,87E
07CCE:  MOVFF  60C,87D
07CD2:  MOVFF  03,884
07CD6:  MOVFF  02,883
07CDA:  MOVFF  01,882
07CDE:  MOVFF  00,881
07CE2:  CALL   2EE4
07CE6:  MOVFF  03,613
07CEA:  MOVFF  02,612
07CEE:  MOVFF  01,611
07CF2:  MOVFF  00,610
....................              
....................             Tiempo=(Horas1[ProgramaSeleccionado*Pasos]*3600)+(Minutos1[ProgramaSeleccionado*Pasos]*60);          
07CF6:  MOVLB  5
07CF8:  MOVF   xA4,W
07CFA:  MULLW  10
07CFC:  MOVFF  FF3,00
07D00:  BCF    FD8.0
07D02:  RLCF   00,F
07D04:  MOVF   00,W
07D06:  CLRF   03
07D08:  MOVWF  FE9
07D0A:  MOVLW  07
07D0C:  ADDWF  03,W
07D0E:  MOVWF  FEA
07D10:  MOVFF  FEC,861
07D14:  MOVF   FED,F
07D16:  MOVFF  FEF,860
07D1A:  MOVFF  861,865
07D1E:  MOVFF  860,864
07D22:  MOVLW  0E
07D24:  MOVLB  8
07D26:  MOVWF  x67
07D28:  MOVLW  10
07D2A:  MOVWF  x66
07D2C:  MOVLB  0
07D2E:  CALL   3A3C
07D32:  MOVFF  02,861
07D36:  MOVFF  01,860
07D3A:  MOVLB  5
07D3C:  MOVF   xA4,W
07D3E:  MULLW  10
07D40:  MOVFF  FF3,00
07D44:  BCF    FD8.0
07D46:  RLCF   00,F
07D48:  MOVF   00,W
07D4A:  CLRF   03
07D4C:  ADDLW  A0
07D4E:  MOVWF  FE9
07D50:  MOVLW  07
07D52:  ADDWFC 03,W
07D54:  MOVWF  FEA
07D56:  MOVFF  FEC,863
07D5A:  MOVF   FED,F
07D5C:  MOVFF  FEF,862
07D60:  MOVFF  863,865
07D64:  MOVFF  862,864
07D68:  MOVLB  8
07D6A:  CLRF   x67
07D6C:  MOVLW  3C
07D6E:  MOVWF  x66
07D70:  MOVLB  0
07D72:  CALL   3A3C
07D76:  MOVFF  02,03
07D7A:  MOVF   01,W
07D7C:  MOVLB  8
07D7E:  ADDWF  x60,W
07D80:  MOVWF  01
07D82:  MOVF   x61,W
07D84:  ADDWFC 03,F
07D86:  MOVFF  01,864
07D8A:  MOVFF  03,865
07D8E:  MOVLB  0
07D90:  CALL   3A90
07D94:  MOVFF  03,5C3
07D98:  MOVFF  02,5C2
07D9C:  MOVFF  01,5C1
07DA0:  MOVFF  00,5C0
....................             Setpoint=Temperatura1[(ProgramaSeleccionado*Pasos)+Segmento]; 
07DA4:  MOVLB  5
07DA6:  MOVF   xA4,W
07DA8:  MULLW  10
07DAA:  MOVF   FF3,W
07DAC:  ADDWF  x93,W
07DAE:  MOVWF  00
07DB0:  BCF    FD8.0
07DB2:  RLCF   00,F
07DB4:  MOVF   00,W
07DB6:  CLRF   03
07DB8:  ADDLW  60
07DBA:  MOVWF  FE9
07DBC:  MOVLW  06
07DBE:  ADDWFC 03,W
07DC0:  MOVWF  FEA
07DC2:  MOVFF  FEC,03
07DC6:  MOVF   FED,F
07DC8:  MOVFF  FEF,864
07DCC:  MOVFF  03,865
07DD0:  MOVLB  0
07DD2:  CALL   3A90
07DD6:  MOVFF  03,633
07DDA:  MOVFF  02,632
07DDE:  MOVFF  01,631
07DE2:  MOVFF  00,630
....................             Pendiente=((Setpoint-TempeInicial)/Tiempo); 
07DE6:  BSF    FD8.1
07DE8:  MOVFF  633,869
07DEC:  MOVFF  632,868
07DF0:  MOVFF  631,867
07DF4:  MOVFF  630,866
07DF8:  MOVFF  5BF,86D
07DFC:  MOVFF  5BE,86C
07E00:  MOVFF  5BD,86B
07E04:  MOVFF  5BC,86A
07E08:  CALL   2B0E
07E0C:  MOVFF  00,860
07E10:  MOVFF  01,861
07E14:  MOVFF  02,862
07E18:  MOVFF  03,863
07E1C:  MOVFF  03,867
07E20:  MOVFF  02,866
07E24:  MOVFF  01,865
07E28:  MOVFF  00,864
07E2C:  MOVFF  5C3,86B
07E30:  MOVFF  5C2,86A
07E34:  MOVFF  5C1,869
07E38:  MOVFF  5C0,868
07E3C:  CALL   2D86
07E40:  MOVFF  03,62B
07E44:  MOVFF  02,62A
07E48:  MOVFF  01,629
07E4C:  MOVFF  00,628
....................             Testerilizacionp[3]=(int8)Horas1[(ProgramaSeleccionado*Pasos)+Segmento]/10; 
07E50:  MOVLB  5
07E52:  MOVF   xA4,W
07E54:  MULLW  10
07E56:  MOVF   FF3,W
07E58:  ADDWF  x93,W
07E5A:  MOVWF  00
07E5C:  BCF    FD8.0
07E5E:  RLCF   00,F
07E60:  MOVF   00,W
07E62:  CLRF   03
07E64:  MOVWF  FE9
07E66:  MOVLW  07
07E68:  ADDWF  03,W
07E6A:  MOVWF  FEA
07E6C:  MOVFF  FEF,87C
07E70:  MOVLW  0A
07E72:  MOVLB  8
07E74:  MOVWF  x7D
07E76:  MOVLB  0
07E78:  CALL   1B64
07E7C:  MOVFF  01,5E7
07E80:  MOVLB  5
....................             Testerilizacionp[2]=Horas1[(ProgramaSeleccionado*Pasos)+Segmento]-(Testerilizacionp[3]*10); 
07E82:  MOVF   xA4,W
07E84:  MULLW  10
07E86:  MOVF   FF3,W
07E88:  ADDWF  x93,W
07E8A:  MOVWF  00
07E8C:  BCF    FD8.0
07E8E:  RLCF   00,F
07E90:  MOVF   00,W
07E92:  CLRF   03
07E94:  MOVWF  FE9
07E96:  MOVLW  07
07E98:  ADDWF  03,W
07E9A:  MOVWF  FEA
07E9C:  MOVFF  FEC,861
07EA0:  MOVF   FED,F
07EA2:  MOVFF  FEF,860
07EA6:  MOVFF  5E7,881
07EAA:  MOVLW  0A
07EAC:  MOVLB  8
07EAE:  MOVWF  x82
07EB0:  MOVLB  0
07EB2:  CALL   3AE0
07EB6:  MOVF   01,W
07EB8:  CLRF   03
07EBA:  MOVWF  00
07EBC:  BTFSC  FE8.7
07EBE:  DECF   03,F
07EC0:  MOVLB  8
07EC2:  SUBWF  x60,W
07EC4:  MOVWF  00
07EC6:  MOVF   03,W
07EC8:  SUBWFB x61,W
07ECA:  MOVFF  00,5E6
07ECE:  MOVLB  5
....................             Testerilizacionp[1]=Minutos1[(ProgramaSeleccionado*Pasos)+Segmento]/10; 
07ED0:  MOVF   xA4,W
07ED2:  MULLW  10
07ED4:  MOVF   FF3,W
07ED6:  ADDWF  x93,W
07ED8:  MOVWF  00
07EDA:  BCF    FD8.0
07EDC:  RLCF   00,F
07EDE:  MOVF   00,W
07EE0:  CLRF   03
07EE2:  ADDLW  A0
07EE4:  MOVWF  FE9
07EE6:  MOVLW  07
07EE8:  ADDWFC 03,W
07EEA:  MOVWF  FEA
07EEC:  MOVFF  FEC,861
07EF0:  MOVF   FED,F
07EF2:  MOVFF  FEF,860
07EF6:  MOVFF  861,863
07EFA:  MOVFF  860,862
07EFE:  MOVLB  8
07F00:  CLRF   x65
07F02:  MOVLW  0A
07F04:  MOVWF  x64
07F06:  MOVLB  0
07F08:  CALL   3B2E
07F0C:  MOVFF  01,5E5
07F10:  MOVLB  5
....................             Testerilizacionp[0]=Minutos1[(ProgramaSeleccionado*Pasos)+Segmento]-(Testerilizacionp[1]*10); 
07F12:  MOVF   xA4,W
07F14:  MULLW  10
07F16:  MOVF   FF3,W
07F18:  ADDWF  x93,W
07F1A:  MOVWF  00
07F1C:  BCF    FD8.0
07F1E:  RLCF   00,F
07F20:  MOVF   00,W
07F22:  CLRF   03
07F24:  ADDLW  A0
07F26:  MOVWF  FE9
07F28:  MOVLW  07
07F2A:  ADDWFC 03,W
07F2C:  MOVWF  FEA
07F2E:  MOVFF  FEC,861
07F32:  MOVF   FED,F
07F34:  MOVFF  FEF,860
07F38:  MOVFF  5E5,881
07F3C:  MOVLW  0A
07F3E:  MOVLB  8
07F40:  MOVWF  x82
07F42:  MOVLB  0
07F44:  CALL   3AE0
07F48:  MOVF   01,W
07F4A:  CLRF   03
07F4C:  MOVWF  00
07F4E:  BTFSC  FE8.7
07F50:  DECF   03,F
07F52:  MOVLB  8
07F54:  SUBWF  x60,W
07F56:  MOVWF  00
07F58:  MOVF   03,W
07F5A:  SUBWFB x61,W
07F5C:  MOVFF  00,5E4
07F60:  MOVLB  5
....................              
....................          } 
....................          else{ 
07F62:  BRA    8024
....................             glcd_fillscreen(OFF); 
07F64:  MOVLB  8
07F66:  CLRF   x67
07F68:  MOVLB  0
07F6A:  CALL   1410
....................             strcpy(Menus.Letra," !Programa"); 
07F6E:  MOVLW  08
07F70:  MOVWF  FEA
07F72:  MOVLW  40
07F74:  MOVWF  FE9
07F76:  MOVFF  FF2,860
07F7A:  BCF    FF2.7
07F7C:  MOVLW  00
07F7E:  CALL   0B4E
07F82:  TBLRD*-
07F84:  TBLRD*+
07F86:  MOVF   FF5,W
07F88:  MOVWF  FEE
07F8A:  IORLW  00
07F8C:  BNZ   7F84
07F8E:  MOVLB  8
07F90:  BTFSC  x60.7
07F92:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,0,0,2); 
07F94:  MOVLW  08
07F96:  MOVWF  x68
07F98:  MOVLW  40
07F9A:  MOVWF  x67
07F9C:  CLRF   x69
07F9E:  CLRF   x6A
07FA0:  CLRF   x6B
07FA2:  MOVLW  02
07FA4:  MOVWF  x6C
07FA6:  MOVLB  0
07FA8:  CALL   1A3E
....................             strcpy(Menus.Letra,"    Vacio!"); 
07FAC:  MOVLW  08
07FAE:  MOVWF  FEA
07FB0:  MOVLW  40
07FB2:  MOVWF  FE9
07FB4:  MOVFF  FF2,860
07FB8:  BCF    FF2.7
07FBA:  MOVLW  00
07FBC:  CALL   0B78
07FC0:  TBLRD*-
07FC2:  TBLRD*+
07FC4:  MOVF   FF5,W
07FC6:  MOVWF  FEE
07FC8:  IORLW  00
07FCA:  BNZ   7FC2
07FCC:  MOVLB  8
07FCE:  BTFSC  x60.7
07FD0:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,20,0,2); 
07FD2:  MOVLW  08
07FD4:  MOVWF  x68
07FD6:  MOVLW  40
07FD8:  MOVWF  x67
07FDA:  CLRF   x69
07FDC:  MOVLW  14
07FDE:  MOVWF  x6A
07FE0:  CLRF   x6B
07FE2:  MOVLW  02
07FE4:  MOVWF  x6C
07FE6:  MOVLB  0
07FE8:  CALL   1A3E
....................             Opcion=1;Buzz_off;delay_ms(2000);Menu=1;glcd_fillscreen(OFF);Opcion=1;visual=1; 
07FEC:  MOVLW  01
07FEE:  MOVLB  5
07FF0:  MOVWF  xA2
07FF2:  BCF    F8B.4
07FF4:  BCF    F94.4
07FF6:  MOVLW  08
07FF8:  MOVLB  8
07FFA:  MOVWF  x60
07FFC:  MOVLW  FA
07FFE:  MOVWF  x68
08000:  MOVLB  0
08002:  CALL   1390
08006:  MOVLB  8
08008:  DECFSZ x60,F
0800A:  BRA    7FFC
0800C:  MOVLW  01
0800E:  MOVLB  5
08010:  MOVWF  x9B
08012:  MOVLB  8
08014:  CLRF   x67
08016:  MOVLB  0
08018:  CALL   1410
0801C:  MOVLW  01
0801E:  MOVLB  5
08020:  MOVWF  xA2
08022:  BSF    x87.7
....................          } 
....................       }  
....................                    
....................       if(LEFT)//Si oprime boton de Toma. 
08024:  BSF    F96.2
08026:  BTFSC  F84.2
08028:  BRA    805A
....................       { 
....................          Buzz_on;Opcion=1;Buzz_off;delay_ms(50);Menu=1;glcd_fillscreen(OFF);Opcion=1;visual=1; 
0802A:  BSF    F8B.4
0802C:  BCF    F94.4
0802E:  MOVLW  01
08030:  MOVWF  xA2
08032:  BCF    F8B.4
08034:  BCF    F94.4
08036:  MOVLW  32
08038:  MOVLB  8
0803A:  MOVWF  x68
0803C:  MOVLB  0
0803E:  CALL   1390
08042:  MOVLW  01
08044:  MOVLB  5
08046:  MOVWF  x9B
08048:  MOVLB  8
0804A:  CLRF   x67
0804C:  MOVLB  0
0804E:  CALL   1410
08052:  MOVLW  01
08054:  MOVLB  5
08056:  MOVWF  xA2
08058:  BSF    x87.7
....................       }  
....................     } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------        
....................  
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................       if(Menu==5){ //Menu Editar Programa 
0805A:  MOVF   x9B,W
0805C:  SUBLW  05
0805E:  BTFSS  FD8.2
08060:  BRA    842A
....................        
....................          if(Opcion>5) 
08062:  MOVF   xA2,W
08064:  SUBLW  05
08066:  BC    806C
....................          {Opcion=1;} 
08068:  MOVLW  01
0806A:  MOVWF  xA2
....................          if(Opcion<1) 
0806C:  MOVF   xA2,F
0806E:  BNZ   8074
....................          {Opcion=5;} 
08070:  MOVLW  05
08072:  MOVWF  xA2
....................           
....................          strcpy(Menus.Letra,"Editar"); 
08074:  MOVLW  08
08076:  MOVWF  FEA
08078:  MOVLW  40
0807A:  MOVWF  FE9
0807C:  MOVFF  FF2,860
08080:  BCF    FF2.7
08082:  MOVLW  00
08084:  MOVLB  0
08086:  CALL   0BA2
0808A:  TBLRD*-
0808C:  TBLRD*+
0808E:  MOVF   FF5,W
08090:  MOVWF  FEE
08092:  IORLW  00
08094:  BNZ   808C
08096:  MOVLB  8
08098:  BTFSC  x60.7
0809A:  BSF    FF2.7
....................          displayMenu(Menus.Letra,30,0,1,2); 
0809C:  MOVLW  08
0809E:  MOVWF  x68
080A0:  MOVLW  40
080A2:  MOVWF  x67
080A4:  MOVLW  1E
080A6:  MOVWF  x69
080A8:  CLRF   x6A
080AA:  MOVLW  01
080AC:  MOVWF  x6B
080AE:  MOVLW  02
080B0:  MOVWF  x6C
080B2:  MOVLB  0
080B4:  CALL   1A3E
....................        
....................          if(Opcion==1)    
080B8:  MOVLB  5
080BA:  DECFSZ xA2,W
080BC:  BRA    8104
....................             {strcpy(Menus.Letra,"Programa 01"); 
080BE:  MOVLW  08
080C0:  MOVWF  FEA
080C2:  MOVLW  40
080C4:  MOVWF  FE9
080C6:  MOVFF  FF2,860
080CA:  BCF    FF2.7
080CC:  MOVLW  00
080CE:  MOVLB  0
080D0:  CALL   0A52
080D4:  TBLRD*-
080D6:  TBLRD*+
080D8:  MOVF   FF5,W
080DA:  MOVWF  FEE
080DC:  IORLW  00
080DE:  BNZ   80D6
080E0:  MOVLB  8
080E2:  BTFSC  x60.7
080E4:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,18,1,1);} 
080E6:  MOVLW  08
080E8:  MOVWF  x68
080EA:  MOVLW  40
080EC:  MOVWF  x67
080EE:  CLRF   x69
080F0:  MOVLW  12
080F2:  MOVWF  x6A
080F4:  MOVLW  01
080F6:  MOVWF  x6B
080F8:  MOVWF  x6C
080FA:  MOVLB  0
080FC:  CALL   1A3E
....................          else 
08100:  BRA    8146
08102:  MOVLB  5
....................             {strcpy(Menus.Letra,"Programa 01"); 
08104:  MOVLW  08
08106:  MOVWF  FEA
08108:  MOVLW  40
0810A:  MOVWF  FE9
0810C:  MOVFF  FF2,860
08110:  BCF    FF2.7
08112:  MOVLW  00
08114:  MOVLB  0
08116:  CALL   0A52
0811A:  TBLRD*-
0811C:  TBLRD*+
0811E:  MOVF   FF5,W
08120:  MOVWF  FEE
08122:  IORLW  00
08124:  BNZ   811C
08126:  MOVLB  8
08128:  BTFSC  x60.7
0812A:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,18,0,1);} 
0812C:  MOVLW  08
0812E:  MOVWF  x68
08130:  MOVLW  40
08132:  MOVWF  x67
08134:  CLRF   x69
08136:  MOVLW  12
08138:  MOVWF  x6A
0813A:  CLRF   x6B
0813C:  MOVLW  01
0813E:  MOVWF  x6C
08140:  MOVLB  0
08142:  CALL   1A3E
....................           
....................          if(Opcion==2)    
08146:  MOVLB  5
08148:  MOVF   xA2,W
0814A:  SUBLW  02
0814C:  BNZ   8194
....................             {strcpy(Menus.Letra,"Programa 02"); 
0814E:  MOVLW  08
08150:  MOVWF  FEA
08152:  MOVLW  40
08154:  MOVWF  FE9
08156:  MOVFF  FF2,860
0815A:  BCF    FF2.7
0815C:  MOVLW  00
0815E:  MOVLB  0
08160:  CALL   0A7C
08164:  TBLRD*-
08166:  TBLRD*+
08168:  MOVF   FF5,W
0816A:  MOVWF  FEE
0816C:  IORLW  00
0816E:  BNZ   8166
08170:  MOVLB  8
08172:  BTFSC  x60.7
08174:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,27,1,1);} 
08176:  MOVLW  08
08178:  MOVWF  x68
0817A:  MOVLW  40
0817C:  MOVWF  x67
0817E:  CLRF   x69
08180:  MOVLW  1B
08182:  MOVWF  x6A
08184:  MOVLW  01
08186:  MOVWF  x6B
08188:  MOVWF  x6C
0818A:  MOVLB  0
0818C:  CALL   1A3E
....................          else 
08190:  BRA    81D6
08192:  MOVLB  5
....................             {strcpy(Menus.Letra,"Programa 02"); 
08194:  MOVLW  08
08196:  MOVWF  FEA
08198:  MOVLW  40
0819A:  MOVWF  FE9
0819C:  MOVFF  FF2,860
081A0:  BCF    FF2.7
081A2:  MOVLW  00
081A4:  MOVLB  0
081A6:  CALL   0A7C
081AA:  TBLRD*-
081AC:  TBLRD*+
081AE:  MOVF   FF5,W
081B0:  MOVWF  FEE
081B2:  IORLW  00
081B4:  BNZ   81AC
081B6:  MOVLB  8
081B8:  BTFSC  x60.7
081BA:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,27,0,1);} 
081BC:  MOVLW  08
081BE:  MOVWF  x68
081C0:  MOVLW  40
081C2:  MOVWF  x67
081C4:  CLRF   x69
081C6:  MOVLW  1B
081C8:  MOVWF  x6A
081CA:  CLRF   x6B
081CC:  MOVLW  01
081CE:  MOVWF  x6C
081D0:  MOVLB  0
081D2:  CALL   1A3E
....................              
....................          if(Opcion==3)    
081D6:  MOVLB  5
081D8:  MOVF   xA2,W
081DA:  SUBLW  03
081DC:  BNZ   8224
....................             {strcpy(Menus.Letra,"Programa 03"); 
081DE:  MOVLW  08
081E0:  MOVWF  FEA
081E2:  MOVLW  40
081E4:  MOVWF  FE9
081E6:  MOVFF  FF2,860
081EA:  BCF    FF2.7
081EC:  MOVLW  00
081EE:  MOVLB  0
081F0:  CALL   0AA6
081F4:  TBLRD*-
081F6:  TBLRD*+
081F8:  MOVF   FF5,W
081FA:  MOVWF  FEE
081FC:  IORLW  00
081FE:  BNZ   81F6
08200:  MOVLB  8
08202:  BTFSC  x60.7
08204:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,36,1,1);} 
08206:  MOVLW  08
08208:  MOVWF  x68
0820A:  MOVLW  40
0820C:  MOVWF  x67
0820E:  CLRF   x69
08210:  MOVLW  24
08212:  MOVWF  x6A
08214:  MOVLW  01
08216:  MOVWF  x6B
08218:  MOVWF  x6C
0821A:  MOVLB  0
0821C:  CALL   1A3E
....................          else 
08220:  BRA    8266
08222:  MOVLB  5
....................             {strcpy(Menus.Letra,"Programa 03"); 
08224:  MOVLW  08
08226:  MOVWF  FEA
08228:  MOVLW  40
0822A:  MOVWF  FE9
0822C:  MOVFF  FF2,860
08230:  BCF    FF2.7
08232:  MOVLW  00
08234:  MOVLB  0
08236:  CALL   0AA6
0823A:  TBLRD*-
0823C:  TBLRD*+
0823E:  MOVF   FF5,W
08240:  MOVWF  FEE
08242:  IORLW  00
08244:  BNZ   823C
08246:  MOVLB  8
08248:  BTFSC  x60.7
0824A:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,36,0,1);}    
0824C:  MOVLW  08
0824E:  MOVWF  x68
08250:  MOVLW  40
08252:  MOVWF  x67
08254:  CLRF   x69
08256:  MOVLW  24
08258:  MOVWF  x6A
0825A:  CLRF   x6B
0825C:  MOVLW  01
0825E:  MOVWF  x6C
08260:  MOVLB  0
08262:  CALL   1A3E
....................                          
....................          if(Opcion==4)    
08266:  MOVLB  5
08268:  MOVF   xA2,W
0826A:  SUBLW  04
0826C:  BNZ   82B4
....................             {strcpy(Menus.Letra,"Programa 04"); 
0826E:  MOVLW  08
08270:  MOVWF  FEA
08272:  MOVLW  40
08274:  MOVWF  FE9
08276:  MOVFF  FF2,860
0827A:  BCF    FF2.7
0827C:  MOVLW  00
0827E:  MOVLB  0
08280:  CALL   0AD0
08284:  TBLRD*-
08286:  TBLRD*+
08288:  MOVF   FF5,W
0828A:  MOVWF  FEE
0828C:  IORLW  00
0828E:  BNZ   8286
08290:  MOVLB  8
08292:  BTFSC  x60.7
08294:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,45,1,1);} 
08296:  MOVLW  08
08298:  MOVWF  x68
0829A:  MOVLW  40
0829C:  MOVWF  x67
0829E:  CLRF   x69
082A0:  MOVLW  2D
082A2:  MOVWF  x6A
082A4:  MOVLW  01
082A6:  MOVWF  x6B
082A8:  MOVWF  x6C
082AA:  MOVLB  0
082AC:  CALL   1A3E
....................          else 
082B0:  BRA    82F6
082B2:  MOVLB  5
....................             {strcpy(Menus.Letra,"Programa 04"); 
082B4:  MOVLW  08
082B6:  MOVWF  FEA
082B8:  MOVLW  40
082BA:  MOVWF  FE9
082BC:  MOVFF  FF2,860
082C0:  BCF    FF2.7
082C2:  MOVLW  00
082C4:  MOVLB  0
082C6:  CALL   0AD0
082CA:  TBLRD*-
082CC:  TBLRD*+
082CE:  MOVF   FF5,W
082D0:  MOVWF  FEE
082D2:  IORLW  00
082D4:  BNZ   82CC
082D6:  MOVLB  8
082D8:  BTFSC  x60.7
082DA:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,45,0,1);}      
082DC:  MOVLW  08
082DE:  MOVWF  x68
082E0:  MOVLW  40
082E2:  MOVWF  x67
082E4:  CLRF   x69
082E6:  MOVLW  2D
082E8:  MOVWF  x6A
082EA:  CLRF   x6B
082EC:  MOVLW  01
082EE:  MOVWF  x6C
082F0:  MOVLB  0
082F2:  CALL   1A3E
....................           
....................          if(Opcion==5)    
082F6:  MOVLB  5
082F8:  MOVF   xA2,W
082FA:  SUBLW  05
082FC:  BNZ   8344
....................             {strcpy(Menus.Letra,"Programa 05"); 
082FE:  MOVLW  08
08300:  MOVWF  FEA
08302:  MOVLW  40
08304:  MOVWF  FE9
08306:  MOVFF  FF2,860
0830A:  BCF    FF2.7
0830C:  MOVLW  00
0830E:  MOVLB  0
08310:  CALL   0AFA
08314:  TBLRD*-
08316:  TBLRD*+
08318:  MOVF   FF5,W
0831A:  MOVWF  FEE
0831C:  IORLW  00
0831E:  BNZ   8316
08320:  MOVLB  8
08322:  BTFSC  x60.7
08324:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,54,1,1);} 
08326:  MOVLW  08
08328:  MOVWF  x68
0832A:  MOVLW  40
0832C:  MOVWF  x67
0832E:  CLRF   x69
08330:  MOVLW  36
08332:  MOVWF  x6A
08334:  MOVLW  01
08336:  MOVWF  x6B
08338:  MOVWF  x6C
0833A:  MOVLB  0
0833C:  CALL   1A3E
....................          else 
08340:  BRA    8386
08342:  MOVLB  5
....................             {strcpy(Menus.Letra,"Programa 05"); 
08344:  MOVLW  08
08346:  MOVWF  FEA
08348:  MOVLW  40
0834A:  MOVWF  FE9
0834C:  MOVFF  FF2,860
08350:  BCF    FF2.7
08352:  MOVLW  00
08354:  MOVLB  0
08356:  CALL   0AFA
0835A:  TBLRD*-
0835C:  TBLRD*+
0835E:  MOVF   FF5,W
08360:  MOVWF  FEE
08362:  IORLW  00
08364:  BNZ   835C
08366:  MOVLB  8
08368:  BTFSC  x60.7
0836A:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,54,0,1);}      
0836C:  MOVLW  08
0836E:  MOVWF  x68
08370:  MOVLW  40
08372:  MOVWF  x67
08374:  CLRF   x69
08376:  MOVLW  36
08378:  MOVWF  x6A
0837A:  CLRF   x6B
0837C:  MOVLW  01
0837E:  MOVWF  x6C
08380:  MOVLB  0
08382:  CALL   1A3E
....................           
....................          if(UP)//Si oprime hacia arriba 
08386:  BSF    F92.5
08388:  BTFSC  F80.5
0838A:  BRA    83A6
....................          { 
....................             Buzz_on;delay_ms(30);Opcion--;Buzz_off; 
0838C:  BSF    F8B.4
0838E:  BCF    F94.4
08390:  MOVLW  1E
08392:  MOVLB  8
08394:  MOVWF  x68
08396:  MOVLB  0
08398:  CALL   1390
0839C:  MOVLB  5
0839E:  DECF   xA2,F
083A0:  BCF    F8B.4
083A2:  BCF    F94.4
083A4:  MOVLB  0
....................          } 
....................                    
....................          if(DOWN)//Si oprime hacia abajo 
083A6:  BSF    F96.0
083A8:  BTFSC  F84.0
083AA:  BRA    83C6
....................          { 
....................             Buzz_on;delay_ms(30);Opcion++; Buzz_off; 
083AC:  BSF    F8B.4
083AE:  BCF    F94.4
083B0:  MOVLW  1E
083B2:  MOVLB  8
083B4:  MOVWF  x68
083B6:  MOVLB  0
083B8:  CALL   1390
083BC:  MOVLB  5
083BE:  INCF   xA2,F
083C0:  BCF    F8B.4
083C2:  BCF    F94.4
083C4:  MOVLB  0
....................          } 
....................                 
....................          if(RIGHT)//Si oprime SET 
083C6:  BSF    F96.1
083C8:  BTFSC  F84.1
083CA:  BRA    83FC
....................          {  
....................             Buzz_on;delay_ms(50);Menu=Opcion+10;Opcion=1;glcd_fillscreen(OFF);Buzz_off;i=0; 
083CC:  BSF    F8B.4
083CE:  BCF    F94.4
083D0:  MOVLW  32
083D2:  MOVLB  8
083D4:  MOVWF  x68
083D6:  MOVLB  0
083D8:  CALL   1390
083DC:  MOVLW  0A
083DE:  MOVLB  5
083E0:  ADDWF  xA2,W
083E2:  MOVWF  x9B
083E4:  MOVLW  01
083E6:  MOVWF  xA2
083E8:  MOVLB  8
083EA:  CLRF   x67
083EC:  MOVLB  0
083EE:  CALL   1410
083F2:  BCF    F8B.4
083F4:  BCF    F94.4
083F6:  MOVLB  5
083F8:  CLRF   x9D
083FA:  MOVLB  0
....................          } 
....................           
....................          if(LEFT){ 
083FC:  BSF    F96.2
083FE:  BTFSC  F84.2
08400:  BRA    8428
....................             Buzz_on;delay_ms(50);Menu=1;Opcion=1;glcd_fillscreen(OFF);Buzz_off; 
08402:  BSF    F8B.4
08404:  BCF    F94.4
08406:  MOVLW  32
08408:  MOVLB  8
0840A:  MOVWF  x68
0840C:  MOVLB  0
0840E:  CALL   1390
08412:  MOVLW  01
08414:  MOVLB  5
08416:  MOVWF  x9B
08418:  MOVWF  xA2
0841A:  MOVLB  8
0841C:  CLRF   x67
0841E:  MOVLB  0
08420:  CALL   1410
08424:  BCF    F8B.4
08426:  BCF    F94.4
08428:  MOVLB  5
....................          } 
....................    } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------        
....................  
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................       if(Menu==6){ //Menu de Borrar Programa 
0842A:  MOVF   x9B,W
0842C:  SUBLW  06
0842E:  BTFSS  FD8.2
08430:  BRA    8994
....................        
....................       if(Opcion>5) 
08432:  MOVF   xA2,W
08434:  SUBLW  05
08436:  BC    843C
....................          Opcion=1; 
08438:  MOVLW  01
0843A:  MOVWF  xA2
....................           
....................       if(Opcion<1) 
0843C:  MOVF   xA2,F
0843E:  BNZ   8444
....................          Opcion=5; 
08440:  MOVLW  05
08442:  MOVWF  xA2
....................        
....................          strcpy(Menus.Letra,"  Elimine"); 
08444:  MOVLW  08
08446:  MOVWF  FEA
08448:  MOVLW  40
0844A:  MOVWF  FE9
0844C:  MOVFF  FF2,860
08450:  BCF    FF2.7
08452:  MOVLW  00
08454:  MOVLB  0
08456:  CALL   0BC8
0845A:  TBLRD*-
0845C:  TBLRD*+
0845E:  MOVF   FF5,W
08460:  MOVWF  FEE
08462:  IORLW  00
08464:  BNZ   845C
08466:  MOVLB  8
08468:  BTFSC  x60.7
0846A:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,0,1,2); 
0846C:  MOVLW  08
0846E:  MOVWF  x68
08470:  MOVLW  40
08472:  MOVWF  x67
08474:  CLRF   x69
08476:  CLRF   x6A
08478:  MOVLW  01
0847A:  MOVWF  x6B
0847C:  MOVLW  02
0847E:  MOVWF  x6C
08480:  MOVLB  0
08482:  CALL   1A3E
....................           
....................          strcpy(Menus.Letra," Programa"); 
08486:  MOVLW  08
08488:  MOVWF  FEA
0848A:  MOVLW  40
0848C:  MOVWF  FE9
0848E:  MOVFF  FF2,860
08492:  BCF    FF2.7
08494:  MOVLW  00
08496:  CALL   0A2A
0849A:  TBLRD*-
0849C:  TBLRD*+
0849E:  MOVF   FF5,W
084A0:  MOVWF  FEE
084A2:  IORLW  00
084A4:  BNZ   849C
084A6:  MOVLB  8
084A8:  BTFSC  x60.7
084AA:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,16,1,2); 
084AC:  MOVLW  08
084AE:  MOVWF  x68
084B0:  MOVLW  40
084B2:  MOVWF  x67
084B4:  CLRF   x69
084B6:  MOVLW  10
084B8:  MOVWF  x6A
084BA:  MOVLW  01
084BC:  MOVWF  x6B
084BE:  MOVLW  02
084C0:  MOVWF  x6C
084C2:  MOVLB  0
084C4:  CALL   1A3E
....................            
....................           
....................          if(Opcion==1) 
084C8:  MOVLB  5
084CA:  DECFSZ xA2,W
084CC:  BRA    8512
....................          { 
....................             strcpy(Menus.Letra,"Programa 01"); 
084CE:  MOVLW  08
084D0:  MOVWF  FEA
084D2:  MOVLW  40
084D4:  MOVWF  FE9
084D6:  MOVFF  FF2,860
084DA:  BCF    FF2.7
084DC:  MOVLW  00
084DE:  MOVLB  0
084E0:  CALL   0A52
084E4:  TBLRD*-
084E6:  TBLRD*+
084E8:  MOVF   FF5,W
084EA:  MOVWF  FEE
084EC:  IORLW  00
084EE:  BNZ   84E6
084F0:  MOVLB  8
084F2:  BTFSC  x60.7
084F4:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,38,0,2); 
084F6:  MOVLW  08
084F8:  MOVWF  x68
084FA:  MOVLW  40
084FC:  MOVWF  x67
084FE:  CLRF   x69
08500:  MOVLW  26
08502:  MOVWF  x6A
08504:  CLRF   x6B
08506:  MOVLW  02
08508:  MOVWF  x6C
0850A:  MOVLB  0
0850C:  CALL   1A3E
08510:  MOVLB  5
....................          } 
....................           
....................          if(Opcion==2) 
08512:  MOVF   xA2,W
08514:  SUBLW  02
08516:  BNZ   855C
....................          { 
....................             strcpy(Menus.Letra,"Programa 02"); 
08518:  MOVLW  08
0851A:  MOVWF  FEA
0851C:  MOVLW  40
0851E:  MOVWF  FE9
08520:  MOVFF  FF2,860
08524:  BCF    FF2.7
08526:  MOVLW  00
08528:  MOVLB  0
0852A:  CALL   0A7C
0852E:  TBLRD*-
08530:  TBLRD*+
08532:  MOVF   FF5,W
08534:  MOVWF  FEE
08536:  IORLW  00
08538:  BNZ   8530
0853A:  MOVLB  8
0853C:  BTFSC  x60.7
0853E:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,38,0,2); 
08540:  MOVLW  08
08542:  MOVWF  x68
08544:  MOVLW  40
08546:  MOVWF  x67
08548:  CLRF   x69
0854A:  MOVLW  26
0854C:  MOVWF  x6A
0854E:  CLRF   x6B
08550:  MOVLW  02
08552:  MOVWF  x6C
08554:  MOVLB  0
08556:  CALL   1A3E
0855A:  MOVLB  5
....................          } 
....................           
....................          if(Opcion==3) 
0855C:  MOVF   xA2,W
0855E:  SUBLW  03
08560:  BNZ   85A6
....................          { 
....................             strcpy(Menus.Letra,"Programa 03"); 
08562:  MOVLW  08
08564:  MOVWF  FEA
08566:  MOVLW  40
08568:  MOVWF  FE9
0856A:  MOVFF  FF2,860
0856E:  BCF    FF2.7
08570:  MOVLW  00
08572:  MOVLB  0
08574:  CALL   0AA6
08578:  TBLRD*-
0857A:  TBLRD*+
0857C:  MOVF   FF5,W
0857E:  MOVWF  FEE
08580:  IORLW  00
08582:  BNZ   857A
08584:  MOVLB  8
08586:  BTFSC  x60.7
08588:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,38,0,2); 
0858A:  MOVLW  08
0858C:  MOVWF  x68
0858E:  MOVLW  40
08590:  MOVWF  x67
08592:  CLRF   x69
08594:  MOVLW  26
08596:  MOVWF  x6A
08598:  CLRF   x6B
0859A:  MOVLW  02
0859C:  MOVWF  x6C
0859E:  MOVLB  0
085A0:  CALL   1A3E
085A4:  MOVLB  5
....................          } 
....................           
....................          if(Opcion==4) 
085A6:  MOVF   xA2,W
085A8:  SUBLW  04
085AA:  BNZ   85F0
....................          { 
....................             strcpy(Menus.Letra,"Programa 04"); 
085AC:  MOVLW  08
085AE:  MOVWF  FEA
085B0:  MOVLW  40
085B2:  MOVWF  FE9
085B4:  MOVFF  FF2,860
085B8:  BCF    FF2.7
085BA:  MOVLW  00
085BC:  MOVLB  0
085BE:  CALL   0AD0
085C2:  TBLRD*-
085C4:  TBLRD*+
085C6:  MOVF   FF5,W
085C8:  MOVWF  FEE
085CA:  IORLW  00
085CC:  BNZ   85C4
085CE:  MOVLB  8
085D0:  BTFSC  x60.7
085D2:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,38,0,2); 
085D4:  MOVLW  08
085D6:  MOVWF  x68
085D8:  MOVLW  40
085DA:  MOVWF  x67
085DC:  CLRF   x69
085DE:  MOVLW  26
085E0:  MOVWF  x6A
085E2:  CLRF   x6B
085E4:  MOVLW  02
085E6:  MOVWF  x6C
085E8:  MOVLB  0
085EA:  CALL   1A3E
085EE:  MOVLB  5
....................          } 
....................           
....................          if(Opcion==5) 
085F0:  MOVF   xA2,W
085F2:  SUBLW  05
085F4:  BNZ   863A
....................          { 
....................             strcpy(Menus.Letra,"Programa 05"); 
085F6:  MOVLW  08
085F8:  MOVWF  FEA
085FA:  MOVLW  40
085FC:  MOVWF  FE9
085FE:  MOVFF  FF2,860
08602:  BCF    FF2.7
08604:  MOVLW  00
08606:  MOVLB  0
08608:  CALL   0AFA
0860C:  TBLRD*-
0860E:  TBLRD*+
08610:  MOVF   FF5,W
08612:  MOVWF  FEE
08614:  IORLW  00
08616:  BNZ   860E
08618:  MOVLB  8
0861A:  BTFSC  x60.7
0861C:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,38,0,2); 
0861E:  MOVLW  08
08620:  MOVWF  x68
08622:  MOVLW  40
08624:  MOVWF  x67
08626:  CLRF   x69
08628:  MOVLW  26
0862A:  MOVWF  x6A
0862C:  CLRF   x6B
0862E:  MOVLW  02
08630:  MOVWF  x6C
08632:  MOVLB  0
08634:  CALL   1A3E
08638:  MOVLB  5
....................          } 
....................           
....................          
....................       if(UP)//Si oprime hacia arriba 
0863A:  BSF    F92.5
0863C:  BTFSC  F80.5
0863E:  BRA    8678
....................       { 
....................          Buzz_on;delay_ms(30);Opcion++;Buzz_off; 
08640:  BSF    F8B.4
08642:  BCF    F94.4
08644:  MOVLW  1E
08646:  MOVLB  8
08648:  MOVWF  x68
0864A:  MOVLB  0
0864C:  CALL   1390
08650:  MOVLB  5
08652:  INCF   xA2,F
08654:  BCF    F8B.4
08656:  BCF    F94.4
....................          glcd_rect(40, 35, 85, 60, YES, OFF); 
08658:  MOVLW  28
0865A:  MOVLB  8
0865C:  MOVWF  x78
0865E:  MOVLW  23
08660:  MOVWF  x79
08662:  MOVLW  55
08664:  MOVWF  x7A
08666:  MOVLW  3C
08668:  MOVWF  x7B
0866A:  MOVLW  01
0866C:  MOVWF  x7C
0866E:  CLRF   x7D
08670:  MOVLB  0
08672:  CALL   17C4
08676:  MOVLB  5
....................       } 
....................              
....................       if(DOWN)//Si oprime hacia abajo 
08678:  BSF    F96.0
0867A:  BTFSC  F84.0
0867C:  BRA    86B6
....................       {   
....................          Buzz_on;delay_ms(30);Opcion--;Buzz_off; 
0867E:  BSF    F8B.4
08680:  BCF    F94.4
08682:  MOVLW  1E
08684:  MOVLB  8
08686:  MOVWF  x68
08688:  MOVLB  0
0868A:  CALL   1390
0868E:  MOVLB  5
08690:  DECF   xA2,F
08692:  BCF    F8B.4
08694:  BCF    F94.4
....................          glcd_rect(40, 35, 85, 60, YES, OFF); 
08696:  MOVLW  28
08698:  MOVLB  8
0869A:  MOVWF  x78
0869C:  MOVLW  23
0869E:  MOVWF  x79
086A0:  MOVLW  55
086A2:  MOVWF  x7A
086A4:  MOVLW  3C
086A6:  MOVWF  x7B
086A8:  MOVLW  01
086AA:  MOVWF  x7C
086AC:  CLRF   x7D
086AE:  MOVLB  0
086B0:  CALL   17C4
086B4:  MOVLB  5
....................       } 
....................              
....................       if(RIGHT)//Si oprime SET 
086B6:  BSF    F96.1
086B8:  BTFSC  F84.1
086BA:  BRA    8954
....................       {   
....................          Buzz_on; 
086BC:  BSF    F8B.4
086BE:  BCF    F94.4
....................          for(i=0;i<Pasos;i++){ 
086C0:  CLRF   x9D
086C2:  MOVF   x9D,W
086C4:  SUBLW  0F
086C6:  BNC   8736
....................             Temperatura1[i+((Opcion-1)*Pasos)]=0; 
086C8:  MOVLW  01
086CA:  SUBWF  xA2,W
086CC:  MULLW  10
086CE:  MOVF   FF3,W
086D0:  ADDWF  x9D,W
086D2:  MOVWF  00
086D4:  BCF    FD8.0
086D6:  RLCF   00,F
086D8:  MOVF   00,W
086DA:  CLRF   03
086DC:  ADDLW  60
086DE:  MOVWF  FE9
086E0:  MOVLW  06
086E2:  ADDWFC 03,W
086E4:  MOVWF  FEA
086E6:  CLRF   FEC
086E8:  MOVF   FED,F
086EA:  CLRF   FEF
....................             Horas1[i+((Opcion-1)*Pasos)]=0; 
086EC:  MOVLW  01
086EE:  SUBWF  xA2,W
086F0:  MULLW  10
086F2:  MOVF   FF3,W
086F4:  ADDWF  x9D,W
086F6:  MOVWF  00
086F8:  BCF    FD8.0
086FA:  RLCF   00,F
086FC:  MOVF   00,W
086FE:  CLRF   03
08700:  MOVWF  FE9
08702:  MOVLW  07
08704:  ADDWF  03,W
08706:  MOVWF  FEA
08708:  CLRF   FEC
0870A:  MOVF   FED,F
0870C:  CLRF   FEF
....................             Minutos1[i+((Opcion-1)*Pasos)]=0; 
0870E:  MOVLW  01
08710:  SUBWF  xA2,W
08712:  MULLW  10
08714:  MOVF   FF3,W
08716:  ADDWF  x9D,W
08718:  MOVWF  00
0871A:  BCF    FD8.0
0871C:  RLCF   00,F
0871E:  MOVF   00,W
08720:  CLRF   03
08722:  ADDLW  A0
08724:  MOVWF  FE9
08726:  MOVLW  07
08728:  ADDWFC 03,W
0872A:  MOVWF  FEA
0872C:  CLRF   FEC
0872E:  MOVF   FED,F
08730:  CLRF   FEF
....................          } 
08732:  INCF   x9D,F
08734:  BRA    86C2
....................           
....................          for(i=0;i<Pasos;i++){ 
08736:  CLRF   x9D
08738:  MOVF   x9D,W
0873A:  SUBLW  0F
0873C:  BTFSS  FD8.0
0873E:  BRA    8870
....................             delay_ms(10);     
08740:  MOVLW  0A
08742:  MOVLB  8
08744:  MOVWF  x68
08746:  MOVLB  0
08748:  CALL   1390
....................             write_eeprom((i*2)+((Pasos*4)*(Opcion-1)),0); 
0874C:  BCF    FD8.0
0874E:  MOVLB  5
08750:  RLCF   x9D,W
08752:  MOVLB  8
08754:  MOVWF  x60
08756:  MOVLW  01
08758:  MOVLB  5
0875A:  SUBWF  xA2,W
0875C:  MULLW  40
0875E:  MOVF   FF3,W
08760:  MOVLB  8
08762:  ADDWF  x60,F
08764:  CLRF   FAA
08766:  MOVFF  860,FA9
0876A:  CLRF   FA8
0876C:  BCF    FA6.6
0876E:  BCF    FA6.7
08770:  BSF    FA6.2
08772:  MOVF   FF2,W
08774:  MOVWF  00
08776:  BCF    FF2.7
08778:  MOVLB  F
0877A:  MOVLW  55
0877C:  MOVWF  FA7
0877E:  MOVLW  AA
08780:  MOVWF  FA7
08782:  BSF    FA6.1
08784:  BTFSC  FA6.1
08786:  BRA    8784
08788:  BCF    FA6.2
0878A:  MOVF   00,W
0878C:  IORWF  FF2,F
....................             delay_ms(10);     
0878E:  MOVLW  0A
08790:  MOVLB  8
08792:  MOVWF  x68
08794:  MOVLB  0
08796:  CALL   1390
....................             write_eeprom((i*2)+1+((Pasos*4)*(Opcion-1)),0); 
0879A:  BCF    FD8.0
0879C:  MOVLB  5
0879E:  RLCF   x9D,W
087A0:  ADDLW  01
087A2:  MOVLB  8
087A4:  MOVWF  x60
087A6:  MOVLW  01
087A8:  MOVLB  5
087AA:  SUBWF  xA2,W
087AC:  MULLW  40
087AE:  MOVF   FF3,W
087B0:  MOVLB  8
087B2:  ADDWF  x60,F
087B4:  CLRF   FAA
087B6:  MOVFF  860,FA9
087BA:  CLRF   FA8
087BC:  BCF    FA6.6
087BE:  BCF    FA6.7
087C0:  BSF    FA6.2
087C2:  MOVF   FF2,W
087C4:  MOVWF  00
087C6:  BCF    FF2.7
087C8:  MOVLB  F
087CA:  MOVLW  55
087CC:  MOVWF  FA7
087CE:  MOVLW  AA
087D0:  MOVWF  FA7
087D2:  BSF    FA6.1
087D4:  BTFSC  FA6.1
087D6:  BRA    87D4
087D8:  BCF    FA6.2
087DA:  MOVF   00,W
087DC:  IORWF  FF2,F
....................             delay_ms(10);     
087DE:  MOVLW  0A
087E0:  MOVLB  8
087E2:  MOVWF  x68
087E4:  MOVLB  0
087E6:  CALL   1390
....................             write_eeprom(i+(((Pasos*4)*Opcion)-(Pasos*2)),0); 
087EA:  MOVLB  5
087EC:  MOVF   xA2,W
087EE:  MULLW  40
087F0:  MOVF   FF3,W
087F2:  ADDLW  E0
087F4:  ADDWF  x9D,W
087F6:  MOVLB  8
087F8:  MOVWF  x60
087FA:  CLRF   FAA
087FC:  MOVFF  860,FA9
08800:  CLRF   FA8
08802:  BCF    FA6.6
08804:  BCF    FA6.7
08806:  BSF    FA6.2
08808:  MOVF   FF2,W
0880A:  MOVWF  00
0880C:  BCF    FF2.7
0880E:  MOVLB  F
08810:  MOVLW  55
08812:  MOVWF  FA7
08814:  MOVLW  AA
08816:  MOVWF  FA7
08818:  BSF    FA6.1
0881A:  BTFSC  FA6.1
0881C:  BRA    881A
0881E:  BCF    FA6.2
08820:  MOVF   00,W
08822:  IORWF  FF2,F
....................             delay_ms(10);     
08824:  MOVLW  0A
08826:  MOVLB  8
08828:  MOVWF  x68
0882A:  MOVLB  0
0882C:  CALL   1390
....................             write_eeprom(i+(((Pasos*4)*Opcion)-Pasos),0); 
08830:  MOVLB  5
08832:  MOVF   xA2,W
08834:  MULLW  40
08836:  MOVF   FF3,W
08838:  ADDLW  F0
0883A:  ADDWF  x9D,W
0883C:  MOVLB  8
0883E:  MOVWF  x60
08840:  CLRF   FAA
08842:  MOVFF  860,FA9
08846:  CLRF   FA8
08848:  BCF    FA6.6
0884A:  BCF    FA6.7
0884C:  BSF    FA6.2
0884E:  MOVF   FF2,W
08850:  MOVWF  00
08852:  BCF    FF2.7
08854:  MOVLB  F
08856:  MOVLW  55
08858:  MOVWF  FA7
0885A:  MOVLW  AA
0885C:  MOVWF  FA7
0885E:  BSF    FA6.1
08860:  BTFSC  FA6.1
08862:  BRA    8860
08864:  BCF    FA6.2
08866:  MOVF   00,W
08868:  IORWF  FF2,F
....................          }  
0886A:  MOVLB  5
0886C:  INCF   x9D,F
0886E:  BRA    8738
....................           
....................          delay_ms(200);Buzz_off;Menu=1;glcd_fillscreen(OFF);Opcion=1;visual=1; 
08870:  MOVLW  C8
08872:  MOVLB  8
08874:  MOVWF  x68
08876:  MOVLB  0
08878:  CALL   1390
0887C:  BCF    F8B.4
0887E:  BCF    F94.4
08880:  MOVLW  01
08882:  MOVLB  5
08884:  MOVWF  x9B
08886:  MOVLB  8
08888:  CLRF   x67
0888A:  MOVLB  0
0888C:  CALL   1410
08890:  MOVLW  01
08892:  MOVLB  5
08894:  MOVWF  xA2
08896:  BSF    x87.7
....................          glcd_fillScreen(OFF); 
08898:  MOVLB  8
0889A:  CLRF   x67
0889C:  MOVLB  0
0889E:  CALL   1410
....................          strcpy(Menus.Letra,"Programa"); 
088A2:  MOVLW  08
088A4:  MOVWF  FEA
088A6:  MOVLW  40
088A8:  MOVWF  FE9
088AA:  MOVFF  FF2,860
088AE:  BCF    FF2.7
088B0:  MOVLW  00
088B2:  CALL   0BF0
088B6:  TBLRD*-
088B8:  TBLRD*+
088BA:  MOVF   FF5,W
088BC:  MOVWF  FEE
088BE:  IORLW  00
088C0:  BNZ   88B8
088C2:  MOVLB  8
088C4:  BTFSC  x60.7
088C6:  BSF    FF2.7
....................          displayMenu(Menus.Letra,15,0,0,2); 
088C8:  MOVLW  08
088CA:  MOVWF  x68
088CC:  MOVLW  40
088CE:  MOVWF  x67
088D0:  MOVLW  0F
088D2:  MOVWF  x69
088D4:  CLRF   x6A
088D6:  CLRF   x6B
088D8:  MOVLW  02
088DA:  MOVWF  x6C
088DC:  MOVLB  0
088DE:  CALL   1A3E
....................          strcpy(Menus.Letra,"Eliminado"); 
088E2:  MOVLW  08
088E4:  MOVWF  FEA
088E6:  MOVLW  40
088E8:  MOVWF  FE9
088EA:  MOVFF  FF2,860
088EE:  BCF    FF2.7
088F0:  MOVLW  00
088F2:  CALL   0C18
088F6:  TBLRD*-
088F8:  TBLRD*+
088FA:  MOVF   FF5,W
088FC:  MOVWF  FEE
088FE:  IORLW  00
08900:  BNZ   88F8
08902:  MOVLB  8
08904:  BTFSC  x60.7
08906:  BSF    FF2.7
....................          displayMenu(Menus.Letra,15,30,0,2); 
08908:  MOVLW  08
0890A:  MOVWF  x68
0890C:  MOVLW  40
0890E:  MOVWF  x67
08910:  MOVLW  0F
08912:  MOVWF  x69
08914:  MOVLW  1E
08916:  MOVWF  x6A
08918:  CLRF   x6B
0891A:  MOVLW  02
0891C:  MOVWF  x6C
0891E:  MOVLB  0
08920:  CALL   1A3E
....................          Menu=1;glcd_update();delay_ms(1000); 
08924:  MOVLW  01
08926:  MOVLB  5
08928:  MOVWF  x9B
0892A:  MOVLB  0
0892C:  CALL   146A
08930:  MOVLW  04
08932:  MOVLB  8
08934:  MOVWF  x60
08936:  MOVLW  FA
08938:  MOVWF  x68
0893A:  MOVLB  0
0893C:  CALL   1390
08940:  MOVLB  8
08942:  DECFSZ x60,F
08944:  BRA    8936
....................          glcd_fillScreen(OFF);unidad=1; 
08946:  CLRF   x67
08948:  MOVLB  0
0894A:  CALL   1410
0894E:  MOVLW  01
08950:  MOVLB  5
08952:  MOVWF  x9C
....................       }  
....................                    
....................       if(LEFT)//Si oprime boton de Toma. 
08954:  BSF    F96.2
08956:  BTFSC  F84.2
08958:  BRA    8994
....................       { 
....................          Buzz_on;Opcion=1;Buzz_off;delay_ms(500);Menu=1;glcd_fillscreen(OFF);Opcion=1;visual=1; 
0895A:  BSF    F8B.4
0895C:  BCF    F94.4
0895E:  MOVLW  01
08960:  MOVWF  xA2
08962:  BCF    F8B.4
08964:  BCF    F94.4
08966:  MOVLW  02
08968:  MOVLB  8
0896A:  MOVWF  x60
0896C:  MOVLW  FA
0896E:  MOVWF  x68
08970:  MOVLB  0
08972:  CALL   1390
08976:  MOVLB  8
08978:  DECFSZ x60,F
0897A:  BRA    896C
0897C:  MOVLW  01
0897E:  MOVLB  5
08980:  MOVWF  x9B
08982:  MOVLB  8
08984:  CLRF   x67
08986:  MOVLB  0
08988:  CALL   1410
0898C:  MOVLW  01
0898E:  MOVLB  5
08990:  MOVWF  xA2
08992:  BSF    x87.7
....................       }  
....................     } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------        
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................       if(Menu==8){ // Menu de Cambio de Contraseña 
08994:  MOVF   x9B,W
08996:  SUBLW  08
08998:  BTFSS  FD8.2
0899A:  BRA    8E78
....................          
....................       strcpy(Menus.Letra,"Clave"); 
0899C:  MOVLW  08
0899E:  MOVWF  FEA
089A0:  MOVLW  40
089A2:  MOVWF  FE9
089A4:  MOVFF  FF2,860
089A8:  BCF    FF2.7
089AA:  MOVLW  00
089AC:  MOVLB  0
089AE:  CALL   07D8
089B2:  TBLRD*-
089B4:  TBLRD*+
089B6:  MOVF   FF5,W
089B8:  MOVWF  FEE
089BA:  IORLW  00
089BC:  BNZ   89B4
089BE:  MOVLB  8
089C0:  BTFSC  x60.7
089C2:  BSF    FF2.7
....................       displayMenu(Menus.Letra,30,0,1,2);      
089C4:  MOVLW  08
089C6:  MOVWF  x68
089C8:  MOVLW  40
089CA:  MOVWF  x67
089CC:  MOVLW  1E
089CE:  MOVWF  x69
089D0:  CLRF   x6A
089D2:  MOVLW  01
089D4:  MOVWF  x6B
089D6:  MOVLW  02
089D8:  MOVWF  x6C
089DA:  MOVLB  0
089DC:  CALL   1A3E
....................        
....................       if(unidad==1) 
089E0:  MOVLB  5
089E2:  DECFSZ x9C,W
089E4:  BRA    8A44
....................       { 
....................          displayContrasena(Contrasena[0],20,30,1); 
089E6:  MOVFF  5E8,869
089EA:  MOVLW  14
089EC:  MOVLB  8
089EE:  MOVWF  x6A
089F0:  MOVLW  1E
089F2:  MOVWF  x6B
089F4:  MOVLW  01
089F6:  MOVWF  x6C
089F8:  MOVLB  0
089FA:  CALL   1C90
....................          displayContrasena(Contrasena[1],40,30,0); 
089FE:  MOVFF  5E9,869
08A02:  MOVLW  28
08A04:  MOVLB  8
08A06:  MOVWF  x6A
08A08:  MOVLW  1E
08A0A:  MOVWF  x6B
08A0C:  CLRF   x6C
08A0E:  MOVLB  0
08A10:  CALL   1C90
....................          displayContrasena(Contrasena[2],60,30,0); 
08A14:  MOVFF  5EA,869
08A18:  MOVLW  3C
08A1A:  MOVLB  8
08A1C:  MOVWF  x6A
08A1E:  MOVLW  1E
08A20:  MOVWF  x6B
08A22:  CLRF   x6C
08A24:  MOVLB  0
08A26:  CALL   1C90
....................          displayContrasena(Contrasena[3],80,30,0); 
08A2A:  MOVFF  5EB,869
08A2E:  MOVLW  50
08A30:  MOVLB  8
08A32:  MOVWF  x6A
08A34:  MOVLW  1E
08A36:  MOVWF  x6B
08A38:  CLRF   x6C
08A3A:  MOVLB  0
08A3C:  CALL   1C90
....................       } 
....................       else 
08A40:  BRA    8B6C
08A42:  MOVLB  5
....................       { 
....................          if(unidad==2) 
08A44:  MOVF   x9C,W
08A46:  SUBLW  02
08A48:  BNZ   8AA8
....................          { 
....................             displayContrasena(Contrasena[0],20,30,0); 
08A4A:  MOVFF  5E8,869
08A4E:  MOVLW  14
08A50:  MOVLB  8
08A52:  MOVWF  x6A
08A54:  MOVLW  1E
08A56:  MOVWF  x6B
08A58:  CLRF   x6C
08A5A:  MOVLB  0
08A5C:  CALL   1C90
....................             displayContrasena(Contrasena[1],40,30,1); 
08A60:  MOVFF  5E9,869
08A64:  MOVLW  28
08A66:  MOVLB  8
08A68:  MOVWF  x6A
08A6A:  MOVLW  1E
08A6C:  MOVWF  x6B
08A6E:  MOVLW  01
08A70:  MOVWF  x6C
08A72:  MOVLB  0
08A74:  CALL   1C90
....................             displayContrasena(Contrasena[2],60,30,0); 
08A78:  MOVFF  5EA,869
08A7C:  MOVLW  3C
08A7E:  MOVLB  8
08A80:  MOVWF  x6A
08A82:  MOVLW  1E
08A84:  MOVWF  x6B
08A86:  CLRF   x6C
08A88:  MOVLB  0
08A8A:  CALL   1C90
....................             displayContrasena(Contrasena[3],80,30,0); 
08A8E:  MOVFF  5EB,869
08A92:  MOVLW  50
08A94:  MOVLB  8
08A96:  MOVWF  x6A
08A98:  MOVLW  1E
08A9A:  MOVWF  x6B
08A9C:  CLRF   x6C
08A9E:  MOVLB  0
08AA0:  CALL   1C90
....................          } 
....................          else 
08AA4:  BRA    8B6C
08AA6:  MOVLB  5
....................          { 
....................             if(unidad==3) 
08AA8:  MOVF   x9C,W
08AAA:  SUBLW  03
08AAC:  BNZ   8B0C
....................             { 
....................                displayContrasena(Contrasena[0],20,30,0); 
08AAE:  MOVFF  5E8,869
08AB2:  MOVLW  14
08AB4:  MOVLB  8
08AB6:  MOVWF  x6A
08AB8:  MOVLW  1E
08ABA:  MOVWF  x6B
08ABC:  CLRF   x6C
08ABE:  MOVLB  0
08AC0:  CALL   1C90
....................                displayContrasena(Contrasena[1],40,30,0); 
08AC4:  MOVFF  5E9,869
08AC8:  MOVLW  28
08ACA:  MOVLB  8
08ACC:  MOVWF  x6A
08ACE:  MOVLW  1E
08AD0:  MOVWF  x6B
08AD2:  CLRF   x6C
08AD4:  MOVLB  0
08AD6:  CALL   1C90
....................                displayContrasena(Contrasena[2],60,30,1); 
08ADA:  MOVFF  5EA,869
08ADE:  MOVLW  3C
08AE0:  MOVLB  8
08AE2:  MOVWF  x6A
08AE4:  MOVLW  1E
08AE6:  MOVWF  x6B
08AE8:  MOVLW  01
08AEA:  MOVWF  x6C
08AEC:  MOVLB  0
08AEE:  CALL   1C90
....................                displayContrasena(Contrasena[3],80,30,0); 
08AF2:  MOVFF  5EB,869
08AF6:  MOVLW  50
08AF8:  MOVLB  8
08AFA:  MOVWF  x6A
08AFC:  MOVLW  1E
08AFE:  MOVWF  x6B
08B00:  CLRF   x6C
08B02:  MOVLB  0
08B04:  CALL   1C90
....................             } 
....................             else 
08B08:  BRA    8B6C
08B0A:  MOVLB  5
....................             { 
....................                if(unidad==4) 
08B0C:  MOVF   x9C,W
08B0E:  SUBLW  04
08B10:  BNZ   8B6E
....................                { 
....................                   displayContrasena(Contrasena[0],20,30,0); 
08B12:  MOVFF  5E8,869
08B16:  MOVLW  14
08B18:  MOVLB  8
08B1A:  MOVWF  x6A
08B1C:  MOVLW  1E
08B1E:  MOVWF  x6B
08B20:  CLRF   x6C
08B22:  MOVLB  0
08B24:  CALL   1C90
....................                   displayContrasena(Contrasena[1],40,30,0); 
08B28:  MOVFF  5E9,869
08B2C:  MOVLW  28
08B2E:  MOVLB  8
08B30:  MOVWF  x6A
08B32:  MOVLW  1E
08B34:  MOVWF  x6B
08B36:  CLRF   x6C
08B38:  MOVLB  0
08B3A:  CALL   1C90
....................                   displayContrasena(Contrasena[2],60,30,0); 
08B3E:  MOVFF  5EA,869
08B42:  MOVLW  3C
08B44:  MOVLB  8
08B46:  MOVWF  x6A
08B48:  MOVLW  1E
08B4A:  MOVWF  x6B
08B4C:  CLRF   x6C
08B4E:  MOVLB  0
08B50:  CALL   1C90
....................                   displayContrasena(Contrasena[3],80,30,1); 
08B54:  MOVFF  5EB,869
08B58:  MOVLW  50
08B5A:  MOVLB  8
08B5C:  MOVWF  x6A
08B5E:  MOVLW  1E
08B60:  MOVWF  x6B
08B62:  MOVLW  01
08B64:  MOVWF  x6C
08B66:  MOVLB  0
08B68:  CALL   1C90
08B6C:  MOVLB  5
....................                } 
....................             } 
....................          } 
....................       } 
....................        
....................       if(UP)//Si oprime hacia arriba 
08B6E:  BSF    F92.5
08B70:  BTFSC  F80.5
08B72:  BRA    8BE8
....................       { 
....................          Buzz_on;delay_ms(10);Buzz_off; 
08B74:  BSF    F8B.4
08B76:  BCF    F94.4
08B78:  MOVLW  0A
08B7A:  MOVLB  8
08B7C:  MOVWF  x68
08B7E:  MOVLB  0
08B80:  CALL   1390
08B84:  BCF    F8B.4
08B86:  BCF    F94.4
....................          delay_ms(30); 
08B88:  MOVLW  1E
08B8A:  MOVLB  8
08B8C:  MOVWF  x68
08B8E:  MOVLB  0
08B90:  CALL   1390
....................          for(i=1;i<=4;i++) 
08B94:  MOVLW  01
08B96:  MOVLB  5
08B98:  MOVWF  x9D
08B9A:  MOVF   x9D,W
08B9C:  SUBLW  04
08B9E:  BNC   8BE8
....................          { 
....................             if(unidad==i) 
08BA0:  MOVF   x9D,W
08BA2:  SUBWF  x9C,W
08BA4:  BNZ   8BE4
....................             { 
....................                Contrasena[i-1]++; 
08BA6:  MOVLW  01
08BA8:  SUBWF  x9D,W
08BAA:  CLRF   03
08BAC:  ADDLW  E8
08BAE:  MOVWF  FE9
08BB0:  MOVLW  05
08BB2:  ADDWFC 03,W
08BB4:  MOVWF  FEA
08BB6:  INCF   FEF,F
....................                if(Contrasena[i-1]>9)    
08BB8:  MOVLW  01
08BBA:  SUBWF  x9D,W
08BBC:  CLRF   03
08BBE:  ADDLW  E8
08BC0:  MOVWF  FE9
08BC2:  MOVLW  05
08BC4:  ADDWFC 03,W
08BC6:  MOVWF  FEA
08BC8:  BTFSC  FEF.7
08BCA:  BRA    8BE4
08BCC:  MOVF   FEF,W
08BCE:  SUBLW  09
08BD0:  BC    8BE4
....................                { 
....................                   Contrasena[i-1]=0; 
08BD2:  MOVLW  01
08BD4:  SUBWF  x9D,W
08BD6:  CLRF   03
08BD8:  ADDLW  E8
08BDA:  MOVWF  FE9
08BDC:  MOVLW  05
08BDE:  ADDWFC 03,W
08BE0:  MOVWF  FEA
08BE2:  CLRF   FEF
....................                } 
....................             } 
....................          } 
08BE4:  INCF   x9D,F
08BE6:  BRA    8B9A
....................       } 
....................              
....................       if(DOWN)//Si oprime hacia abajo 
08BE8:  BSF    F96.0
08BEA:  BTFSC  F84.0
08BEC:  BRA    8C60
....................       { 
....................          Buzz_on;delay_ms(10);Buzz_off; 
08BEE:  BSF    F8B.4
08BF0:  BCF    F94.4
08BF2:  MOVLW  0A
08BF4:  MOVLB  8
08BF6:  MOVWF  x68
08BF8:  MOVLB  0
08BFA:  CALL   1390
08BFE:  BCF    F8B.4
08C00:  BCF    F94.4
....................          delay_ms(30); 
08C02:  MOVLW  1E
08C04:  MOVLB  8
08C06:  MOVWF  x68
08C08:  MOVLB  0
08C0A:  CALL   1390
....................          for(i=1;i<=4;i++) 
08C0E:  MOVLW  01
08C10:  MOVLB  5
08C12:  MOVWF  x9D
08C14:  MOVF   x9D,W
08C16:  SUBLW  04
08C18:  BNC   8C60
....................          { 
....................             if(unidad==i) 
08C1A:  MOVF   x9D,W
08C1C:  SUBWF  x9C,W
08C1E:  BNZ   8C5C
....................             {Contrasena[i-1]--;  
08C20:  MOVLW  01
08C22:  SUBWF  x9D,W
08C24:  CLRF   03
08C26:  ADDLW  E8
08C28:  MOVWF  FE9
08C2A:  MOVLW  05
08C2C:  ADDWFC 03,W
08C2E:  MOVWF  FEA
08C30:  DECF   FEF,F
....................             if(Contrasena[i-1]<0) 
08C32:  MOVLW  01
08C34:  SUBWF  x9D,W
08C36:  CLRF   03
08C38:  ADDLW  E8
08C3A:  MOVWF  FE9
08C3C:  MOVLW  05
08C3E:  ADDWFC 03,W
08C40:  MOVWF  FEA
08C42:  BTFSC  FEF.7
08C44:  BRA    8C48
08C46:  BRA    8C5C
....................             {Contrasena[i-1]=9;} 
08C48:  MOVLW  01
08C4A:  SUBWF  x9D,W
08C4C:  CLRF   03
08C4E:  ADDLW  E8
08C50:  MOVWF  FE9
08C52:  MOVLW  05
08C54:  ADDWFC 03,W
08C56:  MOVWF  FEA
08C58:  MOVLW  09
08C5A:  MOVWF  FEF
....................             } 
....................          }   
08C5C:  INCF   x9D,F
08C5E:  BRA    8C14
....................       } 
....................              
....................       if(RIGHT)//Si oprime RIGHT 
08C60:  BSF    F96.1
08C62:  BTFSC  F84.1
08C64:  BRA    8C8A
....................       { 
....................          Buzz_on;delay_ms(10);Buzz_off;delay_ms(30);unidad++; 
08C66:  BSF    F8B.4
08C68:  BCF    F94.4
08C6A:  MOVLW  0A
08C6C:  MOVLB  8
08C6E:  MOVWF  x68
08C70:  MOVLB  0
08C72:  CALL   1390
08C76:  BCF    F8B.4
08C78:  BCF    F94.4
08C7A:  MOVLW  1E
08C7C:  MOVLB  8
08C7E:  MOVWF  x68
08C80:  MOVLB  0
08C82:  CALL   1390
08C86:  MOVLB  5
08C88:  INCF   x9C,F
....................       } 
....................        
....................       if(LEFT)//Si oprime Izquierda 
08C8A:  BSF    F96.2
08C8C:  BTFSC  F84.2
08C8E:  BRA    8CCC
....................       { 
....................          Buzz_on;delay_ms(10);Buzz_off;delay_ms(700);Menu=1;glcd_fillscreen(OFF); 
08C90:  BSF    F8B.4
08C92:  BCF    F94.4
08C94:  MOVLW  0A
08C96:  MOVLB  8
08C98:  MOVWF  x68
08C9A:  MOVLB  0
08C9C:  CALL   1390
08CA0:  BCF    F8B.4
08CA2:  BCF    F94.4
08CA4:  MOVLW  04
08CA6:  MOVLB  8
08CA8:  MOVWF  x60
08CAA:  MOVLW  AF
08CAC:  MOVWF  x68
08CAE:  MOVLB  0
08CB0:  CALL   1390
08CB4:  MOVLB  8
08CB6:  DECFSZ x60,F
08CB8:  BRA    8CAA
08CBA:  MOVLW  01
08CBC:  MOVLB  5
08CBE:  MOVWF  x9B
08CC0:  MOVLB  8
08CC2:  CLRF   x67
08CC4:  MOVLB  0
08CC6:  CALL   1410
08CCA:  MOVLB  5
....................       } 
....................        
....................       if(unidad>4) 
08CCC:  MOVF   x9C,W
08CCE:  SUBLW  04
08CD0:  BTFSC  FD8.0
08CD2:  BRA    8E78
....................       {glcd_fillScreen(OFF); 
08CD4:  MOVLB  8
08CD6:  CLRF   x67
08CD8:  MOVLB  0
08CDA:  CALL   1410
....................           
....................          if((Contrasena[0]==Password[0])&&(Contrasena[1]==Password[1])&&(Contrasena[2]==Password[2])&&(Contrasena[3]==Password[3])) 
08CDE:  MOVLB  5
08CE0:  MOVF   xEC,W
08CE2:  SUBWF  xE8,W
08CE4:  BNZ   8DB6
08CE6:  MOVF   xED,W
08CE8:  SUBWF  xE9,W
08CEA:  BNZ   8DB6
08CEC:  MOVF   xEE,W
08CEE:  SUBWF  xEA,W
08CF0:  BNZ   8DB6
08CF2:  MOVF   xEF,W
08CF4:  SUBWF  xEB,W
08CF6:  BNZ   8DB6
....................          { 
....................             glcd_fillScreen(OFF); 
08CF8:  MOVLB  8
08CFA:  CLRF   x67
08CFC:  MOVLB  0
08CFE:  CALL   1410
....................             strcpy(Menus.Letra,"Clave"); 
08D02:  MOVLW  08
08D04:  MOVWF  FEA
08D06:  MOVLW  40
08D08:  MOVWF  FE9
08D0A:  MOVFF  FF2,860
08D0E:  BCF    FF2.7
08D10:  MOVLW  00
08D12:  CALL   07D8
08D16:  TBLRD*-
08D18:  TBLRD*+
08D1A:  MOVF   FF5,W
08D1C:  MOVWF  FEE
08D1E:  IORLW  00
08D20:  BNZ   8D18
08D22:  MOVLB  8
08D24:  BTFSC  x60.7
08D26:  BSF    FF2.7
....................             displayMenu(Menus.Letra,30,0,0,2); 
08D28:  MOVLW  08
08D2A:  MOVWF  x68
08D2C:  MOVLW  40
08D2E:  MOVWF  x67
08D30:  MOVLW  1E
08D32:  MOVWF  x69
08D34:  CLRF   x6A
08D36:  CLRF   x6B
08D38:  MOVLW  02
08D3A:  MOVWF  x6C
08D3C:  MOVLB  0
08D3E:  CALL   1A3E
....................             strcpy(Menus.Letra,"Correcta"); 
08D42:  MOVLW  08
08D44:  MOVWF  FEA
08D46:  MOVLW  40
08D48:  MOVWF  FE9
08D4A:  MOVFF  FF2,860
08D4E:  BCF    FF2.7
08D50:  MOVLW  00
08D52:  CALL   07FC
08D56:  TBLRD*-
08D58:  TBLRD*+
08D5A:  MOVF   FF5,W
08D5C:  MOVWF  FEE
08D5E:  IORLW  00
08D60:  BNZ   8D58
08D62:  MOVLB  8
08D64:  BTFSC  x60.7
08D66:  BSF    FF2.7
....................             displayMenu(Menus.Letra,15,30,0,2); 
08D68:  MOVLW  08
08D6A:  MOVWF  x68
08D6C:  MOVLW  40
08D6E:  MOVWF  x67
08D70:  MOVLW  0F
08D72:  MOVWF  x69
08D74:  MOVLW  1E
08D76:  MOVWF  x6A
08D78:  CLRF   x6B
08D7A:  MOVLW  02
08D7C:  MOVWF  x6C
08D7E:  MOVLB  0
08D80:  CALL   1A3E
....................             Menu=91;glcd_update();delay_ms(1000); 
08D84:  MOVLW  5B
08D86:  MOVLB  5
08D88:  MOVWF  x9B
08D8A:  MOVLB  0
08D8C:  CALL   146A
08D90:  MOVLW  04
08D92:  MOVLB  8
08D94:  MOVWF  x60
08D96:  MOVLW  FA
08D98:  MOVWF  x68
08D9A:  MOVLB  0
08D9C:  CALL   1390
08DA0:  MOVLB  8
08DA2:  DECFSZ x60,F
08DA4:  BRA    8D96
....................             glcd_fillScreen(OFF);unidad=1; 
08DA6:  CLRF   x67
08DA8:  MOVLB  0
08DAA:  CALL   1410
08DAE:  MOVLW  01
08DB0:  MOVLB  5
08DB2:  MOVWF  x9C
....................          }// Esta parte se puede agregar en el Menu 1 dependiendo de la ubicación del vidrio. 
....................          else 
08DB4:  BRA    8E78
....................          { 
....................             glcd_fillScreen(OFF); 
08DB6:  MOVLB  8
08DB8:  CLRF   x67
08DBA:  MOVLB  0
08DBC:  CALL   1410
....................             strcpy(Menus.Letra,"Clave"); 
08DC0:  MOVLW  08
08DC2:  MOVWF  FEA
08DC4:  MOVLW  40
08DC6:  MOVWF  FE9
08DC8:  MOVFF  FF2,860
08DCC:  BCF    FF2.7
08DCE:  MOVLW  00
08DD0:  CALL   07D8
08DD4:  TBLRD*-
08DD6:  TBLRD*+
08DD8:  MOVF   FF5,W
08DDA:  MOVWF  FEE
08DDC:  IORLW  00
08DDE:  BNZ   8DD6
08DE0:  MOVLB  8
08DE2:  BTFSC  x60.7
08DE4:  BSF    FF2.7
....................             displayMenu(Menus.Letra,30,0,0,2); 
08DE6:  MOVLW  08
08DE8:  MOVWF  x68
08DEA:  MOVLW  40
08DEC:  MOVWF  x67
08DEE:  MOVLW  1E
08DF0:  MOVWF  x69
08DF2:  CLRF   x6A
08DF4:  CLRF   x6B
08DF6:  MOVLW  02
08DF8:  MOVWF  x6C
08DFA:  MOVLB  0
08DFC:  CALL   1A3E
....................             strcpy(Menus.Letra,"Incorrecta"); 
08E00:  MOVLW  08
08E02:  MOVWF  FEA
08E04:  MOVLW  40
08E06:  MOVWF  FE9
08E08:  MOVFF  FF2,860
08E0C:  BCF    FF2.7
08E0E:  MOVLW  00
08E10:  CALL   0824
08E14:  TBLRD*-
08E16:  TBLRD*+
08E18:  MOVF   FF5,W
08E1A:  MOVWF  FEE
08E1C:  IORLW  00
08E1E:  BNZ   8E16
08E20:  MOVLB  8
08E22:  BTFSC  x60.7
08E24:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,30,0,2); 
08E26:  MOVLW  08
08E28:  MOVWF  x68
08E2A:  MOVLW  40
08E2C:  MOVWF  x67
08E2E:  CLRF   x69
08E30:  MOVLW  1E
08E32:  MOVWF  x6A
08E34:  CLRF   x6B
08E36:  MOVLW  02
08E38:  MOVWF  x6C
08E3A:  MOVLB  0
08E3C:  CALL   1A3E
....................             Menu=1;glcd_update();delay_ms(1000); 
08E40:  MOVLW  01
08E42:  MOVLB  5
08E44:  MOVWF  x9B
08E46:  MOVLB  0
08E48:  CALL   146A
08E4C:  MOVLW  04
08E4E:  MOVLB  8
08E50:  MOVWF  x60
08E52:  MOVLW  FA
08E54:  MOVWF  x68
08E56:  MOVLB  0
08E58:  CALL   1390
08E5C:  MOVLB  8
08E5E:  DECFSZ x60,F
08E60:  BRA    8E52
....................             glcd_fillScreen(OFF);unidad=1; 
08E62:  CLRF   x67
08E64:  MOVLB  0
08E66:  CALL   1410
08E6A:  MOVLW  01
08E6C:  MOVLB  5
08E6E:  MOVWF  x9C
....................             Contrasena[0]=0;Contrasena[1]=0;Contrasena[2]=0;Contrasena[3]=0; 
08E70:  CLRF   xE8
08E72:  CLRF   xE9
08E74:  CLRF   xEA
08E76:  CLRF   xEB
....................          } 
....................       } 
....................     }     
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................       if(Menu==91){ // Menu de Cambio de Contraseña 
08E78:  MOVF   x9B,W
08E7A:  SUBLW  5B
08E7C:  BTFSS  FD8.2
08E7E:  BRA    92BA
....................          
....................       strcpy(Menus.Letra,"Clave Nueva"); 
08E80:  MOVLW  08
08E82:  MOVWF  FEA
08E84:  MOVLW  40
08E86:  MOVWF  FE9
08E88:  MOVFF  FF2,860
08E8C:  BCF    FF2.7
08E8E:  MOVLW  00
08E90:  MOVLB  0
08E92:  CALL   0C40
08E96:  TBLRD*-
08E98:  TBLRD*+
08E9A:  MOVF   FF5,W
08E9C:  MOVWF  FEE
08E9E:  IORLW  00
08EA0:  BNZ   8E98
08EA2:  MOVLB  8
08EA4:  BTFSC  x60.7
08EA6:  BSF    FF2.7
....................       displayMenu(Menus.Letra,0,0,1,2);      
08EA8:  MOVLW  08
08EAA:  MOVWF  x68
08EAC:  MOVLW  40
08EAE:  MOVWF  x67
08EB0:  CLRF   x69
08EB2:  CLRF   x6A
08EB4:  MOVLW  01
08EB6:  MOVWF  x6B
08EB8:  MOVLW  02
08EBA:  MOVWF  x6C
08EBC:  MOVLB  0
08EBE:  CALL   1A3E
....................        
....................       if(unidad==1) 
08EC2:  MOVLB  5
08EC4:  DECFSZ x9C,W
08EC6:  BRA    8F26
....................       { 
....................          displayContrasena(Password[0],20,30,1); 
08EC8:  MOVFF  5EC,869
08ECC:  MOVLW  14
08ECE:  MOVLB  8
08ED0:  MOVWF  x6A
08ED2:  MOVLW  1E
08ED4:  MOVWF  x6B
08ED6:  MOVLW  01
08ED8:  MOVWF  x6C
08EDA:  MOVLB  0
08EDC:  CALL   1C90
....................          displayContrasena(Password[1],40,30,0); 
08EE0:  MOVFF  5ED,869
08EE4:  MOVLW  28
08EE6:  MOVLB  8
08EE8:  MOVWF  x6A
08EEA:  MOVLW  1E
08EEC:  MOVWF  x6B
08EEE:  CLRF   x6C
08EF0:  MOVLB  0
08EF2:  CALL   1C90
....................          displayContrasena(Password[2],60,30,0); 
08EF6:  MOVFF  5EE,869
08EFA:  MOVLW  3C
08EFC:  MOVLB  8
08EFE:  MOVWF  x6A
08F00:  MOVLW  1E
08F02:  MOVWF  x6B
08F04:  CLRF   x6C
08F06:  MOVLB  0
08F08:  CALL   1C90
....................          displayContrasena(Password[3],80,30,0); 
08F0C:  MOVFF  5EF,869
08F10:  MOVLW  50
08F12:  MOVLB  8
08F14:  MOVWF  x6A
08F16:  MOVLW  1E
08F18:  MOVWF  x6B
08F1A:  CLRF   x6C
08F1C:  MOVLB  0
08F1E:  CALL   1C90
....................       } 
....................       else 
08F22:  BRA    904E
08F24:  MOVLB  5
....................       { 
....................          if(unidad==2) 
08F26:  MOVF   x9C,W
08F28:  SUBLW  02
08F2A:  BNZ   8F8A
....................          { 
....................             displayContrasena(Password[0],20,30,0); 
08F2C:  MOVFF  5EC,869
08F30:  MOVLW  14
08F32:  MOVLB  8
08F34:  MOVWF  x6A
08F36:  MOVLW  1E
08F38:  MOVWF  x6B
08F3A:  CLRF   x6C
08F3C:  MOVLB  0
08F3E:  CALL   1C90
....................             displayContrasena(Password[1],40,30,1); 
08F42:  MOVFF  5ED,869
08F46:  MOVLW  28
08F48:  MOVLB  8
08F4A:  MOVWF  x6A
08F4C:  MOVLW  1E
08F4E:  MOVWF  x6B
08F50:  MOVLW  01
08F52:  MOVWF  x6C
08F54:  MOVLB  0
08F56:  CALL   1C90
....................             displayContrasena(Password[2],60,30,0); 
08F5A:  MOVFF  5EE,869
08F5E:  MOVLW  3C
08F60:  MOVLB  8
08F62:  MOVWF  x6A
08F64:  MOVLW  1E
08F66:  MOVWF  x6B
08F68:  CLRF   x6C
08F6A:  MOVLB  0
08F6C:  CALL   1C90
....................             displayContrasena(Password[3],80,30,0); 
08F70:  MOVFF  5EF,869
08F74:  MOVLW  50
08F76:  MOVLB  8
08F78:  MOVWF  x6A
08F7A:  MOVLW  1E
08F7C:  MOVWF  x6B
08F7E:  CLRF   x6C
08F80:  MOVLB  0
08F82:  CALL   1C90
....................          } 
....................          else 
08F86:  BRA    904E
08F88:  MOVLB  5
....................          { 
....................             if(unidad==3) 
08F8A:  MOVF   x9C,W
08F8C:  SUBLW  03
08F8E:  BNZ   8FEE
....................             { 
....................                displayContrasena(Password[0],20,30,0); 
08F90:  MOVFF  5EC,869
08F94:  MOVLW  14
08F96:  MOVLB  8
08F98:  MOVWF  x6A
08F9A:  MOVLW  1E
08F9C:  MOVWF  x6B
08F9E:  CLRF   x6C
08FA0:  MOVLB  0
08FA2:  CALL   1C90
....................                displayContrasena(Password[1],40,30,0); 
08FA6:  MOVFF  5ED,869
08FAA:  MOVLW  28
08FAC:  MOVLB  8
08FAE:  MOVWF  x6A
08FB0:  MOVLW  1E
08FB2:  MOVWF  x6B
08FB4:  CLRF   x6C
08FB6:  MOVLB  0
08FB8:  CALL   1C90
....................                displayContrasena(Password[2],60,30,1); 
08FBC:  MOVFF  5EE,869
08FC0:  MOVLW  3C
08FC2:  MOVLB  8
08FC4:  MOVWF  x6A
08FC6:  MOVLW  1E
08FC8:  MOVWF  x6B
08FCA:  MOVLW  01
08FCC:  MOVWF  x6C
08FCE:  MOVLB  0
08FD0:  CALL   1C90
....................                displayContrasena(Password[3],80,30,0); 
08FD4:  MOVFF  5EF,869
08FD8:  MOVLW  50
08FDA:  MOVLB  8
08FDC:  MOVWF  x6A
08FDE:  MOVLW  1E
08FE0:  MOVWF  x6B
08FE2:  CLRF   x6C
08FE4:  MOVLB  0
08FE6:  CALL   1C90
....................             } 
....................             else 
08FEA:  BRA    904E
08FEC:  MOVLB  5
....................             { 
....................                if(unidad==4) 
08FEE:  MOVF   x9C,W
08FF0:  SUBLW  04
08FF2:  BNZ   9050
....................                { 
....................                   displayContrasena(Password[0],20,30,0); 
08FF4:  MOVFF  5EC,869
08FF8:  MOVLW  14
08FFA:  MOVLB  8
08FFC:  MOVWF  x6A
08FFE:  MOVLW  1E
09000:  MOVWF  x6B
09002:  CLRF   x6C
09004:  MOVLB  0
09006:  CALL   1C90
....................                   displayContrasena(Password[1],40,30,0); 
0900A:  MOVFF  5ED,869
0900E:  MOVLW  28
09010:  MOVLB  8
09012:  MOVWF  x6A
09014:  MOVLW  1E
09016:  MOVWF  x6B
09018:  CLRF   x6C
0901A:  MOVLB  0
0901C:  CALL   1C90
....................                   displayContrasena(Password[2],60,30,0); 
09020:  MOVFF  5EE,869
09024:  MOVLW  3C
09026:  MOVLB  8
09028:  MOVWF  x6A
0902A:  MOVLW  1E
0902C:  MOVWF  x6B
0902E:  CLRF   x6C
09030:  MOVLB  0
09032:  CALL   1C90
....................                   displayContrasena(Password[3],80,30,1); 
09036:  MOVFF  5EF,869
0903A:  MOVLW  50
0903C:  MOVLB  8
0903E:  MOVWF  x6A
09040:  MOVLW  1E
09042:  MOVWF  x6B
09044:  MOVLW  01
09046:  MOVWF  x6C
09048:  MOVLB  0
0904A:  CALL   1C90
0904E:  MOVLB  5
....................                } 
....................             } 
....................          } 
....................       } 
....................        
....................       if(UP)//Si oprime hacia arriba 
09050:  BSF    F92.5
09052:  BTFSC  F80.5
09054:  BRA    90CA
....................       { 
....................          Buzz_on;delay_ms(10);Buzz_off; 
09056:  BSF    F8B.4
09058:  BCF    F94.4
0905A:  MOVLW  0A
0905C:  MOVLB  8
0905E:  MOVWF  x68
09060:  MOVLB  0
09062:  CALL   1390
09066:  BCF    F8B.4
09068:  BCF    F94.4
....................          delay_ms(30); 
0906A:  MOVLW  1E
0906C:  MOVLB  8
0906E:  MOVWF  x68
09070:  MOVLB  0
09072:  CALL   1390
....................          for(i=1;i<=4;i++) 
09076:  MOVLW  01
09078:  MOVLB  5
0907A:  MOVWF  x9D
0907C:  MOVF   x9D,W
0907E:  SUBLW  04
09080:  BNC   90CA
....................          { 
....................             if(unidad==i) 
09082:  MOVF   x9D,W
09084:  SUBWF  x9C,W
09086:  BNZ   90C6
....................             { 
....................                Password[i-1]++; 
09088:  MOVLW  01
0908A:  SUBWF  x9D,W
0908C:  CLRF   03
0908E:  ADDLW  EC
09090:  MOVWF  FE9
09092:  MOVLW  05
09094:  ADDWFC 03,W
09096:  MOVWF  FEA
09098:  INCF   FEF,F
....................                if(Password[i-1]>9)    
0909A:  MOVLW  01
0909C:  SUBWF  x9D,W
0909E:  CLRF   03
090A0:  ADDLW  EC
090A2:  MOVWF  FE9
090A4:  MOVLW  05
090A6:  ADDWFC 03,W
090A8:  MOVWF  FEA
090AA:  BTFSC  FEF.7
090AC:  BRA    90C6
090AE:  MOVF   FEF,W
090B0:  SUBLW  09
090B2:  BC    90C6
....................                { 
....................                   Password[i-1]=0; 
090B4:  MOVLW  01
090B6:  SUBWF  x9D,W
090B8:  CLRF   03
090BA:  ADDLW  EC
090BC:  MOVWF  FE9
090BE:  MOVLW  05
090C0:  ADDWFC 03,W
090C2:  MOVWF  FEA
090C4:  CLRF   FEF
....................                } 
....................             } 
....................          } 
090C6:  INCF   x9D,F
090C8:  BRA    907C
....................       } 
....................              
....................       if(DOWN)//Si oprime hacia abajo 
090CA:  BSF    F96.0
090CC:  BTFSC  F84.0
090CE:  BRA    9142
....................       { 
....................          Buzz_on;delay_ms(10);Buzz_off; 
090D0:  BSF    F8B.4
090D2:  BCF    F94.4
090D4:  MOVLW  0A
090D6:  MOVLB  8
090D8:  MOVWF  x68
090DA:  MOVLB  0
090DC:  CALL   1390
090E0:  BCF    F8B.4
090E2:  BCF    F94.4
....................          delay_ms(30); 
090E4:  MOVLW  1E
090E6:  MOVLB  8
090E8:  MOVWF  x68
090EA:  MOVLB  0
090EC:  CALL   1390
....................          for(i=1;i<=4;i++) 
090F0:  MOVLW  01
090F2:  MOVLB  5
090F4:  MOVWF  x9D
090F6:  MOVF   x9D,W
090F8:  SUBLW  04
090FA:  BNC   9142
....................             { 
....................                if(unidad==i) 
090FC:  MOVF   x9D,W
090FE:  SUBWF  x9C,W
09100:  BNZ   913E
....................                { 
....................                   Password[i-1]--; 
09102:  MOVLW  01
09104:  SUBWF  x9D,W
09106:  CLRF   03
09108:  ADDLW  EC
0910A:  MOVWF  FE9
0910C:  MOVLW  05
0910E:  ADDWFC 03,W
09110:  MOVWF  FEA
09112:  DECF   FEF,F
....................                   if(Password[i-1]<0) 
09114:  MOVLW  01
09116:  SUBWF  x9D,W
09118:  CLRF   03
0911A:  ADDLW  EC
0911C:  MOVWF  FE9
0911E:  MOVLW  05
09120:  ADDWFC 03,W
09122:  MOVWF  FEA
09124:  BTFSC  FEF.7
09126:  BRA    912A
09128:  BRA    913E
....................                   { 
....................                      Password[i-1]=9; 
0912A:  MOVLW  01
0912C:  SUBWF  x9D,W
0912E:  CLRF   03
09130:  ADDLW  EC
09132:  MOVWF  FE9
09134:  MOVLW  05
09136:  ADDWFC 03,W
09138:  MOVWF  FEA
0913A:  MOVLW  09
0913C:  MOVWF  FEF
....................                   } 
....................                } 
....................             }        
0913E:  INCF   x9D,F
09140:  BRA    90F6
....................       } 
....................              
....................       if(RIGHT)//Si oprime RIGHT 
09142:  BSF    F96.1
09144:  BTFSC  F84.1
09146:  BRA    916C
....................       { 
....................          Buzz_on;delay_ms(10);Buzz_off;delay_ms(30);unidad++; 
09148:  BSF    F8B.4
0914A:  BCF    F94.4
0914C:  MOVLW  0A
0914E:  MOVLB  8
09150:  MOVWF  x68
09152:  MOVLB  0
09154:  CALL   1390
09158:  BCF    F8B.4
0915A:  BCF    F94.4
0915C:  MOVLW  1E
0915E:  MOVLB  8
09160:  MOVWF  x68
09162:  MOVLB  0
09164:  CALL   1390
09168:  MOVLB  5
0916A:  INCF   x9C,F
....................       } 
....................        
....................       if(LEFT)//Si oprime Izquierda 
0916C:  BSF    F96.2
0916E:  BTFSC  F84.2
09170:  BRA    91AE
....................       { 
....................          Buzz_on;delay_ms(10);Buzz_off;delay_ms(700);Menu=1;glcd_fillscreen(OFF); 
09172:  BSF    F8B.4
09174:  BCF    F94.4
09176:  MOVLW  0A
09178:  MOVLB  8
0917A:  MOVWF  x68
0917C:  MOVLB  0
0917E:  CALL   1390
09182:  BCF    F8B.4
09184:  BCF    F94.4
09186:  MOVLW  04
09188:  MOVLB  8
0918A:  MOVWF  x60
0918C:  MOVLW  AF
0918E:  MOVWF  x68
09190:  MOVLB  0
09192:  CALL   1390
09196:  MOVLB  8
09198:  DECFSZ x60,F
0919A:  BRA    918C
0919C:  MOVLW  01
0919E:  MOVLB  5
091A0:  MOVWF  x9B
091A2:  MOVLB  8
091A4:  CLRF   x67
091A6:  MOVLB  0
091A8:  CALL   1410
091AC:  MOVLB  5
....................       } 
....................        
....................       if(unidad>4) 
091AE:  MOVF   x9C,W
091B0:  SUBLW  04
091B2:  BTFSC  FD8.0
091B4:  BRA    92BA
....................       { 
....................          Opcion=1;unidad=1; 
091B6:  MOVLW  01
091B8:  MOVWF  xA2
091BA:  MOVWF  x9C
....................          write_eeprom(460,Password[0]); 
091BC:  MOVWF  FAA
091BE:  MOVLW  CC
091C0:  MOVWF  FA9
091C2:  MOVFF  5EC,FA8
091C6:  BCF    FA6.6
091C8:  BCF    FA6.7
091CA:  BSF    FA6.2
091CC:  MOVF   FF2,W
091CE:  MOVWF  00
091D0:  BCF    FF2.7
091D2:  MOVLB  F
091D4:  MOVLW  55
091D6:  MOVWF  FA7
091D8:  MOVLW  AA
091DA:  MOVWF  FA7
091DC:  BSF    FA6.1
091DE:  BTFSC  FA6.1
091E0:  BRA    91DE
091E2:  BCF    FA6.2
091E4:  MOVF   00,W
091E6:  IORWF  FF2,F
....................          delay_ms(50);    
091E8:  MOVLW  32
091EA:  MOVLB  8
091EC:  MOVWF  x68
091EE:  MOVLB  0
091F0:  CALL   1390
....................          write_eeprom(461,Password[1]); 
091F4:  MOVLW  01
091F6:  MOVWF  FAA
091F8:  MOVLW  CD
091FA:  MOVWF  FA9
091FC:  MOVFF  5ED,FA8
09200:  BCF    FA6.6
09202:  BCF    FA6.7
09204:  BSF    FA6.2
09206:  MOVF   FF2,W
09208:  MOVWF  00
0920A:  BCF    FF2.7
0920C:  MOVLB  F
0920E:  MOVLW  55
09210:  MOVWF  FA7
09212:  MOVLW  AA
09214:  MOVWF  FA7
09216:  BSF    FA6.1
09218:  BTFSC  FA6.1
0921A:  BRA    9218
0921C:  BCF    FA6.2
0921E:  MOVF   00,W
09220:  IORWF  FF2,F
....................          delay_ms(50);    
09222:  MOVLW  32
09224:  MOVLB  8
09226:  MOVWF  x68
09228:  MOVLB  0
0922A:  CALL   1390
....................          write_eeprom(462,Password[2]); 
0922E:  MOVLW  01
09230:  MOVWF  FAA
09232:  MOVLW  CE
09234:  MOVWF  FA9
09236:  MOVFF  5EE,FA8
0923A:  BCF    FA6.6
0923C:  BCF    FA6.7
0923E:  BSF    FA6.2
09240:  MOVF   FF2,W
09242:  MOVWF  00
09244:  BCF    FF2.7
09246:  MOVLB  F
09248:  MOVLW  55
0924A:  MOVWF  FA7
0924C:  MOVLW  AA
0924E:  MOVWF  FA7
09250:  BSF    FA6.1
09252:  BTFSC  FA6.1
09254:  BRA    9252
09256:  BCF    FA6.2
09258:  MOVF   00,W
0925A:  IORWF  FF2,F
....................          delay_ms(50);    
0925C:  MOVLW  32
0925E:  MOVLB  8
09260:  MOVWF  x68
09262:  MOVLB  0
09264:  CALL   1390
....................          write_eeprom(463,Password[3]); 
09268:  MOVLW  01
0926A:  MOVWF  FAA
0926C:  MOVLW  CF
0926E:  MOVWF  FA9
09270:  MOVFF  5EF,FA8
09274:  BCF    FA6.6
09276:  BCF    FA6.7
09278:  BSF    FA6.2
0927A:  MOVF   FF2,W
0927C:  MOVWF  00
0927E:  BCF    FF2.7
09280:  MOVLB  F
09282:  MOVLW  55
09284:  MOVWF  FA7
09286:  MOVLW  AA
09288:  MOVWF  FA7
0928A:  BSF    FA6.1
0928C:  BTFSC  FA6.1
0928E:  BRA    928C
09290:  BCF    FA6.2
09292:  MOVF   00,W
09294:  IORWF  FF2,F
....................          delay_ms(1000);glcd_fillScreen(OFF);Menu=1; 
09296:  MOVLW  04
09298:  MOVLB  8
0929A:  MOVWF  x60
0929C:  MOVLW  FA
0929E:  MOVWF  x68
092A0:  MOVLB  0
092A2:  CALL   1390
092A6:  MOVLB  8
092A8:  DECFSZ x60,F
092AA:  BRA    929C
092AC:  CLRF   x67
092AE:  MOVLB  0
092B0:  CALL   1410
092B4:  MOVLW  01
092B6:  MOVLB  5
092B8:  MOVWF  x9B
....................       } 
....................     }     
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................  
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................       if(Menu>10 && Menu<16){ //Menu Editar Programa 01, Programa 02, Programa 03, Programa 04 y Programa 05 
092BA:  MOVF   x9B,W
092BC:  SUBLW  0A
092BE:  BTFSC  FD8.0
092C0:  BRA    95B2
092C2:  MOVF   x9B,W
092C4:  SUBLW  0F
092C6:  BTFSS  FD8.0
092C8:  BRA    95B2
....................        
....................          if(Opcion>3) 
092CA:  MOVF   xA2,W
092CC:  SUBLW  03
092CE:  BC    92DC
....................          { 
....................             Opcion=1; 
092D0:  MOVLW  01
092D2:  MOVWF  xA2
....................             if(i<15){ 
092D4:  MOVF   x9D,W
092D6:  SUBLW  0E
092D8:  BNC   92DC
....................                i++;   
092DA:  INCF   x9D,F
....................             } 
....................          } 
....................           
....................          if(Opcion<1) 
092DC:  MOVF   xA2,F
092DE:  BNZ   92EA
....................          { 
....................             if(i>0) 
092E0:  MOVF   x9D,F
092E2:  BZ    92E6
....................                i--; 
092E4:  DECF   x9D,F
....................                 
....................             Opcion=3; 
092E6:  MOVLW  03
092E8:  MOVWF  xA2
....................          } 
....................           
....................          if(Menu==11) 
092EA:  MOVF   x9B,W
092EC:  SUBLW  0B
092EE:  BNZ   92F4
....................             Programa=1; 
092F0:  MOVLW  01
092F2:  MOVWF  x98
....................           
....................          if(Menu==12) 
092F4:  MOVF   x9B,W
092F6:  SUBLW  0C
092F8:  BNZ   92FE
....................             Programa=2; 
092FA:  MOVLW  02
092FC:  MOVWF  x98
....................              
....................          if(Menu==13) 
092FE:  MOVF   x9B,W
09300:  SUBLW  0D
09302:  BNZ   9308
....................             Programa=3; 
09304:  MOVLW  03
09306:  MOVWF  x98
....................              
....................          if(Menu==14) 
09308:  MOVF   x9B,W
0930A:  SUBLW  0E
0930C:  BNZ   9312
....................             Programa=4; 
0930E:  MOVLW  04
09310:  MOVWF  x98
....................              
....................          if(Menu==15) 
09312:  MOVF   x9B,W
09314:  SUBLW  0F
09316:  BNZ   931C
....................             Programa=5;    
09318:  MOVLW  05
0931A:  MOVWF  x98
....................           
....................          MuestraSegmento(Opcion,i,Programa); 
0931C:  MOVFF  5A2,860
09320:  MOVFF  59D,861
09324:  MOVFF  598,862
09328:  MOVLB  0
0932A:  GOTO   443E
....................           
....................          if(RIGHT && LEFT){ 
0932E:  BSF    F96.1
09330:  BTFSC  F84.1
09332:  BRA    9560
09334:  BSF    F96.2
09336:  BTFSC  F84.2
09338:  BRA    9560
....................             Buzz_on;Menu=5;Opcion=1;glcd_fillscreen(OFF);delay_ms(500);Buzz_off; 
0933A:  BSF    F8B.4
0933C:  BCF    F94.4
0933E:  MOVLW  05
09340:  MOVLB  5
09342:  MOVWF  x9B
09344:  MOVLW  01
09346:  MOVWF  xA2
09348:  MOVLB  8
0934A:  CLRF   x67
0934C:  MOVLB  0
0934E:  CALL   1410
09352:  MOVLW  02
09354:  MOVLB  8
09356:  MOVWF  x60
09358:  MOVLW  FA
0935A:  MOVWF  x68
0935C:  MOVLB  0
0935E:  CALL   1390
09362:  MOVLB  8
09364:  DECFSZ x60,F
09366:  BRA    9358
09368:  BCF    F8B.4
0936A:  BCF    F94.4
....................              
....................             for(i=0;i<Pasos;i++){ 
0936C:  MOVLB  5
0936E:  CLRF   x9D
09370:  MOVF   x9D,W
09372:  SUBLW  0F
09374:  BTFSS  FD8.0
09376:  BRA    955E
....................                delay_ms(10);     
09378:  MOVLW  0A
0937A:  MOVLB  8
0937C:  MOVWF  x68
0937E:  MOVLB  0
09380:  CALL   1390
....................                write_eeprom((i*2)+((Pasos*4)*(Programa-1)),make8(Temperatura1[i+((Programa-1)*Pasos)],0)); 
09384:  BCF    FD8.0
09386:  MOVLB  5
09388:  RLCF   x9D,W
0938A:  MOVLB  8
0938C:  MOVWF  x60
0938E:  MOVLW  01
09390:  MOVLB  5
09392:  SUBWF  x98,W
09394:  MULLW  40
09396:  MOVF   FF3,W
09398:  MOVLB  8
0939A:  ADDWF  x60,F
0939C:  MOVLW  01
0939E:  MOVLB  5
093A0:  SUBWF  x98,W
093A2:  MULLW  10
093A4:  MOVF   FF3,W
093A6:  ADDWF  x9D,W
093A8:  MOVWF  00
093AA:  BCF    FD8.0
093AC:  RLCF   00,F
093AE:  MOVF   00,W
093B0:  CLRF   03
093B2:  ADDLW  60
093B4:  MOVWF  FE9
093B6:  MOVLW  06
093B8:  ADDWFC 03,W
093BA:  MOVWF  FEA
093BC:  MOVFF  FEC,862
093C0:  MOVF   FED,F
093C2:  MOVFF  FEF,861
093C6:  MOVFF  861,863
093CA:  CLRF   FAA
093CC:  MOVFF  860,FA9
093D0:  MOVFF  863,FA8
093D4:  BCF    FA6.6
093D6:  BCF    FA6.7
093D8:  BSF    FA6.2
093DA:  MOVF   FF2,W
093DC:  MOVWF  00
093DE:  BCF    FF2.7
093E0:  MOVLB  F
093E2:  MOVLW  55
093E4:  MOVWF  FA7
093E6:  MOVLW  AA
093E8:  MOVWF  FA7
093EA:  BSF    FA6.1
093EC:  BTFSC  FA6.1
093EE:  BRA    93EC
093F0:  BCF    FA6.2
093F2:  MOVF   00,W
093F4:  IORWF  FF2,F
....................                delay_ms(10);     
093F6:  MOVLW  0A
093F8:  MOVLB  8
093FA:  MOVWF  x68
093FC:  MOVLB  0
093FE:  CALL   1390
....................                write_eeprom((i*2)+1+((Pasos*4)*(Programa-1)),make8(Temperatura1[i+((Programa-1)*Pasos)],1)); 
09402:  BCF    FD8.0
09404:  MOVLB  5
09406:  RLCF   x9D,W
09408:  ADDLW  01
0940A:  MOVLB  8
0940C:  MOVWF  x60
0940E:  MOVLW  01
09410:  MOVLB  5
09412:  SUBWF  x98,W
09414:  MULLW  40
09416:  MOVF   FF3,W
09418:  MOVLB  8
0941A:  ADDWF  x60,F
0941C:  MOVLW  01
0941E:  MOVLB  5
09420:  SUBWF  x98,W
09422:  MULLW  10
09424:  MOVF   FF3,W
09426:  ADDWF  x9D,W
09428:  MOVWF  00
0942A:  BCF    FD8.0
0942C:  RLCF   00,F
0942E:  MOVF   00,W
09430:  CLRF   03
09432:  ADDLW  60
09434:  MOVWF  FE9
09436:  MOVLW  06
09438:  ADDWFC 03,W
0943A:  MOVWF  FEA
0943C:  MOVFF  FEC,862
09440:  MOVF   FED,F
09442:  MOVFF  FEF,861
09446:  MOVFF  862,863
0944A:  CLRF   FAA
0944C:  MOVFF  860,FA9
09450:  MOVFF  863,FA8
09454:  BCF    FA6.6
09456:  BCF    FA6.7
09458:  BSF    FA6.2
0945A:  MOVF   FF2,W
0945C:  MOVWF  00
0945E:  BCF    FF2.7
09460:  MOVLB  F
09462:  MOVLW  55
09464:  MOVWF  FA7
09466:  MOVLW  AA
09468:  MOVWF  FA7
0946A:  BSF    FA6.1
0946C:  BTFSC  FA6.1
0946E:  BRA    946C
09470:  BCF    FA6.2
09472:  MOVF   00,W
09474:  IORWF  FF2,F
....................                delay_ms(10);     
09476:  MOVLW  0A
09478:  MOVLB  8
0947A:  MOVWF  x68
0947C:  MOVLB  0
0947E:  CALL   1390
....................                write_eeprom(i+(((Pasos*4)*Programa)-((Pasos*2))),Horas1[i+((Programa-1)*Pasos)]); 
09482:  MOVLB  5
09484:  MOVF   x98,W
09486:  MULLW  40
09488:  MOVF   FF3,W
0948A:  ADDLW  E0
0948C:  ADDWF  x9D,W
0948E:  MOVLB  8
09490:  MOVWF  x60
09492:  MOVLW  01
09494:  MOVLB  5
09496:  SUBWF  x98,W
09498:  MULLW  10
0949A:  MOVF   FF3,W
0949C:  ADDWF  x9D,W
0949E:  MOVWF  00
094A0:  BCF    FD8.0
094A2:  RLCF   00,F
094A4:  MOVF   00,W
094A6:  CLRF   03
094A8:  MOVWF  FE9
094AA:  MOVLW  07
094AC:  ADDWF  03,W
094AE:  MOVWF  FEA
094B0:  MOVFF  FEC,862
094B4:  MOVF   FED,F
094B6:  MOVFF  FEF,861
094BA:  CLRF   FAA
094BC:  MOVFF  860,FA9
094C0:  MOVFF  861,FA8
094C4:  BCF    FA6.6
094C6:  BCF    FA6.7
094C8:  BSF    FA6.2
094CA:  MOVF   FF2,W
094CC:  MOVWF  00
094CE:  BCF    FF2.7
094D0:  MOVLB  F
094D2:  MOVLW  55
094D4:  MOVWF  FA7
094D6:  MOVLW  AA
094D8:  MOVWF  FA7
094DA:  BSF    FA6.1
094DC:  BTFSC  FA6.1
094DE:  BRA    94DC
094E0:  BCF    FA6.2
094E2:  MOVF   00,W
094E4:  IORWF  FF2,F
....................                delay_ms(10);     
094E6:  MOVLW  0A
094E8:  MOVLB  8
094EA:  MOVWF  x68
094EC:  MOVLB  0
094EE:  CALL   1390
....................                write_eeprom(i+(((Pasos*4)*Programa)-Pasos),Minutos1[i+((Programa-1)*Pasos)]); 
094F2:  MOVLB  5
094F4:  MOVF   x98,W
094F6:  MULLW  40
094F8:  MOVF   FF3,W
094FA:  ADDLW  F0
094FC:  ADDWF  x9D,W
094FE:  MOVLB  8
09500:  MOVWF  x60
09502:  MOVLW  01
09504:  MOVLB  5
09506:  SUBWF  x98,W
09508:  MULLW  10
0950A:  MOVF   FF3,W
0950C:  ADDWF  x9D,W
0950E:  MOVWF  00
09510:  BCF    FD8.0
09512:  RLCF   00,F
09514:  MOVF   00,W
09516:  CLRF   03
09518:  ADDLW  A0
0951A:  MOVWF  FE9
0951C:  MOVLW  07
0951E:  ADDWFC 03,W
09520:  MOVWF  FEA
09522:  MOVFF  FEC,862
09526:  MOVF   FED,F
09528:  MOVFF  FEF,861
0952C:  CLRF   FAA
0952E:  MOVFF  860,FA9
09532:  MOVFF  861,FA8
09536:  BCF    FA6.6
09538:  BCF    FA6.7
0953A:  BSF    FA6.2
0953C:  MOVF   FF2,W
0953E:  MOVWF  00
09540:  BCF    FF2.7
09542:  MOVLB  F
09544:  MOVLW  55
09546:  MOVWF  FA7
09548:  MOVLW  AA
0954A:  MOVWF  FA7
0954C:  BSF    FA6.1
0954E:  BTFSC  FA6.1
09550:  BRA    954E
09552:  BCF    FA6.2
09554:  MOVF   00,W
09556:  IORWF  FF2,F
....................             }  
09558:  MOVLB  5
0955A:  INCF   x9D,F
0955C:  BRA    9370
0955E:  MOVLB  0
....................          } 
....................           
....................          if(RIGHT)//Si oprime SET 
09560:  BSF    F96.1
09562:  BTFSC  F84.1
09564:  BRA    9588
....................          {  
....................             Buzz_on;delay_ms(50);Opcion++;glcd_fillscreen(OFF);Buzz_off; 
09566:  BSF    F8B.4
09568:  BCF    F94.4
0956A:  MOVLW  32
0956C:  MOVLB  8
0956E:  MOVWF  x68
09570:  MOVLB  0
09572:  CALL   1390
09576:  MOVLB  5
09578:  INCF   xA2,F
0957A:  MOVLB  8
0957C:  CLRF   x67
0957E:  MOVLB  0
09580:  CALL   1410
09584:  BCF    F8B.4
09586:  BCF    F94.4
....................          } 
....................           
....................          if(LEFT){ 
09588:  BSF    F96.2
0958A:  BTFSC  F84.2
0958C:  BRA    95B0
....................             Buzz_on;delay_ms(50);Opcion--;glcd_fillscreen(OFF);Buzz_off; 
0958E:  BSF    F8B.4
09590:  BCF    F94.4
09592:  MOVLW  32
09594:  MOVLB  8
09596:  MOVWF  x68
09598:  MOVLB  0
0959A:  CALL   1390
0959E:  MOVLB  5
095A0:  DECF   xA2,F
095A2:  MOVLB  8
095A4:  CLRF   x67
095A6:  MOVLB  0
095A8:  CALL   1410
095AC:  BCF    F8B.4
095AE:  BCF    F94.4
095B0:  MOVLB  5
....................          } 
....................    } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------        
....................  
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................       if(Menu==20){ //Menu de Funcionamiento 
095B2:  MOVF   x9B,W
095B4:  SUBLW  14
095B6:  BTFSS  FD8.2
095B8:  GOTO   A7AE
....................        
....................       // Muestra imagen de fondo en Display GLCD       
....................       glcd_imagen(5); 
095BC:  MOVLW  05
095BE:  MOVLB  8
095C0:  MOVWF  x60
095C2:  MOVLB  0
095C4:  GOTO   50E0
....................       //flag_display=0; 
....................  
....................       if(UP && DOWN)//Si oprime hacia abajo 
095C8:  BSF    F92.5
095CA:  BTFSC  F80.5
095CC:  BRA    95F0
095CE:  BSF    F96.0
095D0:  BTFSC  F84.0
095D2:  BRA    95F0
....................       { 
....................          glcd_init(ON);delay_ms(200);flag_display=!flag_display;          
095D4:  MOVLW  01
095D6:  MOVLB  8
095D8:  MOVWF  x60
095DA:  MOVLB  0
095DC:  CALL   1522
095E0:  MOVLW  C8
095E2:  MOVLB  8
095E4:  MOVWF  x68
095E6:  MOVLB  0
095E8:  CALL   1390
095EC:  MOVLB  5
095EE:  BTG    x95.5
....................       } 
....................  
....................       if(Temperatura>1250 || Temperatura<0) 
095F0:  MOVLB  8
095F2:  CLRF   x63
095F4:  MOVLW  40
095F6:  MOVWF  x62
095F8:  MOVLW  1C
095FA:  MOVWF  x61
095FC:  MOVLW  89
095FE:  MOVWF  x60
09600:  MOVFF  627,867
09604:  MOVFF  626,866
09608:  MOVFF  625,865
0960C:  MOVFF  624,864
09610:  MOVLB  0
09612:  CALL   1D7C
09616:  BC    963A
09618:  MOVFF  627,863
0961C:  MOVFF  626,862
09620:  MOVFF  625,861
09624:  MOVFF  624,860
09628:  MOVLB  8
0962A:  CLRF   x67
0962C:  CLRF   x66
0962E:  CLRF   x65
09630:  CLRF   x64
09632:  MOVLB  0
09634:  CALL   1D7C
09638:  BNC   96DA
....................       { 
....................          glcd_rect(0, 55, 127, 63, YES, OFF); 
0963A:  MOVLB  8
0963C:  CLRF   x78
0963E:  MOVLW  37
09640:  MOVWF  x79
09642:  MOVLW  7F
09644:  MOVWF  x7A
09646:  MOVLW  3F
09648:  MOVWF  x7B
0964A:  MOVLW  01
0964C:  MOVWF  x7C
0964E:  CLRF   x7D
09650:  MOVLB  0
09652:  CALL   17C4
....................          strcpy(Menus.Letra,"Status:Sensor Descon."); 
09656:  MOVLW  08
09658:  MOVWF  FEA
0965A:  MOVLW  40
0965C:  MOVWF  FE9
0965E:  MOVFF  FF2,860
09662:  BCF    FF2.7
09664:  MOVLW  00
09666:  CALL   0C6A
0966A:  TBLRD*-
0966C:  TBLRD*+
0966E:  MOVF   FF5,W
09670:  MOVWF  FEE
09672:  IORLW  00
09674:  BNZ   966C
09676:  MOVLB  8
09678:  BTFSC  x60.7
0967A:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,55,2,1); 
0967C:  MOVLW  08
0967E:  MOVWF  x68
09680:  MOVLW  40
09682:  MOVWF  x67
09684:  CLRF   x69
09686:  MOVLW  37
09688:  MOVWF  x6A
0968A:  MOVLW  02
0968C:  MOVWF  x6B
0968E:  MOVLW  01
09690:  MOVWF  x6C
09692:  MOVLB  0
09694:  CALL   1A3E
....................          tiempo_esterilizacion=0; 
09698:  MOVLB  5
0969A:  CLRF   xA3
....................          Resistencia_off; 
0969C:  BCF    F8B.0
0969E:  BCF    F94.0
....................          Tpulso=0.0; 
096A0:  CLRF   xFB
096A2:  CLRF   xFA
096A4:  CLRF   xF9
096A6:  CLRF   xF8
....................          flag_tiempocalentamiento=0; 
096A8:  BCF    x95.4
....................          Buzz_on; 
096AA:  BSF    F8B.4
096AC:  BCF    F94.4
....................          delay_ms(500); 
096AE:  MOVLW  02
096B0:  MOVLB  8
096B2:  MOVWF  x60
096B4:  MOVLW  FA
096B6:  MOVWF  x68
096B8:  MOVLB  0
096BA:  CALL   1390
096BE:  MOVLB  8
096C0:  DECFSZ x60,F
096C2:  BRA    96B4
....................          Buzz_off; 
096C4:  BCF    F8B.4
096C6:  BCF    F94.4
....................          delay_ms(250); 
096C8:  MOVLW  FA
096CA:  MOVWF  x68
096CC:  MOVLB  0
096CE:  CALL   1390
....................          Control=0; 
096D2:  MOVLB  5
096D4:  CLRF   x99
....................       } 
....................       else 
096D6:  BRA    9D5C
096D8:  MOVLB  0
....................       { 
....................           
....................          if(Pausa==0 && !DOOR && !TERM) 
096DA:  MOVLB  5
096DC:  MOVF   x9F,F
096DE:  BTFSS  FD8.2
096E0:  BRA    9A4C
096E2:  BSF    F92.4
096E4:  BTFSC  F80.4
096E6:  BRA    9A4C
096E8:  BSF    F92.3
096EA:  BTFSC  F80.3
096EC:  BRA    9A4C
....................          { 
....................             Control=1; 
096EE:  MOVLW  01
096F0:  MOVWF  x99
....................              
....................             if(Temperatura>Setpoint+AlTem && AlTem>0){ 
096F2:  MOVFF  5B7,867
096F6:  MOVFF  5B6,866
096FA:  MOVLB  0
096FC:  CALL   1D46
09700:  BCF    FD8.1
09702:  MOVFF  633,869
09706:  MOVFF  632,868
0970A:  MOVFF  631,867
0970E:  MOVFF  630,866
09712:  MOVFF  03,86D
09716:  MOVFF  02,86C
0971A:  MOVFF  01,86B
0971E:  MOVFF  00,86A
09722:  CALL   2B0E
09726:  MOVFF  03,863
0972A:  MOVFF  02,862
0972E:  MOVFF  01,861
09732:  MOVFF  00,860
09736:  MOVFF  627,867
0973A:  MOVFF  626,866
0973E:  MOVFF  625,865
09742:  MOVFF  624,864
09746:  CALL   1D7C
0974A:  BNC   9764
0974C:  MOVLB  5
0974E:  MOVF   xB6,F
09750:  BNZ   975C
09752:  MOVF   xB7,F
09754:  BTFSS  FD8.2
09756:  BRA    975C
09758:  MOVLB  0
0975A:  BRA    9764
....................                Alarma=5; 
0975C:  MOVLW  05
0975E:  MOVWF  xA5
....................             }else{   
09760:  BRA    9A4C
09762:  MOVLB  0
....................                Alarma=10; 
09764:  MOVLW  0A
09766:  MOVLB  5
09768:  MOVWF  xA5
....................                if((Temperatura>=Setpoint-10) && (Temperatura<Setpoint+50)) 
0976A:  BSF    FD8.1
0976C:  MOVFF  633,869
09770:  MOVFF  632,868
09774:  MOVFF  631,867
09778:  MOVFF  630,866
0977C:  MOVLB  8
0977E:  CLRF   x6D
09780:  CLRF   x6C
09782:  MOVLW  20
09784:  MOVWF  x6B
09786:  MOVLW  82
09788:  MOVWF  x6A
0978A:  MOVLB  0
0978C:  CALL   2B0E
09790:  MOVFF  03,863
09794:  MOVFF  02,862
09798:  MOVFF  01,861
0979C:  MOVFF  00,860
097A0:  MOVFF  627,867
097A4:  MOVFF  626,866
097A8:  MOVFF  625,865
097AC:  MOVFF  624,864
097B0:  CALL   1D7C
097B4:  BC    97BA
097B6:  BTFSS  FD8.2
097B8:  BRA    992E
097BA:  BCF    FD8.1
097BC:  MOVFF  633,869
097C0:  MOVFF  632,868
097C4:  MOVFF  631,867
097C8:  MOVFF  630,866
097CC:  MOVLB  8
097CE:  CLRF   x6D
097D0:  CLRF   x6C
097D2:  MOVLW  48
097D4:  MOVWF  x6B
097D6:  MOVLW  84
097D8:  MOVWF  x6A
097DA:  MOVLB  0
097DC:  CALL   2B0E
097E0:  MOVFF  627,863
097E4:  MOVFF  626,862
097E8:  MOVFF  625,861
097EC:  MOVFF  624,860
097F0:  MOVFF  03,867
097F4:  MOVFF  02,866
097F8:  MOVFF  01,865
097FC:  MOVFF  00,864
09800:  CALL   1D7C
09804:  BTFSS  FD8.0
09806:  BRA    992E
....................                { 
....................                   if(Pendiente!=0){ 
09808:  MOVFF  62B,863
0980C:  MOVFF  62A,862
09810:  MOVFF  629,861
09814:  MOVFF  628,860
09818:  MOVLB  8
0981A:  CLRF   x67
0981C:  CLRF   x66
0981E:  CLRF   x65
09820:  CLRF   x64
09822:  MOVLB  0
09824:  CALL   1D7C
09828:  BZ    9892
....................                      tiempo_esterilizacion=1; 
0982A:  MOVLW  01
0982C:  MOVLB  5
0982E:  MOVWF  xA3
....................                      if(flag_display==0){ 
09830:  BTFSC  x95.5
09832:  BRA    9894
....................                         glcd_rect(0, 55, 127, 63, YES, OFF); 
09834:  MOVLB  8
09836:  CLRF   x78
09838:  MOVLW  37
0983A:  MOVWF  x79
0983C:  MOVLW  7F
0983E:  MOVWF  x7A
09840:  MOVLW  3F
09842:  MOVWF  x7B
09844:  MOVLW  01
09846:  MOVWF  x7C
09848:  CLRF   x7D
0984A:  MOVLB  0
0984C:  CALL   17C4
....................                         strcpy(Menus.Letra,"Status:Controlando"); 
09850:  MOVLW  08
09852:  MOVWF  FEA
09854:  MOVLW  40
09856:  MOVWF  FE9
09858:  MOVFF  FF2,860
0985C:  BCF    FF2.7
0985E:  MOVLW  00
09860:  CALL   0C9E
09864:  TBLRD*-
09866:  TBLRD*+
09868:  MOVF   FF5,W
0986A:  MOVWF  FEE
0986C:  IORLW  00
0986E:  BNZ   9866
09870:  MOVLB  8
09872:  BTFSC  x60.7
09874:  BSF    FF2.7
....................                         displayMenu(Menus.Letra,0,55,2,1); 
09876:  MOVLW  08
09878:  MOVWF  x68
0987A:  MOVLW  40
0987C:  MOVWF  x67
0987E:  CLRF   x69
09880:  MOVLW  37
09882:  MOVWF  x6A
09884:  MOVLW  02
09886:  MOVWF  x6B
09888:  MOVLW  01
0988A:  MOVWF  x6C
0988C:  MOVLB  0
0988E:  CALL   1A3E
09892:  MOVLB  5
....................                      } 
....................                   } 
....................                    
....................                   if(Pendiente==0){ 
09894:  MOVFF  62B,863
09898:  MOVFF  62A,862
0989C:  MOVFF  629,861
098A0:  MOVFF  628,860
098A4:  MOVLB  8
098A6:  CLRF   x67
098A8:  CLRF   x66
098AA:  CLRF   x65
098AC:  CLRF   x64
098AE:  MOVLB  0
098B0:  CALL   1D7C
098B4:  BNZ   9922
....................                      if(flag_display==0){ 
098B6:  MOVLB  5
098B8:  BTFSC  x95.5
098BA:  BRA    991C
....................                         glcd_rect(0, 55, 127, 63, YES, OFF); 
098BC:  MOVLB  8
098BE:  CLRF   x78
098C0:  MOVLW  37
098C2:  MOVWF  x79
098C4:  MOVLW  7F
098C6:  MOVWF  x7A
098C8:  MOVLW  3F
098CA:  MOVWF  x7B
098CC:  MOVLW  01
098CE:  MOVWF  x7C
098D0:  CLRF   x7D
098D2:  MOVLB  0
098D4:  CALL   17C4
....................                         strcpy(Menus.Letra,"Status:Meseta  "); 
098D8:  MOVLW  08
098DA:  MOVWF  FEA
098DC:  MOVLW  40
098DE:  MOVWF  FE9
098E0:  MOVFF  FF2,860
098E4:  BCF    FF2.7
098E6:  MOVLW  00
098E8:  CALL   0CD0
098EC:  TBLRD*-
098EE:  TBLRD*+
098F0:  MOVF   FF5,W
098F2:  MOVWF  FEE
098F4:  IORLW  00
098F6:  BNZ   98EE
098F8:  MOVLB  8
098FA:  BTFSC  x60.7
098FC:  BSF    FF2.7
....................                         displayMenu(Menus.Letra,0,55,2,1); 
098FE:  MOVLW  08
09900:  MOVWF  x68
09902:  MOVLW  40
09904:  MOVWF  x67
09906:  CLRF   x69
09908:  MOVLW  37
0990A:  MOVWF  x6A
0990C:  MOVLW  02
0990E:  MOVWF  x6B
09910:  MOVLW  01
09912:  MOVWF  x6C
09914:  MOVLB  0
09916:  CALL   1A3E
0991A:  MOVLB  5
....................                      } 
....................                      tiempo_esterilizacion=2; 
0991C:  MOVLW  02
0991E:  MOVWF  xA3
09920:  MOVLB  0
....................                   } 
....................                   Controla(); 
09922:  CALL   54A8
....................                   flag_tiempocalentamiento=0; 
09926:  MOVLB  5
09928:  BCF    x95.4
....................                } 
....................                else 
0992A:  BRA    9A4C
0992C:  MOVLB  0
....................                { 
....................                   if(Pendiente!=0){ 
0992E:  MOVFF  62B,863
09932:  MOVFF  62A,862
09936:  MOVFF  629,861
0993A:  MOVFF  628,860
0993E:  MOVLB  8
09940:  CLRF   x67
09942:  CLRF   x66
09944:  CLRF   x65
09946:  CLRF   x64
09948:  MOVLB  0
0994A:  CALL   1D7C
0994E:  BZ    99B8
....................                      tiempo_esterilizacion=1; 
09950:  MOVLW  01
09952:  MOVLB  5
09954:  MOVWF  xA3
....................                      if(flag_display==0){ 
09956:  BTFSC  x95.5
09958:  BRA    99BA
....................                         glcd_rect(0, 55, 127, 63, YES, OFF); 
0995A:  MOVLB  8
0995C:  CLRF   x78
0995E:  MOVLW  37
09960:  MOVWF  x79
09962:  MOVLW  7F
09964:  MOVWF  x7A
09966:  MOVLW  3F
09968:  MOVWF  x7B
0996A:  MOVLW  01
0996C:  MOVWF  x7C
0996E:  CLRF   x7D
09970:  MOVLB  0
09972:  CALL   17C4
....................                         strcpy(Menus.Letra,"Status:Rampa  "); 
09976:  MOVLW  08
09978:  MOVWF  FEA
0997A:  MOVLW  40
0997C:  MOVWF  FE9
0997E:  MOVFF  FF2,860
09982:  BCF    FF2.7
09984:  MOVLW  00
09986:  CALL   0CFE
0998A:  TBLRD*-
0998C:  TBLRD*+
0998E:  MOVF   FF5,W
09990:  MOVWF  FEE
09992:  IORLW  00
09994:  BNZ   998C
09996:  MOVLB  8
09998:  BTFSC  x60.7
0999A:  BSF    FF2.7
....................                         displayMenu(Menus.Letra,0,55,2,1); 
0999C:  MOVLW  08
0999E:  MOVWF  x68
099A0:  MOVLW  40
099A2:  MOVWF  x67
099A4:  CLRF   x69
099A6:  MOVLW  37
099A8:  MOVWF  x6A
099AA:  MOVLW  02
099AC:  MOVWF  x6B
099AE:  MOVLW  01
099B0:  MOVWF  x6C
099B2:  MOVLB  0
099B4:  CALL   1A3E
099B8:  MOVLB  5
....................                      } 
....................                   } 
....................                    
....................                   if(Pendiente==0){ 
099BA:  MOVFF  62B,863
099BE:  MOVFF  62A,862
099C2:  MOVFF  629,861
099C6:  MOVFF  628,860
099CA:  MOVLB  8
099CC:  CLRF   x67
099CE:  CLRF   x66
099D0:  CLRF   x65
099D2:  CLRF   x64
099D4:  MOVLB  0
099D6:  CALL   1D7C
099DA:  BNZ   9A46
....................                      if(flag_display==0){ 
099DC:  MOVLB  5
099DE:  BTFSC  x95.5
099E0:  BRA    9A42
....................                         glcd_rect(0, 55, 127, 63, YES, OFF); 
099E2:  MOVLB  8
099E4:  CLRF   x78
099E6:  MOVLW  37
099E8:  MOVWF  x79
099EA:  MOVLW  7F
099EC:  MOVWF  x7A
099EE:  MOVLW  3F
099F0:  MOVWF  x7B
099F2:  MOVLW  01
099F4:  MOVWF  x7C
099F6:  CLRF   x7D
099F8:  MOVLB  0
099FA:  CALL   17C4
....................                         strcpy(Menus.Letra,"Status:Calentando"); 
099FE:  MOVLW  08
09A00:  MOVWF  FEA
09A02:  MOVLW  40
09A04:  MOVWF  FE9
09A06:  MOVFF  FF2,860
09A0A:  BCF    FF2.7
09A0C:  MOVLW  00
09A0E:  CALL   0D2C
09A12:  TBLRD*-
09A14:  TBLRD*+
09A16:  MOVF   FF5,W
09A18:  MOVWF  FEE
09A1A:  IORLW  00
09A1C:  BNZ   9A14
09A1E:  MOVLB  8
09A20:  BTFSC  x60.7
09A22:  BSF    FF2.7
....................                         displayMenu(Menus.Letra,0,55,2,1); 
09A24:  MOVLW  08
09A26:  MOVWF  x68
09A28:  MOVLW  40
09A2A:  MOVWF  x67
09A2C:  CLRF   x69
09A2E:  MOVLW  37
09A30:  MOVWF  x6A
09A32:  MOVLW  02
09A34:  MOVWF  x6B
09A36:  MOVLW  01
09A38:  MOVWF  x6C
09A3A:  MOVLB  0
09A3C:  CALL   1A3E
09A40:  MOVLB  5
....................                      } 
....................                      tiempo_esterilizacion=0; 
09A42:  CLRF   xA3
09A44:  MOVLB  0
....................                   } 
....................                   Controla(); 
09A46:  CALL   54A8
09A4A:  MOVLB  5
....................                } 
....................             } 
....................          } 
....................           
....................          if(Pausa==1 && !DOOR) 
09A4C:  DECFSZ x9F,W
09A4E:  BRA    9AAE
09A50:  BSF    F92.4
09A52:  BTFSC  F80.4
09A54:  BRA    9AAE
....................          { 
....................             flag_tiempocalentamiento=0; 
09A56:  BCF    x95.4
....................             strcpy(Menus.Letra,"Status:Pausado"); 
09A58:  MOVLW  08
09A5A:  MOVWF  FEA
09A5C:  MOVLW  40
09A5E:  MOVWF  FE9
09A60:  MOVFF  FF2,860
09A64:  BCF    FF2.7
09A66:  MOVLW  00
09A68:  MOVLB  0
09A6A:  CALL   0D5C
09A6E:  TBLRD*-
09A70:  TBLRD*+
09A72:  MOVF   FF5,W
09A74:  MOVWF  FEE
09A76:  IORLW  00
09A78:  BNZ   9A70
09A7A:  MOVLB  8
09A7C:  BTFSC  x60.7
09A7E:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,55,2,1); 
09A80:  MOVLW  08
09A82:  MOVWF  x68
09A84:  MOVLW  40
09A86:  MOVWF  x67
09A88:  CLRF   x69
09A8A:  MOVLW  37
09A8C:  MOVWF  x6A
09A8E:  MOVLW  02
09A90:  MOVWF  x6B
09A92:  MOVLW  01
09A94:  MOVWF  x6C
09A96:  MOVLB  0
09A98:  CALL   1A3E
....................             tiempo_esterilizacion=0; 
09A9C:  MOVLB  5
09A9E:  CLRF   xA3
....................             Control=0; 
09AA0:  CLRF   x99
....................             Resistencia_off; 
09AA2:  BCF    F8B.0
09AA4:  BCF    F94.0
....................             Tpulso=0.0; 
09AA6:  CLRF   xFB
09AA8:  CLRF   xFA
09AAA:  CLRF   xF9
09AAC:  CLRF   xF8
....................          } 
....................           
....................          if(DOOR) 
09AAE:  BSF    F92.4
09AB0:  BTFSS  F80.4
09AB2:  BRA    9BDE
....................          { 
....................             Control=0;             
09AB4:  CLRF   x99
....................             flag_tiempocalentamiento=0; 
09AB6:  BCF    x95.4
....................             tiempo_esterilizacion=0; 
09AB8:  CLRF   xA3
....................             Resistencia_off; 
09ABA:  BCF    F8B.0
09ABC:  BCF    F94.0
....................             Tpulso=0.0; 
09ABE:  CLRF   xFB
09AC0:  CLRF   xFA
09AC2:  CLRF   xF9
09AC4:  CLRF   xF8
....................             if(flag_clear2==0) 
09AC6:  BTFSC  x95.2
09AC8:  BRA    9B64
....................             { 
....................                //Ganancia=read_eeprom(90); 
....................                //Ganancia=Setpoint*(Ganancia/Coeficiente); 
....................                //glcd_fillScreen(OFF); 
....................                Ganancia=GananciaIn*(Setpoint/Coeficiente); 
09ACA:  MOVFF  633,867
09ACE:  MOVFF  632,866
09AD2:  MOVFF  631,865
09AD6:  MOVFF  630,864
09ADA:  MOVFF  61B,86B
09ADE:  MOVFF  61A,86A
09AE2:  MOVFF  619,869
09AE6:  MOVFF  618,868
09AEA:  MOVLB  0
09AEC:  CALL   2D86
09AF0:  MOVFF  60F,880
09AF4:  MOVFF  60E,87F
09AF8:  MOVFF  60D,87E
09AFC:  MOVFF  60C,87D
09B00:  MOVFF  03,884
09B04:  MOVFF  02,883
09B08:  MOVFF  01,882
09B0C:  MOVFF  00,881
09B10:  CALL   2EE4
09B14:  MOVFF  03,613
09B18:  MOVFF  02,612
09B1C:  MOVFF  01,611
09B20:  MOVFF  00,610
....................                glcd_fillScreen(OFF); 
09B24:  MOVLB  8
09B26:  CLRF   x67
09B28:  MOVLB  0
09B2A:  CALL   1410
....................                glcd_init(ON); 
09B2E:  MOVLW  01
09B30:  MOVLB  8
09B32:  MOVWF  x60
09B34:  MOVLB  0
09B36:  CALL   1522
....................                glcd_rect(0, 55, 127, 63, YES, OFF); 
09B3A:  MOVLB  8
09B3C:  CLRF   x78
09B3E:  MOVLW  37
09B40:  MOVWF  x79
09B42:  MOVLW  7F
09B44:  MOVWF  x7A
09B46:  MOVLW  3F
09B48:  MOVWF  x7B
09B4A:  MOVLW  01
09B4C:  MOVWF  x7C
09B4E:  CLRF   x7D
09B50:  MOVLB  0
09B52:  CALL   17C4
....................                Tpulso=0.0; 
09B56:  MOVLB  5
09B58:  CLRF   xFB
09B5A:  CLRF   xFA
09B5C:  CLRF   xF9
09B5E:  CLRF   xF8
....................                flag_clear2=1; 
09B60:  BSF    x95.2
....................                flag_ganancia=0; 
09B62:  CLRF   x8E
....................             } 
....................             strcpy(Menus.Letra,"Status:Puerta Abierta"); 
09B64:  MOVLW  08
09B66:  MOVWF  FEA
09B68:  MOVLW  40
09B6A:  MOVWF  FE9
09B6C:  MOVFF  FF2,860
09B70:  BCF    FF2.7
09B72:  MOVLW  00
09B74:  MOVLB  0
09B76:  CALL   0D8A
09B7A:  TBLRD*-
09B7C:  TBLRD*+
09B7E:  MOVF   FF5,W
09B80:  MOVWF  FEE
09B82:  IORLW  00
09B84:  BNZ   9B7C
09B86:  MOVLB  8
09B88:  BTFSC  x60.7
09B8A:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,55,2,1); 
09B8C:  MOVLW  08
09B8E:  MOVWF  x68
09B90:  MOVLW  40
09B92:  MOVWF  x67
09B94:  CLRF   x69
09B96:  MOVLW  37
09B98:  MOVWF  x6A
09B9A:  MOVLW  02
09B9C:  MOVWF  x6B
09B9E:  MOVLW  01
09BA0:  MOVWF  x6C
09BA2:  MOVLB  0
09BA4:  CALL   1A3E
....................             Buzz_on; 
09BA8:  BSF    F8B.4
09BAA:  BCF    F94.4
....................             delay_ms(1000); 
09BAC:  MOVLW  04
09BAE:  MOVLB  8
09BB0:  MOVWF  x60
09BB2:  MOVLW  FA
09BB4:  MOVWF  x68
09BB6:  MOVLB  0
09BB8:  CALL   1390
09BBC:  MOVLB  8
09BBE:  DECFSZ x60,F
09BC0:  BRA    9BB2
....................             Buzz_off; 
09BC2:  BCF    F8B.4
09BC4:  BCF    F94.4
....................             delay_ms(1000); 
09BC6:  MOVLW  04
09BC8:  MOVWF  x60
09BCA:  MOVLW  FA
09BCC:  MOVWF  x68
09BCE:  MOVLB  0
09BD0:  CALL   1390
09BD4:  MOVLB  8
09BD6:  DECFSZ x60,F
09BD8:  BRA    9BCA
....................          } 
....................          else 
09BDA:  BRA    9D5E
09BDC:  MOVLB  5
....................          { 
....................             if(flag_clear2==1){ 
09BDE:  BTFSS  x95.2
09BE0:  BRA    9C0C
....................                glcd_fillScreen(OFF); 
09BE2:  MOVLB  8
09BE4:  CLRF   x67
09BE6:  MOVLB  0
09BE8:  CALL   1410
....................                glcd_rect(0, 55, 127, 63, YES, OFF); 
09BEC:  MOVLB  8
09BEE:  CLRF   x78
09BF0:  MOVLW  37
09BF2:  MOVWF  x79
09BF4:  MOVLW  7F
09BF6:  MOVWF  x7A
09BF8:  MOVLW  3F
09BFA:  MOVWF  x7B
09BFC:  MOVLW  01
09BFE:  MOVWF  x7C
09C00:  CLRF   x7D
09C02:  MOVLB  0
09C04:  CALL   17C4
....................                flag_clear2=0; 
09C08:  MOVLB  5
09C0A:  BCF    x95.2
....................             } 
....................             if(TERM || Alarma==5){ 
09C0C:  BSF    F92.3
09C0E:  BTFSC  F80.3
09C10:  BRA    9C1A
09C12:  MOVF   xA5,W
09C14:  SUBLW  05
09C16:  BTFSS  FD8.2
09C18:  BRA    9D32
....................             Control=0;             
09C1A:  CLRF   x99
....................             flag_tiempocalentamiento=0; 
09C1C:  BCF    x95.4
....................             tiempo_esterilizacion=0; 
09C1E:  CLRF   xA3
....................             Resistencia_off; 
09C20:  BCF    F8B.0
09C22:  BCF    F94.0
....................             Tpulso=0.0; 
09C24:  CLRF   xFB
09C26:  CLRF   xFA
09C28:  CLRF   xF9
09C2A:  CLRF   xF8
....................             if(flag_clear3==0){ 
09C2C:  BTFSC  x95.3
09C2E:  BRA    9C60
....................                glcd_rect(0, 55, 127, 63, YES, OFF); 
09C30:  MOVLB  8
09C32:  CLRF   x78
09C34:  MOVLW  37
09C36:  MOVWF  x79
09C38:  MOVLW  7F
09C3A:  MOVWF  x7A
09C3C:  MOVLW  3F
09C3E:  MOVWF  x7B
09C40:  MOVLW  01
09C42:  MOVWF  x7C
09C44:  CLRF   x7D
09C46:  MOVLB  0
09C48:  CALL   17C4
....................                tiempo_esterilizacion=0; 
09C4C:  MOVLB  5
09C4E:  CLRF   xA3
....................                Resistencia_off; 
09C50:  BCF    F8B.0
09C52:  BCF    F94.0
....................                Tpulso=0.0; 
09C54:  CLRF   xFB
09C56:  CLRF   xFA
09C58:  CLRF   xF9
09C5A:  CLRF   xF8
....................                flag_clear3=1; 
09C5C:  BSF    x95.3
....................                flag_ganancia=0; 
09C5E:  CLRF   x8E
....................             } 
....................             strcpy(Menus.Letra,"Status:Sobre Temp"); 
09C60:  MOVLW  08
09C62:  MOVWF  FEA
09C64:  MOVLW  40
09C66:  MOVWF  FE9
09C68:  MOVFF  FF2,860
09C6C:  BCF    FF2.7
09C6E:  MOVLW  00
09C70:  MOVLB  0
09C72:  CALL   0DBE
09C76:  TBLRD*-
09C78:  TBLRD*+
09C7A:  MOVF   FF5,W
09C7C:  MOVWF  FEE
09C7E:  IORLW  00
09C80:  BNZ   9C78
09C82:  MOVLB  8
09C84:  BTFSC  x60.7
09C86:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,55,2,1);  
09C88:  MOVLW  08
09C8A:  MOVWF  x68
09C8C:  MOVLW  40
09C8E:  MOVWF  x67
09C90:  CLRF   x69
09C92:  MOVLW  37
09C94:  MOVWF  x6A
09C96:  MOVLW  02
09C98:  MOVWF  x6B
09C9A:  MOVLW  01
09C9C:  MOVWF  x6C
09C9E:  MOVLB  0
09CA0:  CALL   1A3E
....................             Ganancia=gananciaIn*(Setpoint/150); 
09CA4:  MOVFF  633,867
09CA8:  MOVFF  632,866
09CAC:  MOVFF  631,865
09CB0:  MOVFF  630,864
09CB4:  MOVLB  8
09CB6:  CLRF   x6B
09CB8:  CLRF   x6A
09CBA:  MOVLW  16
09CBC:  MOVWF  x69
09CBE:  MOVLW  86
09CC0:  MOVWF  x68
09CC2:  MOVLB  0
09CC4:  CALL   2D86
09CC8:  MOVFF  60F,880
09CCC:  MOVFF  60E,87F
09CD0:  MOVFF  60D,87E
09CD4:  MOVFF  60C,87D
09CD8:  MOVFF  03,884
09CDC:  MOVFF  02,883
09CE0:  MOVFF  01,882
09CE4:  MOVFF  00,881
09CE8:  CALL   2EE4
09CEC:  MOVFF  03,613
09CF0:  MOVFF  02,612
09CF4:  MOVFF  01,611
09CF8:  MOVFF  00,610
....................             Buzz_on; 
09CFC:  BSF    F8B.4
09CFE:  BCF    F94.4
....................             delay_ms(500); 
09D00:  MOVLW  02
09D02:  MOVLB  8
09D04:  MOVWF  x60
09D06:  MOVLW  FA
09D08:  MOVWF  x68
09D0A:  MOVLB  0
09D0C:  CALL   1390
09D10:  MOVLB  8
09D12:  DECFSZ x60,F
09D14:  BRA    9D06
....................             Buzz_off; 
09D16:  BCF    F8B.4
09D18:  BCF    F94.4
....................             delay_ms(500); 
09D1A:  MOVLW  02
09D1C:  MOVWF  x60
09D1E:  MOVLW  FA
09D20:  MOVWF  x68
09D22:  MOVLB  0
09D24:  CALL   1390
09D28:  MOVLB  8
09D2A:  DECFSZ x60,F
09D2C:  BRA    9D1E
....................          }else{ 
09D2E:  BRA    9D5E
09D30:  MOVLB  5
....................             Alarma=0; 
09D32:  CLRF   xA5
....................             if(flag_clear3==1){ 
09D34:  BTFSS  x95.3
09D36:  BRA    9D58
....................                glcd_rect(0, 55, 127, 63, YES, OFF); 
09D38:  MOVLB  8
09D3A:  CLRF   x78
09D3C:  MOVLW  37
09D3E:  MOVWF  x79
09D40:  MOVLW  7F
09D42:  MOVWF  x7A
09D44:  MOVLW  3F
09D46:  MOVWF  x7B
09D48:  MOVLW  01
09D4A:  MOVWF  x7C
09D4C:  CLRF   x7D
09D4E:  MOVLB  0
09D50:  CALL   17C4
....................                flag_clear3=0; 
09D54:  MOVLB  5
09D56:  BCF    x95.3
....................             } 
....................             Buzz_off; 
09D58:  BCF    F8B.4
09D5A:  BCF    F94.4
09D5C:  MOVLB  8
....................          }  
....................          } 
....................       } 
....................       /* 
....................       if(UP)//Si oprime hacia arriba 
....................       { 
....................          glcd_fillscreen(OFF); 
....................                glcd_line(27,0,27,55,ON); 
....................                glcd_line(27,55,127,55,ON); 
....................                 
....................                strcpy(Menus.Letra,"Grafica Rampas");displayMenu(Menus.Letra,0,0,1,1);  
....................                 
....................                glcd_line(24,55-10,27,55-10,ON); 
....................                strcpy(Menus.Letra,"300");displayMenu(Menus.Letra,0,55-15,2,1);  
....................                glcd_line(24,55-20,27,55-20,ON); 
....................                strcpy(Menus.Letra,"600");displayMenu(Menus.Letra,0,55-25,2,1);  
....................                glcd_line(24,55-30,27,55-30,ON); 
....................                strcpy(Menus.Letra,"900");displayMenu(Menus.Letra,0,55-35,2,1); 
....................                glcd_line(24,55-40,27,55-40,ON); 
....................                strcpy(Menus.Letra,"1200");displayMenu(Menus.Letra,0,55-45,2,1);  
....................                 
....................                glcd_line(27+0,55-TempeInicial/30,27+(100/Pasos),55-Temperatura1[ProgramaSeleccionado*Pasos]/30,ON); 
....................                for(i=1;i<Pasos;i++){ 
....................                   glcd_line(27+(i+1*(100/Pasos)),55-Temperatura1[(ProgramaSeleccionado*Pasos)+i]/30,27+(i+2*(100/Pasos)),55-Temperatura1[(ProgramaSeleccionado*Pasos)+i+1]/30,ON); 
....................                } 
....................                glcd_update(); 
....................                for(i=0;i<80;i++) 
....................                { 
....................                   Temperatura=Leer_Sensor(MediaMovil); 
....................                } 
....................             delay_ms(3000); 
....................             glcd_fillscreen(OFF); 
....................       } 
....................       */       
....................       if(DOWN)//Si oprime hacia abajo 
09D5E:  BSF    F96.0
09D60:  BTFSC  F84.0
09D62:  BRA    9D64
....................       {   
....................       } 
....................        
....................       if(RIGHT)//Si oprime SET 
09D64:  BSF    F96.1
09D66:  BTFSC  F84.1
09D68:  BRA    9DB8
....................       {   
....................          if(Pausa!=2) 
09D6A:  MOVLB  5
09D6C:  MOVF   x9F,W
09D6E:  SUBLW  02
09D70:  BZ    9DB8
....................          { 
....................             if(Pausa==0) 
09D72:  MOVF   x9F,F
09D74:  BNZ   9D8A
....................             { 
....................                delay_ms(200);Pausa=1; 
09D76:  MOVLW  C8
09D78:  MOVLB  8
09D7A:  MOVWF  x68
09D7C:  MOVLB  0
09D7E:  CALL   1390
09D82:  MOVLW  01
09D84:  MOVLB  5
09D86:  MOVWF  x9F
....................             } 
....................             else 
09D88:  BRA    9D9A
....................             { 
....................                delay_ms(200);Pausa=0; 
09D8A:  MOVLW  C8
09D8C:  MOVLB  8
09D8E:  MOVWF  x68
09D90:  MOVLB  0
09D92:  CALL   1390
09D96:  MOVLB  5
09D98:  CLRF   x9F
....................             } 
....................             glcd_rect(0, 55, 127, 63, YES, OFF); 
09D9A:  MOVLB  8
09D9C:  CLRF   x78
09D9E:  MOVLW  37
09DA0:  MOVWF  x79
09DA2:  MOVLW  7F
09DA4:  MOVWF  x7A
09DA6:  MOVLW  3F
09DA8:  MOVWF  x7B
09DAA:  MOVLW  01
09DAC:  MOVWF  x7C
09DAE:  CLRF   x7D
09DB0:  MOVLB  0
09DB2:  CALL   17C4
09DB6:  MOVLB  5
....................          } 
....................       } 
....................        
....................          
....................       if(Lectura==1)// Utilizado para visualizar la lectura de la temperatura 
09DB8:  MOVLB  5
09DBA:  BTFSS  x95.0
09DBC:  BRA    A43A
....................       {                  
....................           
....................          Lectura=0; 
09DBE:  BCF    x95.0
....................          Potencia=(100.0/Tciclo)*Tpulso; 
09DC0:  MOVLB  8
09DC2:  CLRF   x67
09DC4:  CLRF   x66
09DC6:  MOVLW  48
09DC8:  MOVWF  x65
09DCA:  MOVLW  85
09DCC:  MOVWF  x64
09DCE:  MOVFF  5F7,86B
09DD2:  MOVFF  5F6,86A
09DD6:  MOVFF  5F5,869
09DDA:  MOVFF  5F4,868
09DDE:  MOVLB  0
09DE0:  CALL   2D86
09DE4:  MOVFF  00,860
09DE8:  MOVFF  01,861
09DEC:  MOVFF  02,862
09DF0:  MOVFF  03,863
09DF4:  MOVFF  03,880
09DF8:  MOVFF  02,87F
09DFC:  MOVFF  01,87E
09E00:  MOVFF  00,87D
09E04:  MOVFF  5FB,884
09E08:  MOVFF  5FA,883
09E0C:  MOVFF  5F9,882
09E10:  MOVFF  5F8,881
09E14:  CALL   2EE4
09E18:  MOVFF  03,5DB
09E1C:  MOVFF  02,5DA
09E20:  MOVFF  01,5D9
09E24:  MOVFF  00,5D8
....................           
....................  //----------------Muestra Temperatura-------------------------- 
....................          if(Temperatura>1250 || Temperatura<0) 
09E28:  MOVLB  8
09E2A:  CLRF   x63
09E2C:  MOVLW  40
09E2E:  MOVWF  x62
09E30:  MOVLW  1C
09E32:  MOVWF  x61
09E34:  MOVLW  89
09E36:  MOVWF  x60
09E38:  MOVFF  627,867
09E3C:  MOVFF  626,866
09E40:  MOVFF  625,865
09E44:  MOVFF  624,864
09E48:  MOVLB  0
09E4A:  CALL   1D7C
09E4E:  BC    9E72
09E50:  MOVFF  627,863
09E54:  MOVFF  626,862
09E58:  MOVFF  625,861
09E5C:  MOVFF  624,860
09E60:  MOVLB  8
09E62:  CLRF   x67
09E64:  CLRF   x66
09E66:  CLRF   x65
09E68:  CLRF   x64
09E6A:  MOVLB  0
09E6C:  CALL   1D7C
09E70:  BNC   9EDC
....................          { 
....................             glcd_rect(15, 29, 69, 45, YES, OFF); 
09E72:  MOVLW  0F
09E74:  MOVLB  8
09E76:  MOVWF  x78
09E78:  MOVLW  1D
09E7A:  MOVWF  x79
09E7C:  MOVLW  45
09E7E:  MOVWF  x7A
09E80:  MOVLW  2D
09E82:  MOVWF  x7B
09E84:  MOVLW  01
09E86:  MOVWF  x7C
09E88:  CLRF   x7D
09E8A:  MOVLB  0
09E8C:  CALL   17C4
....................             strcpy(Menus.Letra,"-----");displayMenu(Menus.Letra,15,29,2,2); 
09E90:  MOVLW  08
09E92:  MOVWF  FEA
09E94:  MOVLW  40
09E96:  MOVWF  FE9
09E98:  MOVFF  FF2,860
09E9C:  BCF    FF2.7
09E9E:  MOVLW  00
09EA0:  CALL   0DEE
09EA4:  TBLRD*-
09EA6:  TBLRD*+
09EA8:  MOVF   FF5,W
09EAA:  MOVWF  FEE
09EAC:  IORLW  00
09EAE:  BNZ   9EA6
09EB0:  MOVLB  8
09EB2:  BTFSC  x60.7
09EB4:  BSF    FF2.7
09EB6:  MOVLW  08
09EB8:  MOVWF  x68
09EBA:  MOVLW  40
09EBC:  MOVWF  x67
09EBE:  MOVLW  0F
09EC0:  MOVWF  x69
09EC2:  MOVLW  1D
09EC4:  MOVWF  x6A
09EC6:  MOVLW  02
09EC8:  MOVWF  x6B
09ECA:  MOVWF  x6C
09ECC:  MOVLB  0
09ECE:  CALL   1A3E
....................             Desconectado=1; 
09ED2:  MOVLB  5
09ED4:  BSF    x87.2
....................             Control=0; 
09ED6:  CLRF   x99
....................          } 
....................          else 
09ED8:  BRA    9F62
09EDA:  MOVLB  0
....................          { 
....................             if(Desconectado==1) 
09EDC:  MOVLB  5
09EDE:  BTFSS  x87.2
09EE0:  BRA    9F26
....................             { 
....................                Desconectado=0; 
09EE2:  BCF    x87.2
....................                delay_ms(2000); 
09EE4:  MOVLW  08
09EE6:  MOVLB  8
09EE8:  MOVWF  x60
09EEA:  MOVLW  FA
09EEC:  MOVWF  x68
09EEE:  MOVLB  0
09EF0:  CALL   1390
09EF4:  MOVLB  8
09EF6:  DECFSZ x60,F
09EF8:  BRA    9EEA
....................                for(i=0;i<80;i++) 
09EFA:  MOVLB  5
09EFC:  CLRF   x9D
09EFE:  MOVF   x9D,W
09F00:  SUBLW  4F
09F02:  BNC   9F26
....................                { 
....................                   Temperatura=Leer_Sensor(80); 
09F04:  MOVLW  50
09F06:  MOVLB  8
09F08:  MOVWF  x60
09F0A:  MOVLB  0
09F0C:  CALL   2FDA
09F10:  MOVFF  03,627
09F14:  MOVFF  02,626
09F18:  MOVFF  01,625
09F1C:  MOVFF  00,624
....................                } 
09F20:  MOVLB  5
09F22:  INCF   x9D,F
09F24:  BRA    9EFE
....................             } 
....................              
....................                displayT(Temperatura,15,29,2); 
09F26:  MOVFF  627,863
09F2A:  MOVFF  626,862
09F2E:  MOVFF  625,861
09F32:  MOVFF  624,860
09F36:  MOVLB  0
09F38:  CALL   546C
09F3C:  MOVFF  02,861
09F40:  MOVFF  01,860
09F44:  MOVFF  02,863
09F48:  MOVFF  01,862
09F4C:  MOVLW  0F
09F4E:  MOVLB  8
09F50:  MOVWF  x64
09F52:  MOVLW  1D
09F54:  MOVWF  x65
09F56:  MOVLW  02
09F58:  MOVWF  x66
09F5A:  MOVLB  0
09F5C:  GOTO   6492
09F60:  MOVLB  5
....................              
....................             //displayTemperatura(Temperatura,15,29,0,2); 
....................          } 
....................  
....................          //displayT(Temperatura,15,29,2); 
....................             Dibuja=0; 
09F62:  BCF    x95.7
....................             glcd_circle(74,30,2,NO,ON); 
09F64:  MOVLW  4A
09F66:  MOVLB  8
09F68:  MOVWF  x78
09F6A:  MOVLW  1E
09F6C:  MOVWF  x79
09F6E:  MOVLW  02
09F70:  MOVWF  x7A
09F72:  CLRF   x7B
09F74:  MOVLW  01
09F76:  MOVWF  x7C
09F78:  MOVLB  0
09F7A:  CALL   3E1C
....................             strcpy(Menus.Letra,"C");displayMenu(Menus.Letra,75,30,2,2); 
09F7E:  MOVLW  08
09F80:  MOVWF  FEA
09F82:  MOVLW  40
09F84:  MOVWF  FE9
09F86:  MOVFF  FF2,860
09F8A:  BCF    FF2.7
09F8C:  MOVLW  00
09F8E:  CALL   06D2
09F92:  TBLRD*-
09F94:  TBLRD*+
09F96:  MOVF   FF5,W
09F98:  MOVWF  FEE
09F9A:  IORLW  00
09F9C:  BNZ   9F94
09F9E:  MOVLB  8
09FA0:  BTFSC  x60.7
09FA2:  BSF    FF2.7
09FA4:  MOVLW  08
09FA6:  MOVWF  x68
09FA8:  MOVLW  40
09FAA:  MOVWF  x67
09FAC:  MOVLW  4B
09FAE:  MOVWF  x69
09FB0:  MOVLW  1E
09FB2:  MOVWF  x6A
09FB4:  MOVLW  02
09FB6:  MOVWF  x6B
09FB8:  MOVWF  x6C
09FBA:  MOVLB  0
09FBC:  CALL   1A3E
....................              
....................             displayTemperatura(Setpoint,30,45,0,1); 
09FC0:  MOVFF  633,863
09FC4:  MOVFF  632,862
09FC8:  MOVFF  631,861
09FCC:  MOVFF  630,860
09FD0:  CALL   546C
09FD4:  MOVFF  02,861
09FD8:  MOVFF  01,860
09FDC:  MOVFF  02,866
09FE0:  MOVFF  01,865
09FE4:  MOVLW  1E
09FE6:  MOVLB  8
09FE8:  MOVWF  x67
09FEA:  MOVLW  2D
09FEC:  MOVWF  x68
09FEE:  CLRF   x69
09FF0:  MOVLW  01
09FF2:  MOVWF  x6A
09FF4:  MOVLB  0
09FF6:  CALL   3C64
....................             glcd_circle(60,47,1,NO,ON); 
09FFA:  MOVLW  3C
09FFC:  MOVLB  8
09FFE:  MOVWF  x78
0A000:  MOVLW  2F
0A002:  MOVWF  x79
0A004:  MOVLW  01
0A006:  MOVWF  x7A
0A008:  CLRF   x7B
0A00A:  MOVWF  x7C
0A00C:  MOVLB  0
0A00E:  CALL   3E1C
....................             strcpy(Menus.Letra,"C");displayMenu(Menus.Letra,63,45,2,1); 
0A012:  MOVLW  08
0A014:  MOVWF  FEA
0A016:  MOVLW  40
0A018:  MOVWF  FE9
0A01A:  MOVFF  FF2,860
0A01E:  BCF    FF2.7
0A020:  MOVLW  00
0A022:  CALL   06D2
0A026:  TBLRD*-
0A028:  TBLRD*+
0A02A:  MOVF   FF5,W
0A02C:  MOVWF  FEE
0A02E:  IORLW  00
0A030:  BNZ   A028
0A032:  MOVLB  8
0A034:  BTFSC  x60.7
0A036:  BSF    FF2.7
0A038:  MOVLW  08
0A03A:  MOVWF  x68
0A03C:  MOVLW  40
0A03E:  MOVWF  x67
0A040:  MOVLW  3F
0A042:  MOVWF  x69
0A044:  MOVLW  2D
0A046:  MOVWF  x6A
0A048:  MOVLW  02
0A04A:  MOVWF  x6B
0A04C:  MOVLW  01
0A04E:  MOVWF  x6C
0A050:  MOVLB  0
0A052:  CALL   1A3E
....................             strcpy(Menus.Letra,"Temp:");displayMenu(Menus.Letra,0,45,2,1);  
0A056:  MOVLW  08
0A058:  MOVWF  FEA
0A05A:  MOVLW  40
0A05C:  MOVWF  FE9
0A05E:  MOVFF  FF2,860
0A062:  BCF    FF2.7
0A064:  MOVLW  00
0A066:  CALL   0E12
0A06A:  TBLRD*-
0A06C:  TBLRD*+
0A06E:  MOVF   FF5,W
0A070:  MOVWF  FEE
0A072:  IORLW  00
0A074:  BNZ   A06C
0A076:  MOVLB  8
0A078:  BTFSC  x60.7
0A07A:  BSF    FF2.7
0A07C:  MOVLW  08
0A07E:  MOVWF  x68
0A080:  MOVLW  40
0A082:  MOVWF  x67
0A084:  CLRF   x69
0A086:  MOVLW  2D
0A088:  MOVWF  x6A
0A08A:  MOVLW  02
0A08C:  MOVWF  x6B
0A08E:  MOVLW  01
0A090:  MOVWF  x6C
0A092:  MOVLB  0
0A094:  CALL   1A3E
....................              
....................             strcpy(Menus.Letra,"Power:");displayMenu(Menus.Letra,91,32,2,1); 
0A098:  MOVLW  08
0A09A:  MOVWF  FEA
0A09C:  MOVLW  40
0A09E:  MOVWF  FE9
0A0A0:  MOVFF  FF2,860
0A0A4:  BCF    FF2.7
0A0A6:  MOVLW  00
0A0A8:  CALL   0E36
0A0AC:  TBLRD*-
0A0AE:  TBLRD*+
0A0B0:  MOVF   FF5,W
0A0B2:  MOVWF  FEE
0A0B4:  IORLW  00
0A0B6:  BNZ   A0AE
0A0B8:  MOVLB  8
0A0BA:  BTFSC  x60.7
0A0BC:  BSF    FF2.7
0A0BE:  MOVLW  08
0A0C0:  MOVWF  x68
0A0C2:  MOVLW  40
0A0C4:  MOVWF  x67
0A0C6:  MOVLW  5B
0A0C8:  MOVWF  x69
0A0CA:  MOVLW  20
0A0CC:  MOVWF  x6A
0A0CE:  MOVLW  02
0A0D0:  MOVWF  x6B
0A0D2:  MOVLW  01
0A0D4:  MOVWF  x6C
0A0D6:  MOVLB  0
0A0D8:  CALL   1A3E
....................             displayTiempo(Potencia,97,42,3,1);strcpy(Menus.Letra,"%");displayMenu(Menus.Letra,115,42,2,1); 
0A0DC:  MOVFF  5DB,863
0A0E0:  MOVFF  5DA,862
0A0E4:  MOVFF  5D9,861
0A0E8:  MOVFF  5D8,860
0A0EC:  CALL   546C
0A0F0:  MOVFF  01,860
0A0F4:  MOVFF  01,863
0A0F8:  MOVLW  61
0A0FA:  MOVLB  8
0A0FC:  MOVWF  x64
0A0FE:  MOVLW  2A
0A100:  MOVWF  x65
0A102:  MOVLW  03
0A104:  MOVWF  x66
0A106:  MOVLW  01
0A108:  MOVWF  x67
0A10A:  MOVLB  0
0A10C:  CALL   3876
0A110:  MOVLW  08
0A112:  MOVWF  FEA
0A114:  MOVLW  40
0A116:  MOVWF  FE9
0A118:  MOVFF  FF2,860
0A11C:  BCF    FF2.7
0A11E:  MOVLW  00
0A120:  CALL   0E5C
0A124:  TBLRD*-
0A126:  TBLRD*+
0A128:  MOVF   FF5,W
0A12A:  MOVWF  FEE
0A12C:  IORLW  00
0A12E:  BNZ   A126
0A130:  MOVLB  8
0A132:  BTFSC  x60.7
0A134:  BSF    FF2.7
0A136:  MOVLW  08
0A138:  MOVWF  x68
0A13A:  MOVLW  40
0A13C:  MOVWF  x67
0A13E:  MOVLW  73
0A140:  MOVWF  x69
0A142:  MOVLW  2A
0A144:  MOVWF  x6A
0A146:  MOVLW  02
0A148:  MOVWF  x6B
0A14A:  MOVLW  01
0A14C:  MOVWF  x6C
0A14E:  MOVLB  0
0A150:  CALL   1A3E
....................             strcpy(Menus.Letra,"Segm.");displayMenu(Menus.Letra,95,10,2,1); 
0A154:  MOVLW  08
0A156:  MOVWF  FEA
0A158:  MOVLW  40
0A15A:  MOVWF  FE9
0A15C:  MOVFF  FF2,860
0A160:  BCF    FF2.7
0A162:  MOVLW  00
0A164:  CALL   0E7C
0A168:  TBLRD*-
0A16A:  TBLRD*+
0A16C:  MOVF   FF5,W
0A16E:  MOVWF  FEE
0A170:  IORLW  00
0A172:  BNZ   A16A
0A174:  MOVLB  8
0A176:  BTFSC  x60.7
0A178:  BSF    FF2.7
0A17A:  MOVLW  08
0A17C:  MOVWF  x68
0A17E:  MOVLW  40
0A180:  MOVWF  x67
0A182:  MOVLW  5F
0A184:  MOVWF  x69
0A186:  MOVLW  0A
0A188:  MOVWF  x6A
0A18A:  MOVLW  02
0A18C:  MOVWF  x6B
0A18E:  MOVLW  01
0A190:  MOVWF  x6C
0A192:  MOVLB  0
0A194:  CALL   1A3E
....................             displayTiempo(Segmento,96,20,3,1); 
0A198:  MOVFF  593,863
0A19C:  MOVLW  60
0A19E:  MOVLB  8
0A1A0:  MOVWF  x64
0A1A2:  MOVLW  14
0A1A4:  MOVWF  x65
0A1A6:  MOVLW  03
0A1A8:  MOVWF  x66
0A1AA:  MOVLW  01
0A1AC:  MOVWF  x67
0A1AE:  MOVLB  0
0A1B0:  CALL   3876
....................             glcd_rect(90, 0, 127, 54, NO, ON); 
0A1B4:  MOVLW  5A
0A1B6:  MOVLB  8
0A1B8:  MOVWF  x78
0A1BA:  CLRF   x79
0A1BC:  MOVLW  7F
0A1BE:  MOVWF  x7A
0A1C0:  MOVLW  36
0A1C2:  MOVWF  x7B
0A1C4:  CLRF   x7C
0A1C6:  MOVLW  01
0A1C8:  MOVWF  x7D
0A1CA:  MOVLB  0
0A1CC:  CALL   17C4
....................              
....................          //displayTiempo(Tpulsomin*10,97,42,3,1);strcpy(Menus.Letra,"%");displayMenu(Menus.Letra,115,42,2,1); 
....................           
....................          if(flag_display==1){ 
0A1D0:  MOVLB  5
0A1D2:  BTFSS  x95.5
0A1D4:  BRA    A230
....................             displayTiempo(penMufla,97,1,3,1); 
0A1D6:  MOVFF  657,863
0A1DA:  MOVFF  656,862
0A1DE:  MOVFF  655,861
0A1E2:  MOVFF  654,860
0A1E6:  MOVLB  0
0A1E8:  CALL   546C
0A1EC:  MOVFF  01,860
0A1F0:  MOVFF  01,863
0A1F4:  MOVLW  61
0A1F6:  MOVLB  8
0A1F8:  MOVWF  x64
0A1FA:  MOVLW  01
0A1FC:  MOVWF  x65
0A1FE:  MOVLW  03
0A200:  MOVWF  x66
0A202:  MOVLW  01
0A204:  MOVWF  x67
0A206:  MOVLB  0
0A208:  CALL   3876
....................             //displayTemperatura(Prom,97,13,0,1); 
....................             //displayFloat(Setpoint-TempeInicial,97,13,1); 
....................             displayFloat(TemperaturaIdeal,97,10,1);} 
0A20C:  MOVFF  65B,863
0A210:  MOVFF  65A,862
0A214:  MOVFF  659,861
0A218:  MOVFF  658,860
0A21C:  MOVLW  61
0A21E:  MOVLB  8
0A220:  MOVWF  x64
0A222:  MOVLW  0A
0A224:  MOVWF  x65
0A226:  MOVLW  01
0A228:  MOVWF  x66
0A22A:  MOVLB  0
0A22C:  GOTO   677C
....................   //       else{ 
.................... //            glcd_rect(60, 46, 88, 52, YES, OFF); 
.................... //            glcd_rect(97, 13, 88, 52, YES, OFF); 
....................          //} 
....................           
....................          // Muestra Valor de esterilizacion Programado. 
....................             displayTiempo(Testerilizacion[3],20,2,0,2);displayTiempo(Testerilizacion[2],33,2,0,2); 
0A230:  MOVFF  5E3,863
0A234:  MOVLW  14
0A236:  MOVLB  8
0A238:  MOVWF  x64
0A23A:  MOVLW  02
0A23C:  MOVWF  x65
0A23E:  CLRF   x66
0A240:  MOVWF  x67
0A242:  MOVLB  0
0A244:  CALL   3876
0A248:  MOVFF  5E2,863
0A24C:  MOVLW  21
0A24E:  MOVLB  8
0A250:  MOVWF  x64
0A252:  MOVLW  02
0A254:  MOVWF  x65
0A256:  CLRF   x66
0A258:  MOVWF  x67
0A25A:  MOVLB  0
0A25C:  CALL   3876
....................             strcpy(Menus.Letra,":");displayMenu(Menus.Letra,46,2,2,2);  
0A260:  MOVLW  08
0A262:  MOVWF  FEA
0A264:  MOVLW  40
0A266:  MOVWF  FE9
0A268:  MOVFF  FF2,860
0A26C:  BCF    FF2.7
0A26E:  MOVLW  00
0A270:  CALL   0EA0
0A274:  TBLRD*-
0A276:  TBLRD*+
0A278:  MOVF   FF5,W
0A27A:  MOVWF  FEE
0A27C:  IORLW  00
0A27E:  BNZ   A276
0A280:  MOVLB  8
0A282:  BTFSC  x60.7
0A284:  BSF    FF2.7
0A286:  MOVLW  08
0A288:  MOVWF  x68
0A28A:  MOVLW  40
0A28C:  MOVWF  x67
0A28E:  MOVLW  2E
0A290:  MOVWF  x69
0A292:  MOVLW  02
0A294:  MOVWF  x6A
0A296:  MOVWF  x6B
0A298:  MOVWF  x6C
0A29A:  MOVLB  0
0A29C:  CALL   1A3E
....................             displayTiempo(Testerilizacion[1],55,2,0,2);displayTiempo(Testerilizacion[0],68,2,0,2); 
0A2A0:  MOVFF  5E1,863
0A2A4:  MOVLW  37
0A2A6:  MOVLB  8
0A2A8:  MOVWF  x64
0A2AA:  MOVLW  02
0A2AC:  MOVWF  x65
0A2AE:  CLRF   x66
0A2B0:  MOVWF  x67
0A2B2:  MOVLB  0
0A2B4:  CALL   3876
0A2B8:  MOVFF  5E0,863
0A2BC:  MOVLW  44
0A2BE:  MOVLB  8
0A2C0:  MOVWF  x64
0A2C2:  MOVLW  02
0A2C4:  MOVWF  x65
0A2C6:  CLRF   x66
0A2C8:  MOVWF  x67
0A2CA:  MOVLB  0
0A2CC:  CALL   3876
....................              
....................             // Muestra Valor de esterilizacion actual. 
....................             strcpy(Menus.Letra,"Time:");displayMenu(Menus.Letra,0,18,2,1);  
0A2D0:  MOVLW  08
0A2D2:  MOVWF  FEA
0A2D4:  MOVLW  40
0A2D6:  MOVWF  FE9
0A2D8:  MOVFF  FF2,860
0A2DC:  BCF    FF2.7
0A2DE:  MOVLW  00
0A2E0:  CALL   0EC0
0A2E4:  TBLRD*-
0A2E6:  TBLRD*+
0A2E8:  MOVF   FF5,W
0A2EA:  MOVWF  FEE
0A2EC:  IORLW  00
0A2EE:  BNZ   A2E6
0A2F0:  MOVLB  8
0A2F2:  BTFSC  x60.7
0A2F4:  BSF    FF2.7
0A2F6:  MOVLW  08
0A2F8:  MOVWF  x68
0A2FA:  MOVLW  40
0A2FC:  MOVWF  x67
0A2FE:  CLRF   x69
0A300:  MOVLW  12
0A302:  MOVWF  x6A
0A304:  MOVLW  02
0A306:  MOVWF  x6B
0A308:  MOVLW  01
0A30A:  MOVWF  x6C
0A30C:  MOVLB  0
0A30E:  CALL   1A3E
....................             //displayTiempos(Horas1[Segmento],30,18,2,1);//displayTiempo(Testerilizacionp[2],36,18,0,1); 
....................             displayTiempo(Testerilizacionp[3],30,18,0,1);displayTiempo(Testerilizacionp[2],36,18,0,1); 
0A312:  MOVFF  5E7,863
0A316:  MOVLW  1E
0A318:  MOVLB  8
0A31A:  MOVWF  x64
0A31C:  MOVLW  12
0A31E:  MOVWF  x65
0A320:  CLRF   x66
0A322:  MOVLW  01
0A324:  MOVWF  x67
0A326:  MOVLB  0
0A328:  CALL   3876
0A32C:  MOVFF  5E6,863
0A330:  MOVLW  24
0A332:  MOVLB  8
0A334:  MOVWF  x64
0A336:  MOVLW  12
0A338:  MOVWF  x65
0A33A:  CLRF   x66
0A33C:  MOVLW  01
0A33E:  MOVWF  x67
0A340:  MOVLB  0
0A342:  CALL   3876
....................             strcpy(Menus.Letra,":");displayMenu(Menus.Letra,42,18,2,1);  
0A346:  MOVLW  08
0A348:  MOVWF  FEA
0A34A:  MOVLW  40
0A34C:  MOVWF  FE9
0A34E:  MOVFF  FF2,860
0A352:  BCF    FF2.7
0A354:  MOVLW  00
0A356:  CALL   0EA0
0A35A:  TBLRD*-
0A35C:  TBLRD*+
0A35E:  MOVF   FF5,W
0A360:  MOVWF  FEE
0A362:  IORLW  00
0A364:  BNZ   A35C
0A366:  MOVLB  8
0A368:  BTFSC  x60.7
0A36A:  BSF    FF2.7
0A36C:  MOVLW  08
0A36E:  MOVWF  x68
0A370:  MOVLW  40
0A372:  MOVWF  x67
0A374:  MOVLW  2A
0A376:  MOVWF  x69
0A378:  MOVLW  12
0A37A:  MOVWF  x6A
0A37C:  MOVLW  02
0A37E:  MOVWF  x6B
0A380:  MOVLW  01
0A382:  MOVWF  x6C
0A384:  MOVLB  0
0A386:  CALL   1A3E
....................             //displayTiempos(Minutos1[Segmento],48,18,2,1);//displayTiempo(Testerilizacionp[0],54,18,0,1); 
....................             displayTiempo(Testerilizacionp[1],48,18,0,1);displayTiempo(Testerilizacionp[0],54,18,0,1); 
0A38A:  MOVFF  5E5,863
0A38E:  MOVLW  30
0A390:  MOVLB  8
0A392:  MOVWF  x64
0A394:  MOVLW  12
0A396:  MOVWF  x65
0A398:  CLRF   x66
0A39A:  MOVLW  01
0A39C:  MOVWF  x67
0A39E:  MOVLB  0
0A3A0:  CALL   3876
0A3A4:  MOVFF  5E4,863
0A3A8:  MOVLW  36
0A3AA:  MOVLB  8
0A3AC:  MOVWF  x64
0A3AE:  MOVLW  12
0A3B0:  MOVWF  x65
0A3B2:  CLRF   x66
0A3B4:  MOVLW  01
0A3B6:  MOVWF  x67
0A3B8:  MOVLB  0
0A3BA:  CALL   3876
....................             strcpy(Menus.Letra,"(H:M)");displayMenu(Menus.Letra,60,18,2,1);  
0A3BE:  MOVLW  08
0A3C0:  MOVWF  FEA
0A3C2:  MOVLW  40
0A3C4:  MOVWF  FE9
0A3C6:  MOVFF  FF2,860
0A3CA:  BCF    FF2.7
0A3CC:  MOVLW  00
0A3CE:  CALL   0EE4
0A3D2:  TBLRD*-
0A3D4:  TBLRD*+
0A3D6:  MOVF   FF5,W
0A3D8:  MOVWF  FEE
0A3DA:  IORLW  00
0A3DC:  BNZ   A3D4
0A3DE:  MOVLB  8
0A3E0:  BTFSC  x60.7
0A3E2:  BSF    FF2.7
0A3E4:  MOVLW  08
0A3E6:  MOVWF  x68
0A3E8:  MOVLW  40
0A3EA:  MOVWF  x67
0A3EC:  MOVLW  3C
0A3EE:  MOVWF  x69
0A3F0:  MOVLW  12
0A3F2:  MOVWF  x6A
0A3F4:  MOVLW  02
0A3F6:  MOVWF  x6B
0A3F8:  MOVLW  01
0A3FA:  MOVWF  x6C
0A3FC:  MOVLB  0
0A3FE:  CALL   1A3E
....................           
....................             glcd_rect(0, 0, 89, 27, NO, ON); 
0A402:  MOVLB  8
0A404:  CLRF   x78
0A406:  CLRF   x79
0A408:  MOVLW  59
0A40A:  MOVWF  x7A
0A40C:  MOVLW  1B
0A40E:  MOVWF  x7B
0A410:  CLRF   x7C
0A412:  MOVLW  01
0A414:  MOVWF  x7D
0A416:  MOVLB  0
0A418:  CALL   17C4
....................             glcd_rect(0, 27, 89, 54, NO, ON); 
0A41C:  MOVLB  8
0A41E:  CLRF   x78
0A420:  MOVLW  1B
0A422:  MOVWF  x79
0A424:  MOVLW  59
0A426:  MOVWF  x7A
0A428:  MOVLW  36
0A42A:  MOVWF  x7B
0A42C:  CLRF   x7C
0A42E:  MOVLW  01
0A430:  MOVWF  x7D
0A432:  MOVLB  0
0A434:  CALL   17C4
0A438:  MOVLB  5
....................       }  
....................       
....................       // Si cumplio el tiempo de esterilización, Muestre ciclo finalizado y detenga control de temperatura. 
....................       if((Testerilizacion[0]>=Testerilizacionp[0])&&(Testerilizacion[1]>=Testerilizacionp[1])&&(Testerilizacion[2]>=Testerilizacionp[2])&&(Testerilizacion[3]>=Testerilizacionp[3]) && Pausa<3) 
0A43A:  MOVF   xE4,W
0A43C:  XORLW  80
0A43E:  MOVWF  00
0A440:  MOVF   xE0,W
0A442:  XORLW  80
0A444:  SUBWF  00,W
0A446:  BZ    A44C
0A448:  BTFSC  FD8.0
0A44A:  BRA    A54E
0A44C:  MOVF   xE5,W
0A44E:  XORLW  80
0A450:  MOVWF  00
0A452:  MOVF   xE1,W
0A454:  XORLW  80
0A456:  SUBWF  00,W
0A458:  BZ    A45E
0A45A:  BTFSC  FD8.0
0A45C:  BRA    A54E
0A45E:  MOVF   xE6,W
0A460:  XORLW  80
0A462:  MOVWF  00
0A464:  MOVF   xE2,W
0A466:  XORLW  80
0A468:  SUBWF  00,W
0A46A:  BZ    A46E
0A46C:  BC    A54E
0A46E:  MOVF   xE7,W
0A470:  XORLW  80
0A472:  MOVWF  00
0A474:  MOVF   xE3,W
0A476:  XORLW  80
0A478:  SUBWF  00,W
0A47A:  BZ    A47E
0A47C:  BC    A54E
0A47E:  MOVF   x9F,W
0A480:  SUBLW  02
0A482:  BNC   A54E
....................       { 
....................          flag_calcula=0; 
0A484:  BCF    x95.1
....................          if(Segmento<Segmentos){ 
0A486:  MOVF   x92,W
0A488:  SUBWF  x93,W
0A48A:  BC    A498
....................             Segmento++; 
0A48C:  INCF   x93,F
....................             Testerilizacion[0]=0; 
0A48E:  CLRF   xE0
....................             Testerilizacion[1]=0; 
0A490:  CLRF   xE1
....................             Testerilizacion[2]=0; 
0A492:  CLRF   xE2
....................             Testerilizacion[3]=0; 
0A494:  CLRF   xE3
....................          } 
....................          else{ 
0A496:  BRA    A49C
....................             Pausa=3; 
0A498:  MOVLW  03
0A49A:  MOVWF  x9F
....................          } 
....................          glcd_fillScreen(OFF); 
0A49C:  MOVLB  8
0A49E:  CLRF   x67
0A4A0:  MOVLB  0
0A4A2:  CALL   1410
....................          Buzz_on; 
0A4A6:  BSF    F8B.4
0A4A8:  BCF    F94.4
....................          delay_ms(1000); 
0A4AA:  MOVLW  04
0A4AC:  MOVLB  8
0A4AE:  MOVWF  x60
0A4B0:  MOVLW  FA
0A4B2:  MOVWF  x68
0A4B4:  MOVLB  0
0A4B6:  CALL   1390
0A4BA:  MOVLB  8
0A4BC:  DECFSZ x60,F
0A4BE:  BRA    A4B0
....................          Buzz_off; 
0A4C0:  BCF    F8B.4
0A4C2:  BCF    F94.4
....................          delay_ms(1000); 
0A4C4:  MOVLW  04
0A4C6:  MOVWF  x60
0A4C8:  MOVLW  FA
0A4CA:  MOVWF  x68
0A4CC:  MOVLB  0
0A4CE:  CALL   1390
0A4D2:  MOVLB  8
0A4D4:  DECFSZ x60,F
0A4D6:  BRA    A4C8
....................          glcd_init(ON); 
0A4D8:  MOVLW  01
0A4DA:  MOVWF  x60
0A4DC:  MOVLB  0
0A4DE:  CALL   1522
....................          strcpy(Menus.Letra,"Status:Cambio Seg."); 
0A4E2:  MOVLW  08
0A4E4:  MOVWF  FEA
0A4E6:  MOVLW  40
0A4E8:  MOVWF  FE9
0A4EA:  MOVFF  FF2,860
0A4EE:  BCF    FF2.7
0A4F0:  MOVLW  00
0A4F2:  CALL   0F08
0A4F6:  TBLRD*-
0A4F8:  TBLRD*+
0A4FA:  MOVF   FF5,W
0A4FC:  MOVWF  FEE
0A4FE:  IORLW  00
0A500:  BNZ   A4F8
0A502:  MOVLB  8
0A504:  BTFSC  x60.7
0A506:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,55,2,1);          
0A508:  MOVLW  08
0A50A:  MOVWF  x68
0A50C:  MOVLW  40
0A50E:  MOVWF  x67
0A510:  CLRF   x69
0A512:  MOVLW  37
0A514:  MOVWF  x6A
0A516:  MOVLW  02
0A518:  MOVWF  x6B
0A51A:  MOVLW  01
0A51C:  MOVWF  x6C
0A51E:  MOVLB  0
0A520:  CALL   1A3E
....................          delay_ms(500); 
0A524:  MOVLW  02
0A526:  MOVLB  8
0A528:  MOVWF  x60
0A52A:  MOVLW  FA
0A52C:  MOVWF  x68
0A52E:  MOVLB  0
0A530:  CALL   1390
0A534:  MOVLB  8
0A536:  DECFSZ x60,F
0A538:  BRA    A52A
....................           
....................          if(Pausa==3){ 
0A53A:  MOVLB  5
0A53C:  MOVF   x9F,W
0A53E:  SUBLW  03
0A540:  BNZ   A54E
....................             glcd_fillScreen(OFF); 
0A542:  MOVLB  8
0A544:  CLRF   x67
0A546:  MOVLB  0
0A548:  CALL   1410
0A54C:  MOVLB  5
....................          } 
....................       }  
....................        
....................       if(tinicio>=60) 
0A54E:  MOVF   xAD,F
0A550:  BNZ   A558
0A552:  MOVF   xAC,W
0A554:  SUBLW  3B
0A556:  BC    A594
....................       { 
....................          tinicio=0; 
0A558:  CLRF   xAD
0A55A:  CLRF   xAC
....................          Testerilizacion[0]++; 
0A55C:  INCF   xE0,F
....................          if(Testerilizacion[0]>9) 
0A55E:  BTFSC  xE0.7
0A560:  BRA    A56C
0A562:  MOVF   xE0,W
0A564:  SUBLW  09
0A566:  BC    A56C
....................          { 
....................             Testerilizacion[0]=0; 
0A568:  CLRF   xE0
....................             Testerilizacion[1]++; 
0A56A:  INCF   xE1,F
....................          } 
....................          if(Testerilizacion[1]>5) 
0A56C:  BTFSC  xE1.7
0A56E:  BRA    A57A
0A570:  MOVF   xE1,W
0A572:  SUBLW  05
0A574:  BC    A57A
....................          { 
....................             Testerilizacion[1]=0; 
0A576:  CLRF   xE1
....................             Testerilizacion[2]++; 
0A578:  INCF   xE2,F
....................          } 
....................          if(Testerilizacion[2]>9) 
0A57A:  BTFSC  xE2.7
0A57C:  BRA    A588
0A57E:  MOVF   xE2,W
0A580:  SUBLW  09
0A582:  BC    A588
....................          { 
....................             Testerilizacion[2]=0; 
0A584:  CLRF   xE2
....................             Testerilizacion[3]++; 
0A586:  INCF   xE3,F
....................          } 
....................          if(Testerilizacion[3]>9) 
0A588:  BTFSC  xE3.7
0A58A:  BRA    A594
0A58C:  MOVF   xE3,W
0A58E:  SUBLW  09
0A590:  BC    A594
....................          { 
....................             Testerilizacion[3]=0; 
0A592:  CLRF   xE3
....................          } 
....................       } 
....................        
....................       if(LEFT)//Si oprime boton de Toma. 
0A594:  BSF    F96.2
0A596:  BTFSC  F84.2
0A598:  BRA    A5D8
....................       { 
....................          if(Pausa<3){ 
0A59A:  MOVF   x9F,W
0A59C:  SUBLW  02
0A59E:  BNC   A5D8
....................             if(Pausa!=2) 
0A5A0:  MOVF   x9F,W
0A5A2:  SUBLW  02
0A5A4:  BZ    A5D8
....................             { 
....................                delay_ms(500);Menu=30;glcd_fillscreen(OFF);Opcion=1;visual=1;Pausa=1;Menu=1; 
0A5A6:  MOVLW  02
0A5A8:  MOVLB  8
0A5AA:  MOVWF  x60
0A5AC:  MOVLW  FA
0A5AE:  MOVWF  x68
0A5B0:  MOVLB  0
0A5B2:  CALL   1390
0A5B6:  MOVLB  8
0A5B8:  DECFSZ x60,F
0A5BA:  BRA    A5AC
0A5BC:  MOVLW  1E
0A5BE:  MOVLB  5
0A5C0:  MOVWF  x9B
0A5C2:  MOVLB  8
0A5C4:  CLRF   x67
0A5C6:  MOVLB  0
0A5C8:  CALL   1410
0A5CC:  MOVLW  01
0A5CE:  MOVLB  5
0A5D0:  MOVWF  xA2
0A5D2:  BSF    x87.7
0A5D4:  MOVWF  x9F
0A5D6:  MOVWF  x9B
....................             } 
....................          } 
....................       } 
....................        
....................       if(Pausa==3 && !DOOR){          
0A5D8:  MOVF   x9F,W
0A5DA:  SUBLW  03
0A5DC:  BTFSS  FD8.2
0A5DE:  BRA    A7AE
0A5E0:  BSF    F92.4
0A5E2:  BTFSC  F80.4
0A5E4:  BRA    A7AE
....................          //strcpy(Menus.Letra,"Status:Finalizado"); 
....................          if(Temperatura>80){ 
0A5E6:  MOVLB  8
0A5E8:  CLRF   x63
0A5EA:  CLRF   x62
0A5EC:  MOVLW  20
0A5EE:  MOVWF  x61
0A5F0:  MOVLW  85
0A5F2:  MOVWF  x60
0A5F4:  MOVFF  627,867
0A5F8:  MOVFF  626,866
0A5FC:  MOVFF  625,865
0A600:  MOVFF  624,864
0A604:  MOVLB  0
0A606:  CALL   1D7C
0A60A:  BNC   A6D4
....................             if(mensaje){ 
0A60C:  MOVLB  5
0A60E:  BTFSS  x87.3
0A610:  BRA    A674
....................                glcd_rect(0, 55, 127, 63, YES, OFF); 
0A612:  MOVLB  8
0A614:  CLRF   x78
0A616:  MOVLW  37
0A618:  MOVWF  x79
0A61A:  MOVLW  7F
0A61C:  MOVWF  x7A
0A61E:  MOVLW  3F
0A620:  MOVWF  x7B
0A622:  MOVLW  01
0A624:  MOVWF  x7C
0A626:  CLRF   x7D
0A628:  MOVLB  0
0A62A:  CALL   17C4
....................                strcpy(Menus.Letra,"NO APAGUE EL EQUIPO"); 
0A62E:  MOVLW  08
0A630:  MOVWF  FEA
0A632:  MOVLW  40
0A634:  MOVWF  FE9
0A636:  MOVFF  FF2,860
0A63A:  BCF    FF2.7
0A63C:  MOVLW  00
0A63E:  CALL   0F3A
0A642:  TBLRD*-
0A644:  TBLRD*+
0A646:  MOVF   FF5,W
0A648:  MOVWF  FEE
0A64A:  IORLW  00
0A64C:  BNZ   A644
0A64E:  MOVLB  8
0A650:  BTFSC  x60.7
0A652:  BSF    FF2.7
....................                displayMenu(Menus.Letra,0,55,2,1); 
0A654:  MOVLW  08
0A656:  MOVWF  x68
0A658:  MOVLW  40
0A65A:  MOVWF  x67
0A65C:  CLRF   x69
0A65E:  MOVLW  37
0A660:  MOVWF  x6A
0A662:  MOVLW  02
0A664:  MOVWF  x6B
0A666:  MOVLW  01
0A668:  MOVWF  x6C
0A66A:  MOVLB  0
0A66C:  CALL   1A3E
....................             }else{ 
0A670:  BRA    A6D2
0A672:  MOVLB  5
....................                glcd_rect(0, 55, 127, 63, YES, OFF); 
0A674:  MOVLB  8
0A676:  CLRF   x78
0A678:  MOVLW  37
0A67A:  MOVWF  x79
0A67C:  MOVLW  7F
0A67E:  MOVWF  x7A
0A680:  MOVLW  3F
0A682:  MOVWF  x7B
0A684:  MOVLW  01
0A686:  MOVWF  x7C
0A688:  CLRF   x7D
0A68A:  MOVLB  0
0A68C:  CALL   17C4
....................                strcpy(Menus.Letra,"Status:Finalizado"); 
0A690:  MOVLW  08
0A692:  MOVWF  FEA
0A694:  MOVLW  40
0A696:  MOVWF  FE9
0A698:  MOVFF  FF2,860
0A69C:  BCF    FF2.7
0A69E:  MOVLW  00
0A6A0:  CALL   0F6C
0A6A4:  TBLRD*-
0A6A6:  TBLRD*+
0A6A8:  MOVF   FF5,W
0A6AA:  MOVWF  FEE
0A6AC:  IORLW  00
0A6AE:  BNZ   A6A6
0A6B0:  MOVLB  8
0A6B2:  BTFSC  x60.7
0A6B4:  BSF    FF2.7
....................                displayMenu(Menus.Letra,0,55,2,1); 
0A6B6:  MOVLW  08
0A6B8:  MOVWF  x68
0A6BA:  MOVLW  40
0A6BC:  MOVWF  x67
0A6BE:  CLRF   x69
0A6C0:  MOVLW  37
0A6C2:  MOVWF  x6A
0A6C4:  MOVLW  02
0A6C6:  MOVWF  x6B
0A6C8:  MOVLW  01
0A6CA:  MOVWF  x6C
0A6CC:  MOVLB  0
0A6CE:  CALL   1A3E
....................             } 
....................          }else{ 
0A6D2:  BRA    A79A
....................             if(mensaje){ 
0A6D4:  MOVLB  5
0A6D6:  BTFSS  x87.3
0A6D8:  BRA    A73C
....................                glcd_rect(0, 55, 127, 63, YES, OFF); 
0A6DA:  MOVLB  8
0A6DC:  CLRF   x78
0A6DE:  MOVLW  37
0A6E0:  MOVWF  x79
0A6E2:  MOVLW  7F
0A6E4:  MOVWF  x7A
0A6E6:  MOVLW  3F
0A6E8:  MOVWF  x7B
0A6EA:  MOVLW  01
0A6EC:  MOVWF  x7C
0A6EE:  CLRF   x7D
0A6F0:  MOVLB  0
0A6F2:  CALL   17C4
....................                strcpy(Menus.Letra,"Puede apagar la Mufla"); 
0A6F6:  MOVLW  08
0A6F8:  MOVWF  FEA
0A6FA:  MOVLW  40
0A6FC:  MOVWF  FE9
0A6FE:  MOVFF  FF2,860
0A702:  BCF    FF2.7
0A704:  MOVLW  00
0A706:  CALL   0F9C
0A70A:  TBLRD*-
0A70C:  TBLRD*+
0A70E:  MOVF   FF5,W
0A710:  MOVWF  FEE
0A712:  IORLW  00
0A714:  BNZ   A70C
0A716:  MOVLB  8
0A718:  BTFSC  x60.7
0A71A:  BSF    FF2.7
....................                displayMenu(Menus.Letra,0,55,2,1); 
0A71C:  MOVLW  08
0A71E:  MOVWF  x68
0A720:  MOVLW  40
0A722:  MOVWF  x67
0A724:  CLRF   x69
0A726:  MOVLW  37
0A728:  MOVWF  x6A
0A72A:  MOVLW  02
0A72C:  MOVWF  x6B
0A72E:  MOVLW  01
0A730:  MOVWF  x6C
0A732:  MOVLB  0
0A734:  CALL   1A3E
....................             }else{ 
0A738:  BRA    A79A
0A73A:  MOVLB  5
....................                glcd_rect(0, 55, 127, 63, YES, OFF); 
0A73C:  MOVLB  8
0A73E:  CLRF   x78
0A740:  MOVLW  37
0A742:  MOVWF  x79
0A744:  MOVLW  7F
0A746:  MOVWF  x7A
0A748:  MOVLW  3F
0A74A:  MOVWF  x7B
0A74C:  MOVLW  01
0A74E:  MOVWF  x7C
0A750:  CLRF   x7D
0A752:  MOVLB  0
0A754:  CALL   17C4
....................                strcpy(Menus.Letra,"Status:Finalizado"); 
0A758:  MOVLW  08
0A75A:  MOVWF  FEA
0A75C:  MOVLW  40
0A75E:  MOVWF  FE9
0A760:  MOVFF  FF2,860
0A764:  BCF    FF2.7
0A766:  MOVLW  00
0A768:  CALL   0F6C
0A76C:  TBLRD*-
0A76E:  TBLRD*+
0A770:  MOVF   FF5,W
0A772:  MOVWF  FEE
0A774:  IORLW  00
0A776:  BNZ   A76E
0A778:  MOVLB  8
0A77A:  BTFSC  x60.7
0A77C:  BSF    FF2.7
....................                displayMenu(Menus.Letra,0,55,2,1); 
0A77E:  MOVLW  08
0A780:  MOVWF  x68
0A782:  MOVLW  40
0A784:  MOVWF  x67
0A786:  CLRF   x69
0A788:  MOVLW  37
0A78A:  MOVWF  x6A
0A78C:  MOVLW  02
0A78E:  MOVWF  x6B
0A790:  MOVLW  01
0A792:  MOVWF  x6C
0A794:  MOVLB  0
0A796:  CALL   1A3E
....................             } 
....................          } 
....................          tiempo_esterilizacion=4; 
0A79A:  MOVLW  04
0A79C:  MOVLB  5
0A79E:  MOVWF  xA3
....................          Control=0; 
0A7A0:  CLRF   x99
....................          Resistencia_off; 
0A7A2:  BCF    F8B.0
0A7A4:  BCF    F94.0
....................          Tpulso=0.0; 
0A7A6:  CLRF   xFB
0A7A8:  CLRF   xFA
0A7AA:  CLRF   xF9
0A7AC:  CLRF   xF8
....................       } 
....................          
....................     } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------        
....................  
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................       if(Menu==100){ //Menu de Configuración de Parametros de Control 
0A7AE:  MOVF   x9B,W
0A7B0:  SUBLW  64
0A7B2:  BTFSS  FD8.2
0A7B4:  GOTO   AF3E
....................        
....................       if(Opcion>11) 
0A7B8:  MOVF   xA2,W
0A7BA:  SUBLW  0B
0A7BC:  BC    A7C2
....................       {Opcion=1;} 
0A7BE:  MOVLW  01
0A7C0:  MOVWF  xA2
....................       if(Opcion<1) 
0A7C2:  MOVF   xA2,F
0A7C4:  BNZ   A7CA
....................       {Opcion=11;} 
0A7C6:  MOVLW  0B
0A7C8:  MOVWF  xA2
....................        
....................       if(Opcion<=6){ 
0A7CA:  MOVF   xA2,W
0A7CC:  SUBLW  06
0A7CE:  BTFSS  FD8.0
0A7D0:  BRA    AB2E
....................          if(Opcion==1)    
0A7D2:  DECFSZ xA2,W
0A7D4:  BRA    A81A
....................             {strcpy(Menus.Letra,"Proporcional"); 
0A7D6:  MOVLW  08
0A7D8:  MOVWF  FEA
0A7DA:  MOVLW  40
0A7DC:  MOVWF  FE9
0A7DE:  MOVFF  FF2,860
0A7E2:  BCF    FF2.7
0A7E4:  MOVLW  00
0A7E6:  MOVLB  0
0A7E8:  CALL   0FD0
0A7EC:  TBLRD*-
0A7EE:  TBLRD*+
0A7F0:  MOVF   FF5,W
0A7F2:  MOVWF  FEE
0A7F4:  IORLW  00
0A7F6:  BNZ   A7EE
0A7F8:  MOVLB  8
0A7FA:  BTFSC  x60.7
0A7FC:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,0,1,1);} 
0A7FE:  MOVLW  08
0A800:  MOVWF  x68
0A802:  MOVLW  40
0A804:  MOVWF  x67
0A806:  CLRF   x69
0A808:  CLRF   x6A
0A80A:  MOVLW  01
0A80C:  MOVWF  x6B
0A80E:  MOVWF  x6C
0A810:  MOVLB  0
0A812:  CALL   1A3E
....................          else 
0A816:  BRA    A85A
0A818:  MOVLB  5
....................             {strcpy(Menus.Letra,"Proporcional"); 
0A81A:  MOVLW  08
0A81C:  MOVWF  FEA
0A81E:  MOVLW  40
0A820:  MOVWF  FE9
0A822:  MOVFF  FF2,860
0A826:  BCF    FF2.7
0A828:  MOVLW  00
0A82A:  MOVLB  0
0A82C:  CALL   0FD0
0A830:  TBLRD*-
0A832:  TBLRD*+
0A834:  MOVF   FF5,W
0A836:  MOVWF  FEE
0A838:  IORLW  00
0A83A:  BNZ   A832
0A83C:  MOVLB  8
0A83E:  BTFSC  x60.7
0A840:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,0,0,1);} 
0A842:  MOVLW  08
0A844:  MOVWF  x68
0A846:  MOVLW  40
0A848:  MOVWF  x67
0A84A:  CLRF   x69
0A84C:  CLRF   x6A
0A84E:  CLRF   x6B
0A850:  MOVLW  01
0A852:  MOVWF  x6C
0A854:  MOVLB  0
0A856:  CALL   1A3E
....................           
....................          if(Opcion==2)    
0A85A:  MOVLB  5
0A85C:  MOVF   xA2,W
0A85E:  SUBLW  02
0A860:  BNZ   A8A8
....................             {strcpy(Menus.Letra,"Integral"); 
0A862:  MOVLW  08
0A864:  MOVWF  FEA
0A866:  MOVLW  40
0A868:  MOVWF  FE9
0A86A:  MOVFF  FF2,860
0A86E:  BCF    FF2.7
0A870:  MOVLW  00
0A872:  MOVLB  0
0A874:  CALL   0FFC
0A878:  TBLRD*-
0A87A:  TBLRD*+
0A87C:  MOVF   FF5,W
0A87E:  MOVWF  FEE
0A880:  IORLW  00
0A882:  BNZ   A87A
0A884:  MOVLB  8
0A886:  BTFSC  x60.7
0A888:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,9,1,1);} 
0A88A:  MOVLW  08
0A88C:  MOVWF  x68
0A88E:  MOVLW  40
0A890:  MOVWF  x67
0A892:  CLRF   x69
0A894:  MOVLW  09
0A896:  MOVWF  x6A
0A898:  MOVLW  01
0A89A:  MOVWF  x6B
0A89C:  MOVWF  x6C
0A89E:  MOVLB  0
0A8A0:  CALL   1A3E
....................          else 
0A8A4:  BRA    A8EA
0A8A6:  MOVLB  5
....................             {strcpy(Menus.Letra,"Integral"); 
0A8A8:  MOVLW  08
0A8AA:  MOVWF  FEA
0A8AC:  MOVLW  40
0A8AE:  MOVWF  FE9
0A8B0:  MOVFF  FF2,860
0A8B4:  BCF    FF2.7
0A8B6:  MOVLW  00
0A8B8:  MOVLB  0
0A8BA:  CALL   0FFC
0A8BE:  TBLRD*-
0A8C0:  TBLRD*+
0A8C2:  MOVF   FF5,W
0A8C4:  MOVWF  FEE
0A8C6:  IORLW  00
0A8C8:  BNZ   A8C0
0A8CA:  MOVLB  8
0A8CC:  BTFSC  x60.7
0A8CE:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,9,0,1);} 
0A8D0:  MOVLW  08
0A8D2:  MOVWF  x68
0A8D4:  MOVLW  40
0A8D6:  MOVWF  x67
0A8D8:  CLRF   x69
0A8DA:  MOVLW  09
0A8DC:  MOVWF  x6A
0A8DE:  CLRF   x6B
0A8E0:  MOVLW  01
0A8E2:  MOVWF  x6C
0A8E4:  MOVLB  0
0A8E6:  CALL   1A3E
....................              
....................          if(Opcion==3)    
0A8EA:  MOVLB  5
0A8EC:  MOVF   xA2,W
0A8EE:  SUBLW  03
0A8F0:  BNZ   A938
....................             {strcpy(Menus.Letra,"Derivativo"); 
0A8F2:  MOVLW  08
0A8F4:  MOVWF  FEA
0A8F6:  MOVLW  40
0A8F8:  MOVWF  FE9
0A8FA:  MOVFF  FF2,860
0A8FE:  BCF    FF2.7
0A900:  MOVLW  00
0A902:  MOVLB  0
0A904:  CALL   1024
0A908:  TBLRD*-
0A90A:  TBLRD*+
0A90C:  MOVF   FF5,W
0A90E:  MOVWF  FEE
0A910:  IORLW  00
0A912:  BNZ   A90A
0A914:  MOVLB  8
0A916:  BTFSC  x60.7
0A918:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,18,1,1);} 
0A91A:  MOVLW  08
0A91C:  MOVWF  x68
0A91E:  MOVLW  40
0A920:  MOVWF  x67
0A922:  CLRF   x69
0A924:  MOVLW  12
0A926:  MOVWF  x6A
0A928:  MOVLW  01
0A92A:  MOVWF  x6B
0A92C:  MOVWF  x6C
0A92E:  MOVLB  0
0A930:  CALL   1A3E
....................          else 
0A934:  BRA    A97A
0A936:  MOVLB  5
....................             {strcpy(Menus.Letra,"Derivativo"); 
0A938:  MOVLW  08
0A93A:  MOVWF  FEA
0A93C:  MOVLW  40
0A93E:  MOVWF  FE9
0A940:  MOVFF  FF2,860
0A944:  BCF    FF2.7
0A946:  MOVLW  00
0A948:  MOVLB  0
0A94A:  CALL   1024
0A94E:  TBLRD*-
0A950:  TBLRD*+
0A952:  MOVF   FF5,W
0A954:  MOVWF  FEE
0A956:  IORLW  00
0A958:  BNZ   A950
0A95A:  MOVLB  8
0A95C:  BTFSC  x60.7
0A95E:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,18,0,1);}    
0A960:  MOVLW  08
0A962:  MOVWF  x68
0A964:  MOVLW  40
0A966:  MOVWF  x67
0A968:  CLRF   x69
0A96A:  MOVLW  12
0A96C:  MOVWF  x6A
0A96E:  CLRF   x6B
0A970:  MOVLW  01
0A972:  MOVWF  x6C
0A974:  MOVLB  0
0A976:  CALL   1A3E
....................           
....................          if(Opcion==4)    
0A97A:  MOVLB  5
0A97C:  MOVF   xA2,W
0A97E:  SUBLW  04
0A980:  BNZ   A9C8
....................             {strcpy(Menus.Letra,"Tciclo"); 
0A982:  MOVLW  08
0A984:  MOVWF  FEA
0A986:  MOVLW  40
0A988:  MOVWF  FE9
0A98A:  MOVFF  FF2,860
0A98E:  BCF    FF2.7
0A990:  MOVLW  00
0A992:  MOVLB  0
0A994:  CALL   104E
0A998:  TBLRD*-
0A99A:  TBLRD*+
0A99C:  MOVF   FF5,W
0A99E:  MOVWF  FEE
0A9A0:  IORLW  00
0A9A2:  BNZ   A99A
0A9A4:  MOVLB  8
0A9A6:  BTFSC  x60.7
0A9A8:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,27,1,1);} 
0A9AA:  MOVLW  08
0A9AC:  MOVWF  x68
0A9AE:  MOVLW  40
0A9B0:  MOVWF  x67
0A9B2:  CLRF   x69
0A9B4:  MOVLW  1B
0A9B6:  MOVWF  x6A
0A9B8:  MOVLW  01
0A9BA:  MOVWF  x6B
0A9BC:  MOVWF  x6C
0A9BE:  MOVLB  0
0A9C0:  CALL   1A3E
....................          else 
0A9C4:  BRA    AA0A
0A9C6:  MOVLB  5
....................             {strcpy(Menus.Letra,"Tciclo"); 
0A9C8:  MOVLW  08
0A9CA:  MOVWF  FEA
0A9CC:  MOVLW  40
0A9CE:  MOVWF  FE9
0A9D0:  MOVFF  FF2,860
0A9D4:  BCF    FF2.7
0A9D6:  MOVLW  00
0A9D8:  MOVLB  0
0A9DA:  CALL   104E
0A9DE:  TBLRD*-
0A9E0:  TBLRD*+
0A9E2:  MOVF   FF5,W
0A9E4:  MOVWF  FEE
0A9E6:  IORLW  00
0A9E8:  BNZ   A9E0
0A9EA:  MOVLB  8
0A9EC:  BTFSC  x60.7
0A9EE:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,27,0,1);} 
0A9F0:  MOVLW  08
0A9F2:  MOVWF  x68
0A9F4:  MOVLW  40
0A9F6:  MOVWF  x67
0A9F8:  CLRF   x69
0A9FA:  MOVLW  1B
0A9FC:  MOVWF  x6A
0A9FE:  CLRF   x6B
0AA00:  MOVLW  01
0AA02:  MOVWF  x6C
0AA04:  MOVLB  0
0AA06:  CALL   1A3E
....................              
....................          if(Opcion==5)    
0AA0A:  MOVLB  5
0AA0C:  MOVF   xA2,W
0AA0E:  SUBLW  05
0AA10:  BNZ   AA58
....................             {strcpy(Menus.Letra,"Ajuste +"); 
0AA12:  MOVLW  08
0AA14:  MOVWF  FEA
0AA16:  MOVLW  40
0AA18:  MOVWF  FE9
0AA1A:  MOVFF  FF2,860
0AA1E:  BCF    FF2.7
0AA20:  MOVLW  00
0AA22:  MOVLB  0
0AA24:  CALL   1074
0AA28:  TBLRD*-
0AA2A:  TBLRD*+
0AA2C:  MOVF   FF5,W
0AA2E:  MOVWF  FEE
0AA30:  IORLW  00
0AA32:  BNZ   AA2A
0AA34:  MOVLB  8
0AA36:  BTFSC  x60.7
0AA38:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,36,1,1);} 
0AA3A:  MOVLW  08
0AA3C:  MOVWF  x68
0AA3E:  MOVLW  40
0AA40:  MOVWF  x67
0AA42:  CLRF   x69
0AA44:  MOVLW  24
0AA46:  MOVWF  x6A
0AA48:  MOVLW  01
0AA4A:  MOVWF  x6B
0AA4C:  MOVWF  x6C
0AA4E:  MOVLB  0
0AA50:  CALL   1A3E
....................          else 
0AA54:  BRA    AA9A
0AA56:  MOVLB  5
....................             {strcpy(Menus.Letra,"Ajuste +"); 
0AA58:  MOVLW  08
0AA5A:  MOVWF  FEA
0AA5C:  MOVLW  40
0AA5E:  MOVWF  FE9
0AA60:  MOVFF  FF2,860
0AA64:  BCF    FF2.7
0AA66:  MOVLW  00
0AA68:  MOVLB  0
0AA6A:  CALL   1074
0AA6E:  TBLRD*-
0AA70:  TBLRD*+
0AA72:  MOVF   FF5,W
0AA74:  MOVWF  FEE
0AA76:  IORLW  00
0AA78:  BNZ   AA70
0AA7A:  MOVLB  8
0AA7C:  BTFSC  x60.7
0AA7E:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,36,0,1);}    
0AA80:  MOVLW  08
0AA82:  MOVWF  x68
0AA84:  MOVLW  40
0AA86:  MOVWF  x67
0AA88:  CLRF   x69
0AA8A:  MOVLW  24
0AA8C:  MOVWF  x6A
0AA8E:  CLRF   x6B
0AA90:  MOVLW  01
0AA92:  MOVWF  x6C
0AA94:  MOVLB  0
0AA96:  CALL   1A3E
....................                          
....................          if(Opcion==6)    
0AA9A:  MOVLB  5
0AA9C:  MOVF   xA2,W
0AA9E:  SUBLW  06
0AAA0:  BNZ   AAE8
....................             {strcpy(Menus.Letra,"Ajuste -"); 
0AAA2:  MOVLW  08
0AAA4:  MOVWF  FEA
0AAA6:  MOVLW  40
0AAA8:  MOVWF  FE9
0AAAA:  MOVFF  FF2,860
0AAAE:  BCF    FF2.7
0AAB0:  MOVLW  00
0AAB2:  MOVLB  0
0AAB4:  CALL   109C
0AAB8:  TBLRD*-
0AABA:  TBLRD*+
0AABC:  MOVF   FF5,W
0AABE:  MOVWF  FEE
0AAC0:  IORLW  00
0AAC2:  BNZ   AABA
0AAC4:  MOVLB  8
0AAC6:  BTFSC  x60.7
0AAC8:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,45,1,1);} 
0AACA:  MOVLW  08
0AACC:  MOVWF  x68
0AACE:  MOVLW  40
0AAD0:  MOVWF  x67
0AAD2:  CLRF   x69
0AAD4:  MOVLW  2D
0AAD6:  MOVWF  x6A
0AAD8:  MOVLW  01
0AADA:  MOVWF  x6B
0AADC:  MOVWF  x6C
0AADE:  MOVLB  0
0AAE0:  CALL   1A3E
....................          else 
0AAE4:  BRA    AB2A
0AAE6:  MOVLB  5
....................             {strcpy(Menus.Letra,"Ajuste -"); 
0AAE8:  MOVLW  08
0AAEA:  MOVWF  FEA
0AAEC:  MOVLW  40
0AAEE:  MOVWF  FE9
0AAF0:  MOVFF  FF2,860
0AAF4:  BCF    FF2.7
0AAF6:  MOVLW  00
0AAF8:  MOVLB  0
0AAFA:  CALL   109C
0AAFE:  TBLRD*-
0AB00:  TBLRD*+
0AB02:  MOVF   FF5,W
0AB04:  MOVWF  FEE
0AB06:  IORLW  00
0AB08:  BNZ   AB00
0AB0A:  MOVLB  8
0AB0C:  BTFSC  x60.7
0AB0E:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,45,0,1);}      
0AB10:  MOVLW  08
0AB12:  MOVWF  x68
0AB14:  MOVLW  40
0AB16:  MOVWF  x67
0AB18:  CLRF   x69
0AB1A:  MOVLW  2D
0AB1C:  MOVWF  x6A
0AB1E:  CLRF   x6B
0AB20:  MOVLW  01
0AB22:  MOVWF  x6C
0AB24:  MOVLB  0
0AB26:  CALL   1A3E
....................       } 
....................       else{ 
0AB2A:  BRA    AE38
0AB2C:  MOVLB  5
....................          if(Opcion==7)    
0AB2E:  MOVF   xA2,W
0AB30:  SUBLW  07
0AB32:  BNZ   AB78
....................             {strcpy(Menus.Letra,"Media Movil"); 
0AB34:  MOVLW  08
0AB36:  MOVWF  FEA
0AB38:  MOVLW  40
0AB3A:  MOVWF  FE9
0AB3C:  MOVFF  FF2,860
0AB40:  BCF    FF2.7
0AB42:  MOVLW  00
0AB44:  MOVLB  0
0AB46:  CALL   10C4
0AB4A:  TBLRD*-
0AB4C:  TBLRD*+
0AB4E:  MOVF   FF5,W
0AB50:  MOVWF  FEE
0AB52:  IORLW  00
0AB54:  BNZ   AB4C
0AB56:  MOVLB  8
0AB58:  BTFSC  x60.7
0AB5A:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,0,1,1);} 
0AB5C:  MOVLW  08
0AB5E:  MOVWF  x68
0AB60:  MOVLW  40
0AB62:  MOVWF  x67
0AB64:  CLRF   x69
0AB66:  CLRF   x6A
0AB68:  MOVLW  01
0AB6A:  MOVWF  x6B
0AB6C:  MOVWF  x6C
0AB6E:  MOVLB  0
0AB70:  CALL   1A3E
....................          else 
0AB74:  BRA    ABB8
0AB76:  MOVLB  5
....................             {strcpy(Menus.Letra,"Media Movil"); 
0AB78:  MOVLW  08
0AB7A:  MOVWF  FEA
0AB7C:  MOVLW  40
0AB7E:  MOVWF  FE9
0AB80:  MOVFF  FF2,860
0AB84:  BCF    FF2.7
0AB86:  MOVLW  00
0AB88:  MOVLB  0
0AB8A:  CALL   10C4
0AB8E:  TBLRD*-
0AB90:  TBLRD*+
0AB92:  MOVF   FF5,W
0AB94:  MOVWF  FEE
0AB96:  IORLW  00
0AB98:  BNZ   AB90
0AB9A:  MOVLB  8
0AB9C:  BTFSC  x60.7
0AB9E:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,0,0,1);}      
0ABA0:  MOVLW  08
0ABA2:  MOVWF  x68
0ABA4:  MOVLW  40
0ABA6:  MOVWF  x67
0ABA8:  CLRF   x69
0ABAA:  CLRF   x6A
0ABAC:  CLRF   x6B
0ABAE:  MOVLW  01
0ABB0:  MOVWF  x6C
0ABB2:  MOVLB  0
0ABB4:  CALL   1A3E
....................              
....................          if(Opcion==8)    
0ABB8:  MOVLB  5
0ABBA:  MOVF   xA2,W
0ABBC:  SUBLW  08
0ABBE:  BNZ   AC06
....................             {strcpy(Menus.Letra,"Coeficiente"); 
0ABC0:  MOVLW  08
0ABC2:  MOVWF  FEA
0ABC4:  MOVLW  40
0ABC6:  MOVWF  FE9
0ABC8:  MOVFF  FF2,860
0ABCC:  BCF    FF2.7
0ABCE:  MOVLW  00
0ABD0:  MOVLB  0
0ABD2:  CALL   10EE
0ABD6:  TBLRD*-
0ABD8:  TBLRD*+
0ABDA:  MOVF   FF5,W
0ABDC:  MOVWF  FEE
0ABDE:  IORLW  00
0ABE0:  BNZ   ABD8
0ABE2:  MOVLB  8
0ABE4:  BTFSC  x60.7
0ABE6:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,9,1,1);} 
0ABE8:  MOVLW  08
0ABEA:  MOVWF  x68
0ABEC:  MOVLW  40
0ABEE:  MOVWF  x67
0ABF0:  CLRF   x69
0ABF2:  MOVLW  09
0ABF4:  MOVWF  x6A
0ABF6:  MOVLW  01
0ABF8:  MOVWF  x6B
0ABFA:  MOVWF  x6C
0ABFC:  MOVLB  0
0ABFE:  CALL   1A3E
....................          else 
0AC02:  BRA    AC48
0AC04:  MOVLB  5
....................             {strcpy(Menus.Letra,"Coeficiente"); 
0AC06:  MOVLW  08
0AC08:  MOVWF  FEA
0AC0A:  MOVLW  40
0AC0C:  MOVWF  FE9
0AC0E:  MOVFF  FF2,860
0AC12:  BCF    FF2.7
0AC14:  MOVLW  00
0AC16:  MOVLB  0
0AC18:  CALL   10EE
0AC1C:  TBLRD*-
0AC1E:  TBLRD*+
0AC20:  MOVF   FF5,W
0AC22:  MOVWF  FEE
0AC24:  IORLW  00
0AC26:  BNZ   AC1E
0AC28:  MOVLB  8
0AC2A:  BTFSC  x60.7
0AC2C:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,9,0,1);}   
0AC2E:  MOVLW  08
0AC30:  MOVWF  x68
0AC32:  MOVLW  40
0AC34:  MOVWF  x67
0AC36:  CLRF   x69
0AC38:  MOVLW  09
0AC3A:  MOVWF  x6A
0AC3C:  CLRF   x6B
0AC3E:  MOVLW  01
0AC40:  MOVWF  x6C
0AC42:  MOVLB  0
0AC44:  CALL   1A3E
....................              
....................          if(Opcion==9)    
0AC48:  MOVLB  5
0AC4A:  MOVF   xA2,W
0AC4C:  SUBLW  09
0AC4E:  BNZ   AC96
....................             {strcpy(Menus.Letra,"Alarma SobreT"); 
0AC50:  MOVLW  08
0AC52:  MOVWF  FEA
0AC54:  MOVLW  40
0AC56:  MOVWF  FE9
0AC58:  MOVFF  FF2,860
0AC5C:  BCF    FF2.7
0AC5E:  MOVLW  00
0AC60:  MOVLB  0
0AC62:  CALL   1118
0AC66:  TBLRD*-
0AC68:  TBLRD*+
0AC6A:  MOVF   FF5,W
0AC6C:  MOVWF  FEE
0AC6E:  IORLW  00
0AC70:  BNZ   AC68
0AC72:  MOVLB  8
0AC74:  BTFSC  x60.7
0AC76:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,18,1,1);} 
0AC78:  MOVLW  08
0AC7A:  MOVWF  x68
0AC7C:  MOVLW  40
0AC7E:  MOVWF  x67
0AC80:  CLRF   x69
0AC82:  MOVLW  12
0AC84:  MOVWF  x6A
0AC86:  MOVLW  01
0AC88:  MOVWF  x6B
0AC8A:  MOVWF  x6C
0AC8C:  MOVLB  0
0AC8E:  CALL   1A3E
....................          else 
0AC92:  BRA    ACD8
0AC94:  MOVLB  5
....................             {strcpy(Menus.Letra,"Alarma SobreT"); 
0AC96:  MOVLW  08
0AC98:  MOVWF  FEA
0AC9A:  MOVLW  40
0AC9C:  MOVWF  FE9
0AC9E:  MOVFF  FF2,860
0ACA2:  BCF    FF2.7
0ACA4:  MOVLW  00
0ACA6:  MOVLB  0
0ACA8:  CALL   1118
0ACAC:  TBLRD*-
0ACAE:  TBLRD*+
0ACB0:  MOVF   FF5,W
0ACB2:  MOVWF  FEE
0ACB4:  IORLW  00
0ACB6:  BNZ   ACAE
0ACB8:  MOVLB  8
0ACBA:  BTFSC  x60.7
0ACBC:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,18,0,1);}      
0ACBE:  MOVLW  08
0ACC0:  MOVWF  x68
0ACC2:  MOVLW  40
0ACC4:  MOVWF  x67
0ACC6:  CLRF   x69
0ACC8:  MOVLW  12
0ACCA:  MOVWF  x6A
0ACCC:  CLRF   x6B
0ACCE:  MOVLW  01
0ACD0:  MOVWF  x6C
0ACD2:  MOVLB  0
0ACD4:  CALL   1A3E
....................              
....................          if(Opcion==10)    
0ACD8:  MOVLB  5
0ACDA:  MOVF   xA2,W
0ACDC:  SUBLW  0A
0ACDE:  BNZ   AD26
....................             {strcpy(Menus.Letra,"Resistencia"); 
0ACE0:  MOVLW  08
0ACE2:  MOVWF  FEA
0ACE4:  MOVLW  40
0ACE6:  MOVWF  FE9
0ACE8:  MOVFF  FF2,860
0ACEC:  BCF    FF2.7
0ACEE:  MOVLW  00
0ACF0:  MOVLB  0
0ACF2:  CALL   1144
0ACF6:  TBLRD*-
0ACF8:  TBLRD*+
0ACFA:  MOVF   FF5,W
0ACFC:  MOVWF  FEE
0ACFE:  IORLW  00
0AD00:  BNZ   ACF8
0AD02:  MOVLB  8
0AD04:  BTFSC  x60.7
0AD06:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,27,1,1);} 
0AD08:  MOVLW  08
0AD0A:  MOVWF  x68
0AD0C:  MOVLW  40
0AD0E:  MOVWF  x67
0AD10:  CLRF   x69
0AD12:  MOVLW  1B
0AD14:  MOVWF  x6A
0AD16:  MOVLW  01
0AD18:  MOVWF  x6B
0AD1A:  MOVWF  x6C
0AD1C:  MOVLB  0
0AD1E:  CALL   1A3E
....................          else 
0AD22:  BRA    AD68
0AD24:  MOVLB  5
....................             {strcpy(Menus.Letra,"Resistencia"); 
0AD26:  MOVLW  08
0AD28:  MOVWF  FEA
0AD2A:  MOVLW  40
0AD2C:  MOVWF  FE9
0AD2E:  MOVFF  FF2,860
0AD32:  BCF    FF2.7
0AD34:  MOVLW  00
0AD36:  MOVLB  0
0AD38:  CALL   1144
0AD3C:  TBLRD*-
0AD3E:  TBLRD*+
0AD40:  MOVF   FF5,W
0AD42:  MOVWF  FEE
0AD44:  IORLW  00
0AD46:  BNZ   AD3E
0AD48:  MOVLB  8
0AD4A:  BTFSC  x60.7
0AD4C:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,27,0,1);}      
0AD4E:  MOVLW  08
0AD50:  MOVWF  x68
0AD52:  MOVLW  40
0AD54:  MOVWF  x67
0AD56:  CLRF   x69
0AD58:  MOVLW  1B
0AD5A:  MOVWF  x6A
0AD5C:  CLRF   x6B
0AD5E:  MOVLW  01
0AD60:  MOVWF  x6C
0AD62:  MOVLB  0
0AD64:  CALL   1A3E
....................              
....................          if(Opcion==11)    
0AD68:  MOVLB  5
0AD6A:  MOVF   xA2,W
0AD6C:  SUBLW  0B
0AD6E:  BNZ   ADB6
....................             {strcpy(Menus.Letra,"m Mufla"); 
0AD70:  MOVLW  08
0AD72:  MOVWF  FEA
0AD74:  MOVLW  40
0AD76:  MOVWF  FE9
0AD78:  MOVFF  FF2,860
0AD7C:  BCF    FF2.7
0AD7E:  MOVLW  00
0AD80:  MOVLB  0
0AD82:  CALL   116E
0AD86:  TBLRD*-
0AD88:  TBLRD*+
0AD8A:  MOVF   FF5,W
0AD8C:  MOVWF  FEE
0AD8E:  IORLW  00
0AD90:  BNZ   AD88
0AD92:  MOVLB  8
0AD94:  BTFSC  x60.7
0AD96:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,36,1,1);} 
0AD98:  MOVLW  08
0AD9A:  MOVWF  x68
0AD9C:  MOVLW  40
0AD9E:  MOVWF  x67
0ADA0:  CLRF   x69
0ADA2:  MOVLW  24
0ADA4:  MOVWF  x6A
0ADA6:  MOVLW  01
0ADA8:  MOVWF  x6B
0ADAA:  MOVWF  x6C
0ADAC:  MOVLB  0
0ADAE:  CALL   1A3E
....................          else 
0ADB2:  BRA    ADF8
0ADB4:  MOVLB  5
....................             {strcpy(Menus.Letra,"m Mufla"); 
0ADB6:  MOVLW  08
0ADB8:  MOVWF  FEA
0ADBA:  MOVLW  40
0ADBC:  MOVWF  FE9
0ADBE:  MOVFF  FF2,860
0ADC2:  BCF    FF2.7
0ADC4:  MOVLW  00
0ADC6:  MOVLB  0
0ADC8:  CALL   116E
0ADCC:  TBLRD*-
0ADCE:  TBLRD*+
0ADD0:  MOVF   FF5,W
0ADD2:  MOVWF  FEE
0ADD4:  IORLW  00
0ADD6:  BNZ   ADCE
0ADD8:  MOVLB  8
0ADDA:  BTFSC  x60.7
0ADDC:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,36,0,1);}      
0ADDE:  MOVLW  08
0ADE0:  MOVWF  x68
0ADE2:  MOVLW  40
0ADE4:  MOVWF  x67
0ADE6:  CLRF   x69
0ADE8:  MOVLW  24
0ADEA:  MOVWF  x6A
0ADEC:  CLRF   x6B
0ADEE:  MOVLW  01
0ADF0:  MOVWF  x6C
0ADF2:  MOVLB  0
0ADF4:  CALL   1A3E
....................              
....................             strcpy(Menus.Letra,"            "); 
0ADF8:  MOVLW  08
0ADFA:  MOVWF  FEA
0ADFC:  MOVLW  40
0ADFE:  MOVWF  FE9
0AE00:  MOVFF  FF2,860
0AE04:  BCF    FF2.7
0AE06:  MOVLW  00
0AE08:  CALL   1194
0AE0C:  TBLRD*-
0AE0E:  TBLRD*+
0AE10:  MOVF   FF5,W
0AE12:  MOVWF  FEE
0AE14:  IORLW  00
0AE16:  BNZ   AE0E
0AE18:  MOVLB  8
0AE1A:  BTFSC  x60.7
0AE1C:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,45,0,1); 
0AE1E:  MOVLW  08
0AE20:  MOVWF  x68
0AE22:  MOVLW  40
0AE24:  MOVWF  x67
0AE26:  CLRF   x69
0AE28:  MOVLW  2D
0AE2A:  MOVWF  x6A
0AE2C:  CLRF   x6B
0AE2E:  MOVLW  01
0AE30:  MOVWF  x6C
0AE32:  MOVLB  0
0AE34:  CALL   1A3E
....................       }    
....................        
....................          if(UP)//Si oprime hacia arriba 
0AE38:  BSF    F92.5
0AE3A:  BTFSC  F80.5
0AE3C:  BRA    AE6E
....................          { 
....................             Buzz_on;delay_ms(10);Buzz_off; 
0AE3E:  BSF    F8B.4
0AE40:  BCF    F94.4
0AE42:  MOVLW  0A
0AE44:  MOVLB  8
0AE46:  MOVWF  x68
0AE48:  MOVLB  0
0AE4A:  CALL   1390
0AE4E:  BCF    F8B.4
0AE50:  BCF    F94.4
....................             if(Flanco == 0) 
0AE52:  MOVLB  5
0AE54:  BTFSC  x87.4
0AE56:  BRA    AE6C
....................                {Flanco = 1;delay_ms(30);Opcion--;visual=1; 
0AE58:  BSF    x87.4
0AE5A:  MOVLW  1E
0AE5C:  MOVLB  8
0AE5E:  MOVWF  x68
0AE60:  MOVLB  0
0AE62:  CALL   1390
0AE66:  MOVLB  5
0AE68:  DECF   xA2,F
0AE6A:  BSF    x87.7
....................                } 
....................          } 
....................             else 
0AE6C:  BRA    AE72
....................                {Flanco = 0;} 
0AE6E:  MOVLB  5
0AE70:  BCF    x87.4
....................                    
....................          if(DOWN)//Si oprime hacia abajo 
0AE72:  BSF    F96.0
0AE74:  BTFSC  F84.0
0AE76:  BRA    AEA8
....................          { 
....................             Buzz_on;delay_ms(10);Buzz_off; 
0AE78:  BSF    F8B.4
0AE7A:  BCF    F94.4
0AE7C:  MOVLW  0A
0AE7E:  MOVLB  8
0AE80:  MOVWF  x68
0AE82:  MOVLB  0
0AE84:  CALL   1390
0AE88:  BCF    F8B.4
0AE8A:  BCF    F94.4
....................             if(Flanco2 == 0) 
0AE8C:  MOVLB  5
0AE8E:  BTFSC  x87.6
0AE90:  BRA    AEA6
....................                {Flanco2 = 1;delay_ms(30);Opcion++;visual=1; 
0AE92:  BSF    x87.6
0AE94:  MOVLW  1E
0AE96:  MOVLB  8
0AE98:  MOVWF  x68
0AE9A:  MOVLB  0
0AE9C:  CALL   1390
0AEA0:  MOVLB  5
0AEA2:  INCF   xA2,F
0AEA4:  BSF    x87.7
....................                }      
....................          } 
....................             else 
0AEA6:  BRA    AEAA
....................                {Flanco2 = 0;}   
0AEA8:  BCF    x87.6
....................                 
....................          if(RIGHT)//Si oprime SET 
0AEAA:  BSF    F96.1
0AEAC:  BTFSC  F84.1
0AEAE:  BRA    AEF4
....................          {   
....................             Buzz_on;delay_ms(10);Buzz_off; 
0AEB0:  BSF    F8B.4
0AEB2:  BCF    F94.4
0AEB4:  MOVLW  0A
0AEB6:  MOVLB  8
0AEB8:  MOVWF  x68
0AEBA:  MOVLB  0
0AEBC:  CALL   1390
0AEC0:  BCF    F8B.4
0AEC2:  BCF    F94.4
....................             if(Flanco1 == 0) 
0AEC4:  MOVLB  5
0AEC6:  BTFSC  x87.5
0AEC8:  BRA    AEF2
....................                {Flanco1 = 1;delay_ms(30);Menu=Opcion+100;Opcion=1;glcd_fillscreen(OFF);visual=1; 
0AECA:  BSF    x87.5
0AECC:  MOVLW  1E
0AECE:  MOVLB  8
0AED0:  MOVWF  x68
0AED2:  MOVLB  0
0AED4:  CALL   1390
0AED8:  MOVLW  64
0AEDA:  MOVLB  5
0AEDC:  ADDWF  xA2,W
0AEDE:  MOVWF  x9B
0AEE0:  MOVLW  01
0AEE2:  MOVWF  xA2
0AEE4:  MOVLB  8
0AEE6:  CLRF   x67
0AEE8:  MOVLB  0
0AEEA:  CALL   1410
0AEEE:  MOVLB  5
0AEF0:  BSF    x87.7
....................                } 
....................          } 
....................             else 
0AEF2:  BRA    AEF6
....................                {Flanco1 = 0;}  
0AEF4:  BCF    x87.5
....................                 
....................          if(LEFT)//Si oprime boton de Toma. 
0AEF6:  BSF    F96.2
0AEF8:  BTFSC  F84.2
0AEFA:  BRA    AF3E
....................          { 
....................             Buzz_on;delay_ms(10);Buzz_off; 
0AEFC:  BSF    F8B.4
0AEFE:  BCF    F94.4
0AF00:  MOVLW  0A
0AF02:  MOVLB  8
0AF04:  MOVWF  x68
0AF06:  MOVLB  0
0AF08:  CALL   1390
0AF0C:  BCF    F8B.4
0AF0E:  BCF    F94.4
....................             delay_ms(700);Menu=1;glcd_fillscreen(OFF);Opcion=1;visual=1;             
0AF10:  MOVLW  04
0AF12:  MOVLB  8
0AF14:  MOVWF  x60
0AF16:  MOVLW  AF
0AF18:  MOVWF  x68
0AF1A:  MOVLB  0
0AF1C:  CALL   1390
0AF20:  MOVLB  8
0AF22:  DECFSZ x60,F
0AF24:  BRA    AF16
0AF26:  MOVLW  01
0AF28:  MOVLB  5
0AF2A:  MOVWF  x9B
0AF2C:  MOVLB  8
0AF2E:  CLRF   x67
0AF30:  MOVLB  0
0AF32:  CALL   1410
0AF36:  MOVLW  01
0AF38:  MOVLB  5
0AF3A:  MOVWF  xA2
0AF3C:  BSF    x87.7
....................          }       
....................          
....................     } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------        
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................       if(Menu==101){ // Menu de Ajuste de Ganancia 
0AF3E:  MOVF   x9B,W
0AF40:  SUBLW  65
0AF42:  BTFSS  FD8.2
0AF44:  BRA    B1EE
....................        
....................       if(Ganancia>40) 
0AF46:  MOVLB  8
0AF48:  CLRF   x63
0AF4A:  CLRF   x62
0AF4C:  MOVLW  20
0AF4E:  MOVWF  x61
0AF50:  MOVLW  84
0AF52:  MOVWF  x60
0AF54:  MOVFF  613,867
0AF58:  MOVFF  612,866
0AF5C:  MOVFF  611,865
0AF60:  MOVFF  610,864
0AF64:  MOVLB  0
0AF66:  CALL   1D7C
0AF6A:  BNC   AF78
....................       { 
....................          Ganancia=2; 
0AF6C:  MOVLB  6
0AF6E:  CLRF   x13
0AF70:  CLRF   x12
0AF72:  CLRF   x11
0AF74:  MOVLW  80
0AF76:  MOVWF  x10
....................       } 
....................        
....................       if(visual==1) 
0AF78:  MOVLB  5
0AF7A:  BTFSS  x87.7
0AF7C:  BRA    B004
....................       { 
....................          glcd_fillScreen(OFF); 
0AF7E:  MOVLB  8
0AF80:  CLRF   x67
0AF82:  MOVLB  0
0AF84:  CALL   1410
....................          strcpy(Menus.Letra,"P"); 
0AF88:  MOVLW  08
0AF8A:  MOVWF  FEA
0AF8C:  MOVLW  40
0AF8E:  MOVWF  FE9
0AF90:  MOVFF  FF2,860
0AF94:  BCF    FF2.7
0AF96:  MOVLW  00
0AF98:  CALL   11C0
0AF9C:  TBLRD*-
0AF9E:  TBLRD*+
0AFA0:  MOVF   FF5,W
0AFA2:  MOVWF  FEE
0AFA4:  IORLW  00
0AFA6:  BNZ   AF9E
0AFA8:  MOVLB  8
0AFAA:  BTFSC  x60.7
0AFAC:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,0,1,2); 
0AFAE:  MOVLW  08
0AFB0:  MOVWF  x68
0AFB2:  MOVLW  40
0AFB4:  MOVWF  x67
0AFB6:  CLRF   x69
0AFB8:  CLRF   x6A
0AFBA:  MOVLW  01
0AFBC:  MOVWF  x6B
0AFBE:  MOVLW  02
0AFC0:  MOVWF  x6C
0AFC2:  MOVLB  0
0AFC4:  CALL   1A3E
....................           
....................          displayTemperatura(Ganancia,30,30,0,3); 
0AFC8:  MOVFF  613,863
0AFCC:  MOVFF  612,862
0AFD0:  MOVFF  611,861
0AFD4:  MOVFF  610,860
0AFD8:  CALL   546C
0AFDC:  MOVFF  02,861
0AFE0:  MOVFF  01,860
0AFE4:  MOVFF  02,866
0AFE8:  MOVFF  01,865
0AFEC:  MOVLW  1E
0AFEE:  MOVLB  8
0AFF0:  MOVWF  x67
0AFF2:  MOVWF  x68
0AFF4:  CLRF   x69
0AFF6:  MOVLW  03
0AFF8:  MOVWF  x6A
0AFFA:  MOVLB  0
0AFFC:  CALL   3C64
....................           
....................          visual=0; 
0B000:  MOVLB  5
0B002:  BCF    x87.7
....................       } 
....................        
....................          if(UP)//Si oprime hacia arriba 
0B004:  BSF    F92.5
0B006:  BTFSC  F80.5
0B008:  BRA    B0AA
....................          {   
....................             Buzz_on;delay_ms(10);Buzz_off; 
0B00A:  BSF    F8B.4
0B00C:  BCF    F94.4
0B00E:  MOVLW  0A
0B010:  MOVLB  8
0B012:  MOVWF  x68
0B014:  MOVLB  0
0B016:  CALL   1390
0B01A:  BCF    F8B.4
0B01C:  BCF    F94.4
....................             if(Ganancia>40) 
0B01E:  MOVLB  8
0B020:  CLRF   x63
0B022:  CLRF   x62
0B024:  MOVLW  20
0B026:  MOVWF  x61
0B028:  MOVLW  84
0B02A:  MOVWF  x60
0B02C:  MOVFF  613,867
0B030:  MOVFF  612,866
0B034:  MOVFF  611,865
0B038:  MOVFF  610,864
0B03C:  MOVLB  0
0B03E:  CALL   1D7C
0B042:  BNC   B066
....................             { 
....................                Ganancia=40;delay_ms(100);visual=1; 
0B044:  MOVLB  6
0B046:  CLRF   x13
0B048:  CLRF   x12
0B04A:  MOVLW  20
0B04C:  MOVWF  x11
0B04E:  MOVLW  84
0B050:  MOVWF  x10
0B052:  MOVLW  64
0B054:  MOVLB  8
0B056:  MOVWF  x68
0B058:  MOVLB  0
0B05A:  CALL   1390
0B05E:  MOVLB  5
0B060:  BSF    x87.7
....................             } 
....................             else 
0B062:  BRA    B0AA
0B064:  MOVLB  0
....................             { 
....................                delay_ms(30);Ganancia+=1.0;visual=1; 
0B066:  MOVLW  1E
0B068:  MOVLB  8
0B06A:  MOVWF  x68
0B06C:  MOVLB  0
0B06E:  CALL   1390
0B072:  BCF    FD8.1
0B074:  MOVFF  613,869
0B078:  MOVFF  612,868
0B07C:  MOVFF  611,867
0B080:  MOVFF  610,866
0B084:  MOVLB  8
0B086:  CLRF   x6D
0B088:  CLRF   x6C
0B08A:  CLRF   x6B
0B08C:  MOVLW  7F
0B08E:  MOVWF  x6A
0B090:  MOVLB  0
0B092:  CALL   2B0E
0B096:  MOVFF  03,613
0B09A:  MOVFF  02,612
0B09E:  MOVFF  01,611
0B0A2:  MOVFF  00,610
0B0A6:  MOVLB  5
0B0A8:  BSF    x87.7
....................             } 
....................          } 
....................                 
....................          if(DOWN)//Si oprime hacia abajo 
0B0AA:  BSF    F96.0
0B0AC:  BTFSC  F84.0
0B0AE:  BRA    B12C
....................          {   
....................             Buzz_on;delay_ms(10);Buzz_off; 
0B0B0:  BSF    F8B.4
0B0B2:  BCF    F94.4
0B0B4:  MOVLW  0A
0B0B6:  MOVLB  8
0B0B8:  MOVWF  x68
0B0BA:  MOVLB  0
0B0BC:  CALL   1390
0B0C0:  BCF    F8B.4
0B0C2:  BCF    F94.4
....................             if(Ganancia>1) 
0B0C4:  MOVLB  8
0B0C6:  CLRF   x63
0B0C8:  CLRF   x62
0B0CA:  CLRF   x61
0B0CC:  MOVLW  7F
0B0CE:  MOVWF  x60
0B0D0:  MOVFF  613,867
0B0D4:  MOVFF  612,866
0B0D8:  MOVFF  611,865
0B0DC:  MOVFF  610,864
0B0E0:  MOVLB  0
0B0E2:  CALL   1D7C
0B0E6:  BNC   B12E
....................             { 
....................                delay_ms(30);Ganancia-=1.0;visual=1;      
0B0E8:  MOVLW  1E
0B0EA:  MOVLB  8
0B0EC:  MOVWF  x68
0B0EE:  MOVLB  0
0B0F0:  CALL   1390
0B0F4:  BSF    FD8.1
0B0F6:  MOVFF  613,869
0B0FA:  MOVFF  612,868
0B0FE:  MOVFF  611,867
0B102:  MOVFF  610,866
0B106:  MOVLB  8
0B108:  CLRF   x6D
0B10A:  CLRF   x6C
0B10C:  CLRF   x6B
0B10E:  MOVLW  7F
0B110:  MOVWF  x6A
0B112:  MOVLB  0
0B114:  CALL   2B0E
0B118:  MOVFF  03,613
0B11C:  MOVFF  02,612
0B120:  MOVFF  01,611
0B124:  MOVFF  00,610
0B128:  MOVLB  5
0B12A:  BSF    x87.7
0B12C:  MOVLB  0
....................             } 
....................          } 
....................                 
....................          if(RIGHT)//Si oprime SET 
0B12E:  BSF    F96.1
0B130:  BTFSC  F84.1
0B132:  BRA    B15A
....................          {   
....................             Buzz_on;delay_ms(10);Buzz_off; 
0B134:  BSF    F8B.4
0B136:  BCF    F94.4
0B138:  MOVLW  0A
0B13A:  MOVLB  8
0B13C:  MOVWF  x68
0B13E:  MOVLB  0
0B140:  CALL   1390
0B144:  BCF    F8B.4
0B146:  BCF    F94.4
....................             delay_ms(30);visual=1; 
0B148:  MOVLW  1E
0B14A:  MOVLB  8
0B14C:  MOVWF  x68
0B14E:  MOVLB  0
0B150:  CALL   1390
0B154:  MOVLB  5
0B156:  BSF    x87.7
0B158:  MOVLB  0
....................          }  
....................                    
....................          if(LEFT)//Si oprime boton de Toma. 
0B15A:  BSF    F96.2
0B15C:  BTFSC  F84.2
0B15E:  BRA    B1EC
....................          { 
....................             Buzz_on;delay_ms(10);Buzz_off; 
0B160:  BSF    F8B.4
0B162:  BCF    F94.4
0B164:  MOVLW  0A
0B166:  MOVLB  8
0B168:  MOVWF  x68
0B16A:  MOVLB  0
0B16C:  CALL   1390
0B170:  BCF    F8B.4
0B172:  BCF    F94.4
....................             delay_ms(700);Menu=100;glcd_fillscreen(OFF);Opcion=1;visual=1; 
0B174:  MOVLW  04
0B176:  MOVLB  8
0B178:  MOVWF  x60
0B17A:  MOVLW  AF
0B17C:  MOVWF  x68
0B17E:  MOVLB  0
0B180:  CALL   1390
0B184:  MOVLB  8
0B186:  DECFSZ x60,F
0B188:  BRA    B17A
0B18A:  MOVLW  64
0B18C:  MOVLB  5
0B18E:  MOVWF  x9B
0B190:  MOVLB  8
0B192:  CLRF   x67
0B194:  MOVLB  0
0B196:  CALL   1410
0B19A:  MOVLW  01
0B19C:  MOVLB  5
0B19E:  MOVWF  xA2
0B1A0:  BSF    x87.7
....................             write_eeprom(450,(int8)Ganancia); 
0B1A2:  MOVFF  613,863
0B1A6:  MOVFF  612,862
0B1AA:  MOVFF  611,861
0B1AE:  MOVFF  610,860
0B1B2:  MOVLB  0
0B1B4:  CALL   546C
0B1B8:  MOVFF  01,860
0B1BC:  MOVLW  01
0B1BE:  MOVWF  FAA
0B1C0:  MOVLW  C2
0B1C2:  MOVWF  FA9
0B1C4:  MOVFF  860,FA8
0B1C8:  BCF    FA6.6
0B1CA:  BCF    FA6.7
0B1CC:  BSF    FA6.2
0B1CE:  MOVF   FF2,W
0B1D0:  MOVWF  00
0B1D2:  BCF    FF2.7
0B1D4:  MOVLB  F
0B1D6:  MOVLW  55
0B1D8:  MOVWF  FA7
0B1DA:  MOVLW  AA
0B1DC:  MOVWF  FA7
0B1DE:  BSF    FA6.1
0B1E0:  BTFSC  FA6.1
0B1E2:  BRA    B1E0
0B1E4:  BCF    FA6.2
0B1E6:  MOVF   00,W
0B1E8:  IORWF  FF2,F
0B1EA:  MOVLB  0
0B1EC:  MOVLB  5
....................          } 
....................      } 
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................       if(Menu==102){ // Menu de Ajuste de Integral 
0B1EE:  MOVF   x9B,W
0B1F0:  SUBLW  66
0B1F2:  BTFSS  FD8.2
0B1F4:  BRA    B49E
....................        
....................       if(Integral>40) 
0B1F6:  MOVLB  8
0B1F8:  CLRF   x63
0B1FA:  CLRF   x62
0B1FC:  MOVLW  20
0B1FE:  MOVWF  x61
0B200:  MOVLW  84
0B202:  MOVWF  x60
0B204:  MOVFF  637,867
0B208:  MOVFF  636,866
0B20C:  MOVFF  635,865
0B210:  MOVFF  634,864
0B214:  MOVLB  0
0B216:  CALL   1D7C
0B21A:  BNC   B228
....................       { 
....................          Integral=1; 
0B21C:  MOVLB  6
0B21E:  CLRF   x37
0B220:  CLRF   x36
0B222:  CLRF   x35
0B224:  MOVLW  7F
0B226:  MOVWF  x34
....................       } 
....................        
....................       if(visual==1) 
0B228:  MOVLB  5
0B22A:  BTFSS  x87.7
0B22C:  BRA    B2B4
....................       { 
....................          glcd_fillScreen(OFF); 
0B22E:  MOVLB  8
0B230:  CLRF   x67
0B232:  MOVLB  0
0B234:  CALL   1410
....................          strcpy(Menus.Letra,"I"); 
0B238:  MOVLW  08
0B23A:  MOVWF  FEA
0B23C:  MOVLW  40
0B23E:  MOVWF  FE9
0B240:  MOVFF  FF2,860
0B244:  BCF    FF2.7
0B246:  MOVLW  00
0B248:  CALL   11E0
0B24C:  TBLRD*-
0B24E:  TBLRD*+
0B250:  MOVF   FF5,W
0B252:  MOVWF  FEE
0B254:  IORLW  00
0B256:  BNZ   B24E
0B258:  MOVLB  8
0B25A:  BTFSC  x60.7
0B25C:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,0,1,2); 
0B25E:  MOVLW  08
0B260:  MOVWF  x68
0B262:  MOVLW  40
0B264:  MOVWF  x67
0B266:  CLRF   x69
0B268:  CLRF   x6A
0B26A:  MOVLW  01
0B26C:  MOVWF  x6B
0B26E:  MOVLW  02
0B270:  MOVWF  x6C
0B272:  MOVLB  0
0B274:  CALL   1A3E
....................           
....................          displayTemperatura(Integral,30,30,0,3); 
0B278:  MOVFF  637,863
0B27C:  MOVFF  636,862
0B280:  MOVFF  635,861
0B284:  MOVFF  634,860
0B288:  CALL   546C
0B28C:  MOVFF  02,861
0B290:  MOVFF  01,860
0B294:  MOVFF  02,866
0B298:  MOVFF  01,865
0B29C:  MOVLW  1E
0B29E:  MOVLB  8
0B2A0:  MOVWF  x67
0B2A2:  MOVWF  x68
0B2A4:  CLRF   x69
0B2A6:  MOVLW  03
0B2A8:  MOVWF  x6A
0B2AA:  MOVLB  0
0B2AC:  CALL   3C64
....................           
....................          visual=0; 
0B2B0:  MOVLB  5
0B2B2:  BCF    x87.7
....................       } 
....................        
....................          if(UP)//Si oprime hacia arriba 
0B2B4:  BSF    F92.5
0B2B6:  BTFSC  F80.5
0B2B8:  BRA    B35A
....................          {   
....................             Buzz_on;delay_ms(10);Buzz_off; 
0B2BA:  BSF    F8B.4
0B2BC:  BCF    F94.4
0B2BE:  MOVLW  0A
0B2C0:  MOVLB  8
0B2C2:  MOVWF  x68
0B2C4:  MOVLB  0
0B2C6:  CALL   1390
0B2CA:  BCF    F8B.4
0B2CC:  BCF    F94.4
....................             if(Integral>40) 
0B2CE:  MOVLB  8
0B2D0:  CLRF   x63
0B2D2:  CLRF   x62
0B2D4:  MOVLW  20
0B2D6:  MOVWF  x61
0B2D8:  MOVLW  84
0B2DA:  MOVWF  x60
0B2DC:  MOVFF  637,867
0B2E0:  MOVFF  636,866
0B2E4:  MOVFF  635,865
0B2E8:  MOVFF  634,864
0B2EC:  MOVLB  0
0B2EE:  CALL   1D7C
0B2F2:  BNC   B316
....................             { 
....................                Integral=40;delay_ms(100);visual=1; 
0B2F4:  MOVLB  6
0B2F6:  CLRF   x37
0B2F8:  CLRF   x36
0B2FA:  MOVLW  20
0B2FC:  MOVWF  x35
0B2FE:  MOVLW  84
0B300:  MOVWF  x34
0B302:  MOVLW  64
0B304:  MOVLB  8
0B306:  MOVWF  x68
0B308:  MOVLB  0
0B30A:  CALL   1390
0B30E:  MOVLB  5
0B310:  BSF    x87.7
....................             } 
....................             else 
0B312:  BRA    B35A
0B314:  MOVLB  0
....................             { 
....................                delay_ms(30);Integral+=1.0;visual=1; 
0B316:  MOVLW  1E
0B318:  MOVLB  8
0B31A:  MOVWF  x68
0B31C:  MOVLB  0
0B31E:  CALL   1390
0B322:  BCF    FD8.1
0B324:  MOVFF  637,869
0B328:  MOVFF  636,868
0B32C:  MOVFF  635,867
0B330:  MOVFF  634,866
0B334:  MOVLB  8
0B336:  CLRF   x6D
0B338:  CLRF   x6C
0B33A:  CLRF   x6B
0B33C:  MOVLW  7F
0B33E:  MOVWF  x6A
0B340:  MOVLB  0
0B342:  CALL   2B0E
0B346:  MOVFF  03,637
0B34A:  MOVFF  02,636
0B34E:  MOVFF  01,635
0B352:  MOVFF  00,634
0B356:  MOVLB  5
0B358:  BSF    x87.7
....................             } 
....................          } 
....................                 
....................          if(DOWN)//Si oprime hacia abajo 
0B35A:  BSF    F96.0
0B35C:  BTFSC  F84.0
0B35E:  BRA    B3DC
....................          {   
....................             Buzz_on;delay_ms(10);Buzz_off; 
0B360:  BSF    F8B.4
0B362:  BCF    F94.4
0B364:  MOVLW  0A
0B366:  MOVLB  8
0B368:  MOVWF  x68
0B36A:  MOVLB  0
0B36C:  CALL   1390
0B370:  BCF    F8B.4
0B372:  BCF    F94.4
....................             if(Integral>1) 
0B374:  MOVLB  8
0B376:  CLRF   x63
0B378:  CLRF   x62
0B37A:  CLRF   x61
0B37C:  MOVLW  7F
0B37E:  MOVWF  x60
0B380:  MOVFF  637,867
0B384:  MOVFF  636,866
0B388:  MOVFF  635,865
0B38C:  MOVFF  634,864
0B390:  MOVLB  0
0B392:  CALL   1D7C
0B396:  BNC   B3DE
....................             { 
....................                delay_ms(30);Integral-=1.0;visual=1;      
0B398:  MOVLW  1E
0B39A:  MOVLB  8
0B39C:  MOVWF  x68
0B39E:  MOVLB  0
0B3A0:  CALL   1390
0B3A4:  BSF    FD8.1
0B3A6:  MOVFF  637,869
0B3AA:  MOVFF  636,868
0B3AE:  MOVFF  635,867
0B3B2:  MOVFF  634,866
0B3B6:  MOVLB  8
0B3B8:  CLRF   x6D
0B3BA:  CLRF   x6C
0B3BC:  CLRF   x6B
0B3BE:  MOVLW  7F
0B3C0:  MOVWF  x6A
0B3C2:  MOVLB  0
0B3C4:  CALL   2B0E
0B3C8:  MOVFF  03,637
0B3CC:  MOVFF  02,636
0B3D0:  MOVFF  01,635
0B3D4:  MOVFF  00,634
0B3D8:  MOVLB  5
0B3DA:  BSF    x87.7
0B3DC:  MOVLB  0
....................             } 
....................          } 
....................                 
....................          if(RIGHT)//Si oprime SET 
0B3DE:  BSF    F96.1
0B3E0:  BTFSC  F84.1
0B3E2:  BRA    B40A
....................          {   
....................             Buzz_on;delay_ms(10);Buzz_off; 
0B3E4:  BSF    F8B.4
0B3E6:  BCF    F94.4
0B3E8:  MOVLW  0A
0B3EA:  MOVLB  8
0B3EC:  MOVWF  x68
0B3EE:  MOVLB  0
0B3F0:  CALL   1390
0B3F4:  BCF    F8B.4
0B3F6:  BCF    F94.4
....................             delay_ms(30);visual=1; 
0B3F8:  MOVLW  1E
0B3FA:  MOVLB  8
0B3FC:  MOVWF  x68
0B3FE:  MOVLB  0
0B400:  CALL   1390
0B404:  MOVLB  5
0B406:  BSF    x87.7
0B408:  MOVLB  0
....................          }  
....................                    
....................          if(LEFT)//Si oprime boton de Toma. 
0B40A:  BSF    F96.2
0B40C:  BTFSC  F84.2
0B40E:  BRA    B49C
....................          { 
....................             Buzz_on;delay_ms(10);Buzz_off; 
0B410:  BSF    F8B.4
0B412:  BCF    F94.4
0B414:  MOVLW  0A
0B416:  MOVLB  8
0B418:  MOVWF  x68
0B41A:  MOVLB  0
0B41C:  CALL   1390
0B420:  BCF    F8B.4
0B422:  BCF    F94.4
....................             delay_ms(700);Menu=100;glcd_fillscreen(OFF);Opcion=1;visual=1; 
0B424:  MOVLW  04
0B426:  MOVLB  8
0B428:  MOVWF  x60
0B42A:  MOVLW  AF
0B42C:  MOVWF  x68
0B42E:  MOVLB  0
0B430:  CALL   1390
0B434:  MOVLB  8
0B436:  DECFSZ x60,F
0B438:  BRA    B42A
0B43A:  MOVLW  64
0B43C:  MOVLB  5
0B43E:  MOVWF  x9B
0B440:  MOVLB  8
0B442:  CLRF   x67
0B444:  MOVLB  0
0B446:  CALL   1410
0B44A:  MOVLW  01
0B44C:  MOVLB  5
0B44E:  MOVWF  xA2
0B450:  BSF    x87.7
....................             write_eeprom(470,(int8)Integral); 
0B452:  MOVFF  637,863
0B456:  MOVFF  636,862
0B45A:  MOVFF  635,861
0B45E:  MOVFF  634,860
0B462:  MOVLB  0
0B464:  CALL   546C
0B468:  MOVFF  01,860
0B46C:  MOVLW  01
0B46E:  MOVWF  FAA
0B470:  MOVLW  D6
0B472:  MOVWF  FA9
0B474:  MOVFF  860,FA8
0B478:  BCF    FA6.6
0B47A:  BCF    FA6.7
0B47C:  BSF    FA6.2
0B47E:  MOVF   FF2,W
0B480:  MOVWF  00
0B482:  BCF    FF2.7
0B484:  MOVLB  F
0B486:  MOVLW  55
0B488:  MOVWF  FA7
0B48A:  MOVLW  AA
0B48C:  MOVWF  FA7
0B48E:  BSF    FA6.1
0B490:  BTFSC  FA6.1
0B492:  BRA    B490
0B494:  BCF    FA6.2
0B496:  MOVF   00,W
0B498:  IORWF  FF2,F
0B49A:  MOVLB  0
0B49C:  MOVLB  5
....................          } 
....................      } 
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................       if(Menu==103){ // Menu de Ajuste de Derivativo 
0B49E:  MOVF   x9B,W
0B4A0:  SUBLW  67
0B4A2:  BTFSS  FD8.2
0B4A4:  BRA    B74E
....................        
....................       if(Derivativo>200) 
0B4A6:  MOVLB  8
0B4A8:  CLRF   x63
0B4AA:  CLRF   x62
0B4AC:  MOVLW  48
0B4AE:  MOVWF  x61
0B4B0:  MOVLW  86
0B4B2:  MOVWF  x60
0B4B4:  MOVFF  63B,867
0B4B8:  MOVFF  63A,866
0B4BC:  MOVFF  639,865
0B4C0:  MOVFF  638,864
0B4C4:  MOVLB  0
0B4C6:  CALL   1D7C
0B4CA:  BNC   B4D8
....................       { 
....................          Derivativo=2; 
0B4CC:  MOVLB  6
0B4CE:  CLRF   x3B
0B4D0:  CLRF   x3A
0B4D2:  CLRF   x39
0B4D4:  MOVLW  80
0B4D6:  MOVWF  x38
....................       } 
....................        
....................       if(visual==1) 
0B4D8:  MOVLB  5
0B4DA:  BTFSS  x87.7
0B4DC:  BRA    B564
....................       { 
....................          glcd_fillScreen(OFF); 
0B4DE:  MOVLB  8
0B4E0:  CLRF   x67
0B4E2:  MOVLB  0
0B4E4:  CALL   1410
....................          strcpy(Menus.Letra,"D"); 
0B4E8:  MOVLW  08
0B4EA:  MOVWF  FEA
0B4EC:  MOVLW  40
0B4EE:  MOVWF  FE9
0B4F0:  MOVFF  FF2,860
0B4F4:  BCF    FF2.7
0B4F6:  MOVLW  00
0B4F8:  CALL   1200
0B4FC:  TBLRD*-
0B4FE:  TBLRD*+
0B500:  MOVF   FF5,W
0B502:  MOVWF  FEE
0B504:  IORLW  00
0B506:  BNZ   B4FE
0B508:  MOVLB  8
0B50A:  BTFSC  x60.7
0B50C:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,0,1,2); 
0B50E:  MOVLW  08
0B510:  MOVWF  x68
0B512:  MOVLW  40
0B514:  MOVWF  x67
0B516:  CLRF   x69
0B518:  CLRF   x6A
0B51A:  MOVLW  01
0B51C:  MOVWF  x6B
0B51E:  MOVLW  02
0B520:  MOVWF  x6C
0B522:  MOVLB  0
0B524:  CALL   1A3E
....................           
....................          displayTemperatura(Derivativo,30,30,0,3); 
0B528:  MOVFF  63B,863
0B52C:  MOVFF  63A,862
0B530:  MOVFF  639,861
0B534:  MOVFF  638,860
0B538:  CALL   546C
0B53C:  MOVFF  02,861
0B540:  MOVFF  01,860
0B544:  MOVFF  02,866
0B548:  MOVFF  01,865
0B54C:  MOVLW  1E
0B54E:  MOVLB  8
0B550:  MOVWF  x67
0B552:  MOVWF  x68
0B554:  CLRF   x69
0B556:  MOVLW  03
0B558:  MOVWF  x6A
0B55A:  MOVLB  0
0B55C:  CALL   3C64
....................           
....................          visual=0; 
0B560:  MOVLB  5
0B562:  BCF    x87.7
....................       } 
....................        
....................          if(UP)//Si oprime hacia arriba 
0B564:  BSF    F92.5
0B566:  BTFSC  F80.5
0B568:  BRA    B60A
....................          {   
....................             Buzz_on;delay_ms(10);Buzz_off; 
0B56A:  BSF    F8B.4
0B56C:  BCF    F94.4
0B56E:  MOVLW  0A
0B570:  MOVLB  8
0B572:  MOVWF  x68
0B574:  MOVLB  0
0B576:  CALL   1390
0B57A:  BCF    F8B.4
0B57C:  BCF    F94.4
....................             if(Derivativo>200) 
0B57E:  MOVLB  8
0B580:  CLRF   x63
0B582:  CLRF   x62
0B584:  MOVLW  48
0B586:  MOVWF  x61
0B588:  MOVLW  86
0B58A:  MOVWF  x60
0B58C:  MOVFF  63B,867
0B590:  MOVFF  63A,866
0B594:  MOVFF  639,865
0B598:  MOVFF  638,864
0B59C:  MOVLB  0
0B59E:  CALL   1D7C
0B5A2:  BNC   B5C6
....................             { 
....................                Derivativo=200;delay_ms(100);visual=1; 
0B5A4:  MOVLB  6
0B5A6:  CLRF   x3B
0B5A8:  CLRF   x3A
0B5AA:  MOVLW  48
0B5AC:  MOVWF  x39
0B5AE:  MOVLW  86
0B5B0:  MOVWF  x38
0B5B2:  MOVLW  64
0B5B4:  MOVLB  8
0B5B6:  MOVWF  x68
0B5B8:  MOVLB  0
0B5BA:  CALL   1390
0B5BE:  MOVLB  5
0B5C0:  BSF    x87.7
....................             } 
....................             else 
0B5C2:  BRA    B60A
0B5C4:  MOVLB  0
....................             { 
....................                delay_ms(30);Derivativo+=1.0;visual=1; 
0B5C6:  MOVLW  1E
0B5C8:  MOVLB  8
0B5CA:  MOVWF  x68
0B5CC:  MOVLB  0
0B5CE:  CALL   1390
0B5D2:  BCF    FD8.1
0B5D4:  MOVFF  63B,869
0B5D8:  MOVFF  63A,868
0B5DC:  MOVFF  639,867
0B5E0:  MOVFF  638,866
0B5E4:  MOVLB  8
0B5E6:  CLRF   x6D
0B5E8:  CLRF   x6C
0B5EA:  CLRF   x6B
0B5EC:  MOVLW  7F
0B5EE:  MOVWF  x6A
0B5F0:  MOVLB  0
0B5F2:  CALL   2B0E
0B5F6:  MOVFF  03,63B
0B5FA:  MOVFF  02,63A
0B5FE:  MOVFF  01,639
0B602:  MOVFF  00,638
0B606:  MOVLB  5
0B608:  BSF    x87.7
....................             } 
....................          } 
....................                 
....................          if(DOWN)//Si oprime hacia abajo 
0B60A:  BSF    F96.0
0B60C:  BTFSC  F84.0
0B60E:  BRA    B68C
....................          {   
....................             Buzz_on;delay_ms(10);Buzz_off; 
0B610:  BSF    F8B.4
0B612:  BCF    F94.4
0B614:  MOVLW  0A
0B616:  MOVLB  8
0B618:  MOVWF  x68
0B61A:  MOVLB  0
0B61C:  CALL   1390
0B620:  BCF    F8B.4
0B622:  BCF    F94.4
....................             if(Derivativo>1) 
0B624:  MOVLB  8
0B626:  CLRF   x63
0B628:  CLRF   x62
0B62A:  CLRF   x61
0B62C:  MOVLW  7F
0B62E:  MOVWF  x60
0B630:  MOVFF  63B,867
0B634:  MOVFF  63A,866
0B638:  MOVFF  639,865
0B63C:  MOVFF  638,864
0B640:  MOVLB  0
0B642:  CALL   1D7C
0B646:  BNC   B68E
....................             { 
....................                delay_ms(30);Derivativo-=1.0;visual=1;      
0B648:  MOVLW  1E
0B64A:  MOVLB  8
0B64C:  MOVWF  x68
0B64E:  MOVLB  0
0B650:  CALL   1390
0B654:  BSF    FD8.1
0B656:  MOVFF  63B,869
0B65A:  MOVFF  63A,868
0B65E:  MOVFF  639,867
0B662:  MOVFF  638,866
0B666:  MOVLB  8
0B668:  CLRF   x6D
0B66A:  CLRF   x6C
0B66C:  CLRF   x6B
0B66E:  MOVLW  7F
0B670:  MOVWF  x6A
0B672:  MOVLB  0
0B674:  CALL   2B0E
0B678:  MOVFF  03,63B
0B67C:  MOVFF  02,63A
0B680:  MOVFF  01,639
0B684:  MOVFF  00,638
0B688:  MOVLB  5
0B68A:  BSF    x87.7
0B68C:  MOVLB  0
....................             } 
....................          } 
....................                 
....................          if(RIGHT)//Si oprime SET 
0B68E:  BSF    F96.1
0B690:  BTFSC  F84.1
0B692:  BRA    B6BA
....................          {   
....................             Buzz_on;delay_ms(10);Buzz_off; 
0B694:  BSF    F8B.4
0B696:  BCF    F94.4
0B698:  MOVLW  0A
0B69A:  MOVLB  8
0B69C:  MOVWF  x68
0B69E:  MOVLB  0
0B6A0:  CALL   1390
0B6A4:  BCF    F8B.4
0B6A6:  BCF    F94.4
....................             delay_ms(30);visual=1; 
0B6A8:  MOVLW  1E
0B6AA:  MOVLB  8
0B6AC:  MOVWF  x68
0B6AE:  MOVLB  0
0B6B0:  CALL   1390
0B6B4:  MOVLB  5
0B6B6:  BSF    x87.7
0B6B8:  MOVLB  0
....................          }  
....................                    
....................          if(LEFT)//Si oprime boton de Toma. 
0B6BA:  BSF    F96.2
0B6BC:  BTFSC  F84.2
0B6BE:  BRA    B74C
....................          { 
....................             Buzz_on;delay_ms(10);Buzz_off; 
0B6C0:  BSF    F8B.4
0B6C2:  BCF    F94.4
0B6C4:  MOVLW  0A
0B6C6:  MOVLB  8
0B6C8:  MOVWF  x68
0B6CA:  MOVLB  0
0B6CC:  CALL   1390
0B6D0:  BCF    F8B.4
0B6D2:  BCF    F94.4
....................             delay_ms(700);Menu=100;glcd_fillscreen(OFF);Opcion=1;visual=1; 
0B6D4:  MOVLW  04
0B6D6:  MOVLB  8
0B6D8:  MOVWF  x60
0B6DA:  MOVLW  AF
0B6DC:  MOVWF  x68
0B6DE:  MOVLB  0
0B6E0:  CALL   1390
0B6E4:  MOVLB  8
0B6E6:  DECFSZ x60,F
0B6E8:  BRA    B6DA
0B6EA:  MOVLW  64
0B6EC:  MOVLB  5
0B6EE:  MOVWF  x9B
0B6F0:  MOVLB  8
0B6F2:  CLRF   x67
0B6F4:  MOVLB  0
0B6F6:  CALL   1410
0B6FA:  MOVLW  01
0B6FC:  MOVLB  5
0B6FE:  MOVWF  xA2
0B700:  BSF    x87.7
....................             write_eeprom(471,(int8)Derivativo); 
0B702:  MOVFF  63B,863
0B706:  MOVFF  63A,862
0B70A:  MOVFF  639,861
0B70E:  MOVFF  638,860
0B712:  MOVLB  0
0B714:  CALL   546C
0B718:  MOVFF  01,860
0B71C:  MOVLW  01
0B71E:  MOVWF  FAA
0B720:  MOVLW  D7
0B722:  MOVWF  FA9
0B724:  MOVFF  860,FA8
0B728:  BCF    FA6.6
0B72A:  BCF    FA6.7
0B72C:  BSF    FA6.2
0B72E:  MOVF   FF2,W
0B730:  MOVWF  00
0B732:  BCF    FF2.7
0B734:  MOVLB  F
0B736:  MOVLW  55
0B738:  MOVWF  FA7
0B73A:  MOVLW  AA
0B73C:  MOVWF  FA7
0B73E:  BSF    FA6.1
0B740:  BTFSC  FA6.1
0B742:  BRA    B740
0B744:  BCF    FA6.2
0B746:  MOVF   00,W
0B748:  IORWF  FF2,F
0B74A:  MOVLB  0
0B74C:  MOVLB  5
....................          } 
....................      } 
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................  
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................       if(Menu==104){ // Menu de Ajuste de Ganancia2 
0B74E:  MOVF   x9B,W
0B750:  SUBLW  68
0B752:  BTFSS  FD8.2
0B754:  BRA    BA00
....................        
....................       if(Tciclo>40) 
0B756:  MOVLB  8
0B758:  CLRF   x63
0B75A:  CLRF   x62
0B75C:  MOVLW  20
0B75E:  MOVWF  x61
0B760:  MOVLW  84
0B762:  MOVWF  x60
0B764:  MOVFF  5F7,867
0B768:  MOVFF  5F6,866
0B76C:  MOVFF  5F5,865
0B770:  MOVFF  5F4,864
0B774:  MOVLB  0
0B776:  CALL   1D7C
0B77A:  BNC   B78A
....................       { 
....................          Tciclo=40; 
0B77C:  MOVLB  5
0B77E:  CLRF   xF7
0B780:  CLRF   xF6
0B782:  MOVLW  20
0B784:  MOVWF  xF5
0B786:  MOVLW  84
0B788:  MOVWF  xF4
....................       } 
....................        
....................       if(visual==1) 
0B78A:  MOVLB  5
0B78C:  BTFSS  x87.7
0B78E:  BRA    B816
....................       { 
....................          glcd_fillScreen(OFF); 
0B790:  MOVLB  8
0B792:  CLRF   x67
0B794:  MOVLB  0
0B796:  CALL   1410
....................          strcpy(Menus.Letra,"Tciclo"); 
0B79A:  MOVLW  08
0B79C:  MOVWF  FEA
0B79E:  MOVLW  40
0B7A0:  MOVWF  FE9
0B7A2:  MOVFF  FF2,860
0B7A6:  BCF    FF2.7
0B7A8:  MOVLW  00
0B7AA:  CALL   104E
0B7AE:  TBLRD*-
0B7B0:  TBLRD*+
0B7B2:  MOVF   FF5,W
0B7B4:  MOVWF  FEE
0B7B6:  IORLW  00
0B7B8:  BNZ   B7B0
0B7BA:  MOVLB  8
0B7BC:  BTFSC  x60.7
0B7BE:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,0,1,2); 
0B7C0:  MOVLW  08
0B7C2:  MOVWF  x68
0B7C4:  MOVLW  40
0B7C6:  MOVWF  x67
0B7C8:  CLRF   x69
0B7CA:  CLRF   x6A
0B7CC:  MOVLW  01
0B7CE:  MOVWF  x6B
0B7D0:  MOVLW  02
0B7D2:  MOVWF  x6C
0B7D4:  MOVLB  0
0B7D6:  CALL   1A3E
....................           
....................          displayTemperatura(Tciclo,30,30,0,3); 
0B7DA:  MOVFF  5F7,863
0B7DE:  MOVFF  5F6,862
0B7E2:  MOVFF  5F5,861
0B7E6:  MOVFF  5F4,860
0B7EA:  CALL   546C
0B7EE:  MOVFF  02,861
0B7F2:  MOVFF  01,860
0B7F6:  MOVFF  02,866
0B7FA:  MOVFF  01,865
0B7FE:  MOVLW  1E
0B800:  MOVLB  8
0B802:  MOVWF  x67
0B804:  MOVWF  x68
0B806:  CLRF   x69
0B808:  MOVLW  03
0B80A:  MOVWF  x6A
0B80C:  MOVLB  0
0B80E:  CALL   3C64
....................           
....................          visual=0; 
0B812:  MOVLB  5
0B814:  BCF    x87.7
....................       } 
....................        
....................          if(UP)//Si oprime hacia arriba 
0B816:  BSF    F92.5
0B818:  BTFSC  F80.5
0B81A:  BRA    B8BC
....................          {   
....................             Buzz_on;delay_ms(10);Buzz_off; 
0B81C:  BSF    F8B.4
0B81E:  BCF    F94.4
0B820:  MOVLW  0A
0B822:  MOVLB  8
0B824:  MOVWF  x68
0B826:  MOVLB  0
0B828:  CALL   1390
0B82C:  BCF    F8B.4
0B82E:  BCF    F94.4
....................             if(Tciclo>40) 
0B830:  MOVLB  8
0B832:  CLRF   x63
0B834:  CLRF   x62
0B836:  MOVLW  20
0B838:  MOVWF  x61
0B83A:  MOVLW  84
0B83C:  MOVWF  x60
0B83E:  MOVFF  5F7,867
0B842:  MOVFF  5F6,866
0B846:  MOVFF  5F5,865
0B84A:  MOVFF  5F4,864
0B84E:  MOVLB  0
0B850:  CALL   1D7C
0B854:  BNC   B878
....................             { 
....................                Tciclo=40;delay_ms(100);visual=1; 
0B856:  MOVLB  5
0B858:  CLRF   xF7
0B85A:  CLRF   xF6
0B85C:  MOVLW  20
0B85E:  MOVWF  xF5
0B860:  MOVLW  84
0B862:  MOVWF  xF4
0B864:  MOVLW  64
0B866:  MOVLB  8
0B868:  MOVWF  x68
0B86A:  MOVLB  0
0B86C:  CALL   1390
0B870:  MOVLB  5
0B872:  BSF    x87.7
....................             } 
....................             else 
0B874:  BRA    B8BC
0B876:  MOVLB  0
....................             { 
....................                delay_ms(30);Tciclo+=1.0;visual=1; 
0B878:  MOVLW  1E
0B87A:  MOVLB  8
0B87C:  MOVWF  x68
0B87E:  MOVLB  0
0B880:  CALL   1390
0B884:  BCF    FD8.1
0B886:  MOVFF  5F7,869
0B88A:  MOVFF  5F6,868
0B88E:  MOVFF  5F5,867
0B892:  MOVFF  5F4,866
0B896:  MOVLB  8
0B898:  CLRF   x6D
0B89A:  CLRF   x6C
0B89C:  CLRF   x6B
0B89E:  MOVLW  7F
0B8A0:  MOVWF  x6A
0B8A2:  MOVLB  0
0B8A4:  CALL   2B0E
0B8A8:  MOVFF  03,5F7
0B8AC:  MOVFF  02,5F6
0B8B0:  MOVFF  01,5F5
0B8B4:  MOVFF  00,5F4
0B8B8:  MOVLB  5
0B8BA:  BSF    x87.7
....................             } 
....................          } 
....................                 
....................          if(DOWN)//Si oprime hacia abajo 
0B8BC:  BSF    F96.0
0B8BE:  BTFSC  F84.0
0B8C0:  BRA    B93E
....................          {   
....................             Buzz_on;delay_ms(10);Buzz_off; 
0B8C2:  BSF    F8B.4
0B8C4:  BCF    F94.4
0B8C6:  MOVLW  0A
0B8C8:  MOVLB  8
0B8CA:  MOVWF  x68
0B8CC:  MOVLB  0
0B8CE:  CALL   1390
0B8D2:  BCF    F8B.4
0B8D4:  BCF    F94.4
....................             if(Tciclo>1) 
0B8D6:  MOVLB  8
0B8D8:  CLRF   x63
0B8DA:  CLRF   x62
0B8DC:  CLRF   x61
0B8DE:  MOVLW  7F
0B8E0:  MOVWF  x60
0B8E2:  MOVFF  5F7,867
0B8E6:  MOVFF  5F6,866
0B8EA:  MOVFF  5F5,865
0B8EE:  MOVFF  5F4,864
0B8F2:  MOVLB  0
0B8F4:  CALL   1D7C
0B8F8:  BNC   B940
....................             { 
....................                delay_ms(30);Tciclo-=1.0;visual=1;      
0B8FA:  MOVLW  1E
0B8FC:  MOVLB  8
0B8FE:  MOVWF  x68
0B900:  MOVLB  0
0B902:  CALL   1390
0B906:  BSF    FD8.1
0B908:  MOVFF  5F7,869
0B90C:  MOVFF  5F6,868
0B910:  MOVFF  5F5,867
0B914:  MOVFF  5F4,866
0B918:  MOVLB  8
0B91A:  CLRF   x6D
0B91C:  CLRF   x6C
0B91E:  CLRF   x6B
0B920:  MOVLW  7F
0B922:  MOVWF  x6A
0B924:  MOVLB  0
0B926:  CALL   2B0E
0B92A:  MOVFF  03,5F7
0B92E:  MOVFF  02,5F6
0B932:  MOVFF  01,5F5
0B936:  MOVFF  00,5F4
0B93A:  MOVLB  5
0B93C:  BSF    x87.7
0B93E:  MOVLB  0
....................             } 
....................          } 
....................                 
....................          if(RIGHT)//Si oprime SET 
0B940:  BSF    F96.1
0B942:  BTFSC  F84.1
0B944:  BRA    B96C
....................          {   
....................             Buzz_on;delay_ms(10);Buzz_off; 
0B946:  BSF    F8B.4
0B948:  BCF    F94.4
0B94A:  MOVLW  0A
0B94C:  MOVLB  8
0B94E:  MOVWF  x68
0B950:  MOVLB  0
0B952:  CALL   1390
0B956:  BCF    F8B.4
0B958:  BCF    F94.4
....................             delay_ms(30);visual=1; 
0B95A:  MOVLW  1E
0B95C:  MOVLB  8
0B95E:  MOVWF  x68
0B960:  MOVLB  0
0B962:  CALL   1390
0B966:  MOVLB  5
0B968:  BSF    x87.7
0B96A:  MOVLB  0
....................          }  
....................                    
....................          if(LEFT)//Si oprime boton de Toma. 
0B96C:  BSF    F96.2
0B96E:  BTFSC  F84.2
0B970:  BRA    B9FE
....................          { 
....................             Buzz_on;delay_ms(10);Buzz_off; 
0B972:  BSF    F8B.4
0B974:  BCF    F94.4
0B976:  MOVLW  0A
0B978:  MOVLB  8
0B97A:  MOVWF  x68
0B97C:  MOVLB  0
0B97E:  CALL   1390
0B982:  BCF    F8B.4
0B984:  BCF    F94.4
....................             delay_ms(700);Menu=100;glcd_fillscreen(OFF);Opcion=1;visual=1; 
0B986:  MOVLW  04
0B988:  MOVLB  8
0B98A:  MOVWF  x60
0B98C:  MOVLW  AF
0B98E:  MOVWF  x68
0B990:  MOVLB  0
0B992:  CALL   1390
0B996:  MOVLB  8
0B998:  DECFSZ x60,F
0B99A:  BRA    B98C
0B99C:  MOVLW  64
0B99E:  MOVLB  5
0B9A0:  MOVWF  x9B
0B9A2:  MOVLB  8
0B9A4:  CLRF   x67
0B9A6:  MOVLB  0
0B9A8:  CALL   1410
0B9AC:  MOVLW  01
0B9AE:  MOVLB  5
0B9B0:  MOVWF  xA2
0B9B2:  BSF    x87.7
....................             write_eeprom(451,(int8)Tciclo); 
0B9B4:  MOVFF  5F7,863
0B9B8:  MOVFF  5F6,862
0B9BC:  MOVFF  5F5,861
0B9C0:  MOVFF  5F4,860
0B9C4:  MOVLB  0
0B9C6:  CALL   546C
0B9CA:  MOVFF  01,860
0B9CE:  MOVLW  01
0B9D0:  MOVWF  FAA
0B9D2:  MOVLW  C3
0B9D4:  MOVWF  FA9
0B9D6:  MOVFF  860,FA8
0B9DA:  BCF    FA6.6
0B9DC:  BCF    FA6.7
0B9DE:  BSF    FA6.2
0B9E0:  MOVF   FF2,W
0B9E2:  MOVWF  00
0B9E4:  BCF    FF2.7
0B9E6:  MOVLB  F
0B9E8:  MOVLW  55
0B9EA:  MOVWF  FA7
0B9EC:  MOVLW  AA
0B9EE:  MOVWF  FA7
0B9F0:  BSF    FA6.1
0B9F2:  BTFSC  FA6.1
0B9F4:  BRA    B9F2
0B9F6:  BCF    FA6.2
0B9F8:  MOVF   00,W
0B9FA:  IORWF  FF2,F
0B9FC:  MOVLB  0
0B9FE:  MOVLB  5
....................          } 
....................      } 
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................       if(Menu==105){ // Menu de Ajuste de Ajuste 
0BA00:  MOVF   x9B,W
0BA02:  SUBLW  69
0BA04:  BTFSS  FD8.2
0BA06:  BRA    BC26
....................        
....................       if(Ajuste>100) 
0BA08:  MOVF   x8A,W
0BA0A:  SUBLW  64
0BA0C:  BC    BA10
....................       { 
....................          Ajuste=0; 
0BA0E:  CLRF   x8A
....................       } 
....................        
....................       if(visual==1) 
0BA10:  BTFSS  x87.7
0BA12:  BRA    BA7C
....................       { 
....................          glcd_fillScreen(OFF); 
0BA14:  MOVLB  8
0BA16:  CLRF   x67
0BA18:  MOVLB  0
0BA1A:  CALL   1410
....................          strcpy(Menus.Letra,"Ajuste"); 
0BA1E:  MOVLW  08
0BA20:  MOVWF  FEA
0BA22:  MOVLW  40
0BA24:  MOVWF  FE9
0BA26:  MOVFF  FF2,860
0BA2A:  BCF    FF2.7
0BA2C:  MOVLW  00
0BA2E:  CALL   1220
0BA32:  TBLRD*-
0BA34:  TBLRD*+
0BA36:  MOVF   FF5,W
0BA38:  MOVWF  FEE
0BA3A:  IORLW  00
0BA3C:  BNZ   BA34
0BA3E:  MOVLB  8
0BA40:  BTFSC  x60.7
0BA42:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,0,1,2); 
0BA44:  MOVLW  08
0BA46:  MOVWF  x68
0BA48:  MOVLW  40
0BA4A:  MOVWF  x67
0BA4C:  CLRF   x69
0BA4E:  CLRF   x6A
0BA50:  MOVLW  01
0BA52:  MOVWF  x6B
0BA54:  MOVLW  02
0BA56:  MOVWF  x6C
0BA58:  MOVLB  0
0BA5A:  CALL   1A3E
....................           
....................          displayTemperatura(Ajuste,30,30,0,3); 
0BA5E:  MOVLB  8
0BA60:  CLRF   x66
0BA62:  MOVFF  58A,865
0BA66:  MOVLW  1E
0BA68:  MOVWF  x67
0BA6A:  MOVWF  x68
0BA6C:  CLRF   x69
0BA6E:  MOVLW  03
0BA70:  MOVWF  x6A
0BA72:  MOVLB  0
0BA74:  CALL   3C64
....................           
....................          visual=0; 
0BA78:  MOVLB  5
0BA7A:  BCF    x87.7
....................       } 
....................        
....................          if(UP)//Si oprime hacia arriba 
0BA7C:  BSF    F92.5
0BA7E:  BTFSC  F80.5
0BA80:  BRA    BB0C
....................          {   
....................             Buzz_on;delay_ms(10);Buzz_off; 
0BA82:  BSF    F8B.4
0BA84:  BCF    F94.4
0BA86:  MOVLW  0A
0BA88:  MOVLB  8
0BA8A:  MOVWF  x68
0BA8C:  MOVLB  0
0BA8E:  CALL   1390
0BA92:  BCF    F8B.4
0BA94:  BCF    F94.4
....................             if(Ajuste>100) 
0BA96:  MOVLB  5
0BA98:  MOVF   x8A,W
0BA9A:  SUBLW  64
0BA9C:  BC    BAB2
....................             { 
....................                Ajuste=100;delay_ms(100);visual=1; 
0BA9E:  MOVLW  64
0BAA0:  MOVWF  x8A
0BAA2:  MOVLB  8
0BAA4:  MOVWF  x68
0BAA6:  MOVLB  0
0BAA8:  CALL   1390
0BAAC:  MOVLB  5
0BAAE:  BSF    x87.7
....................             } 
....................             else 
0BAB0:  BRA    BB0C
....................             { 
....................                delay_ms(30);Ajuste+=1.0;visual=1; 
0BAB2:  MOVLW  1E
0BAB4:  MOVLB  8
0BAB6:  MOVWF  x68
0BAB8:  MOVLB  0
0BABA:  CALL   1390
0BABE:  MOVLB  8
0BAC0:  CLRF   x67
0BAC2:  MOVFF  58A,866
0BAC6:  MOVLB  0
0BAC8:  CALL   1D46
0BACC:  BCF    FD8.1
0BACE:  MOVFF  03,869
0BAD2:  MOVFF  02,868
0BAD6:  MOVFF  01,867
0BADA:  MOVFF  00,866
0BADE:  MOVLB  8
0BAE0:  CLRF   x6D
0BAE2:  CLRF   x6C
0BAE4:  CLRF   x6B
0BAE6:  MOVLW  7F
0BAE8:  MOVWF  x6A
0BAEA:  MOVLB  0
0BAEC:  CALL   2B0E
0BAF0:  MOVFF  03,863
0BAF4:  MOVFF  02,862
0BAF8:  MOVFF  01,861
0BAFC:  MOVFF  00,860
0BB00:  CALL   546C
0BB04:  MOVFF  01,58A
0BB08:  MOVLB  5
0BB0A:  BSF    x87.7
....................             } 
....................          } 
....................                 
....................          if(DOWN)//Si oprime hacia abajo 
0BB0C:  BSF    F96.0
0BB0E:  BTFSC  F84.0
0BB10:  BRA    BB86
....................          {   
....................             Buzz_on;delay_ms(10);Buzz_off; 
0BB12:  BSF    F8B.4
0BB14:  BCF    F94.4
0BB16:  MOVLW  0A
0BB18:  MOVLB  8
0BB1A:  MOVWF  x68
0BB1C:  MOVLB  0
0BB1E:  CALL   1390
0BB22:  BCF    F8B.4
0BB24:  BCF    F94.4
....................             if(Ajuste>0) 
0BB26:  MOVLB  5
0BB28:  MOVF   x8A,F
0BB2A:  BZ    BB86
....................             { 
....................                delay_ms(30);Ajuste-=1.0;visual=1;      
0BB2C:  MOVLW  1E
0BB2E:  MOVLB  8
0BB30:  MOVWF  x68
0BB32:  MOVLB  0
0BB34:  CALL   1390
0BB38:  MOVLB  8
0BB3A:  CLRF   x67
0BB3C:  MOVFF  58A,866
0BB40:  MOVLB  0
0BB42:  CALL   1D46
0BB46:  BSF    FD8.1
0BB48:  MOVFF  03,869
0BB4C:  MOVFF  02,868
0BB50:  MOVFF  01,867
0BB54:  MOVFF  00,866
0BB58:  MOVLB  8
0BB5A:  CLRF   x6D
0BB5C:  CLRF   x6C
0BB5E:  CLRF   x6B
0BB60:  MOVLW  7F
0BB62:  MOVWF  x6A
0BB64:  MOVLB  0
0BB66:  CALL   2B0E
0BB6A:  MOVFF  03,863
0BB6E:  MOVFF  02,862
0BB72:  MOVFF  01,861
0BB76:  MOVFF  00,860
0BB7A:  CALL   546C
0BB7E:  MOVFF  01,58A
0BB82:  MOVLB  5
0BB84:  BSF    x87.7
....................             } 
....................          } 
....................                 
....................          if(RIGHT)//Si oprime SET 
0BB86:  BSF    F96.1
0BB88:  BTFSC  F84.1
0BB8A:  BRA    BBB0
....................          {   
....................             Buzz_on;delay_ms(10);Buzz_off; 
0BB8C:  BSF    F8B.4
0BB8E:  BCF    F94.4
0BB90:  MOVLW  0A
0BB92:  MOVLB  8
0BB94:  MOVWF  x68
0BB96:  MOVLB  0
0BB98:  CALL   1390
0BB9C:  BCF    F8B.4
0BB9E:  BCF    F94.4
....................             delay_ms(30);visual=1; 
0BBA0:  MOVLW  1E
0BBA2:  MOVLB  8
0BBA4:  MOVWF  x68
0BBA6:  MOVLB  0
0BBA8:  CALL   1390
0BBAC:  MOVLB  5
0BBAE:  BSF    x87.7
....................          }  
....................                    
....................          if(LEFT)//Si oprime boton de Toma. 
0BBB0:  BSF    F96.2
0BBB2:  BTFSC  F84.2
0BBB4:  BRA    BC26
....................          { 
....................             Buzz_on;delay_ms(10);Buzz_off; 
0BBB6:  BSF    F8B.4
0BBB8:  BCF    F94.4
0BBBA:  MOVLW  0A
0BBBC:  MOVLB  8
0BBBE:  MOVWF  x68
0BBC0:  MOVLB  0
0BBC2:  CALL   1390
0BBC6:  BCF    F8B.4
0BBC8:  BCF    F94.4
....................             delay_ms(700);Menu=100;glcd_fillscreen(OFF);Opcion=1;visual=1; 
0BBCA:  MOVLW  04
0BBCC:  MOVLB  8
0BBCE:  MOVWF  x60
0BBD0:  MOVLW  AF
0BBD2:  MOVWF  x68
0BBD4:  MOVLB  0
0BBD6:  CALL   1390
0BBDA:  MOVLB  8
0BBDC:  DECFSZ x60,F
0BBDE:  BRA    BBD0
0BBE0:  MOVLW  64
0BBE2:  MOVLB  5
0BBE4:  MOVWF  x9B
0BBE6:  MOVLB  8
0BBE8:  CLRF   x67
0BBEA:  MOVLB  0
0BBEC:  CALL   1410
0BBF0:  MOVLW  01
0BBF2:  MOVLB  5
0BBF4:  MOVWF  xA2
0BBF6:  BSF    x87.7
....................             write_eeprom(452,Ajuste); 
0BBF8:  MOVWF  FAA
0BBFA:  MOVLW  C4
0BBFC:  MOVWF  FA9
0BBFE:  MOVFF  58A,FA8
0BC02:  BCF    FA6.6
0BC04:  BCF    FA6.7
0BC06:  BSF    FA6.2
0BC08:  MOVF   FF2,W
0BC0A:  MOVWF  00
0BC0C:  BCF    FF2.7
0BC0E:  MOVLB  F
0BC10:  MOVLW  55
0BC12:  MOVWF  FA7
0BC14:  MOVLW  AA
0BC16:  MOVWF  FA7
0BC18:  BSF    FA6.1
0BC1A:  BTFSC  FA6.1
0BC1C:  BRA    BC1A
0BC1E:  BCF    FA6.2
0BC20:  MOVF   00,W
0BC22:  IORWF  FF2,F
0BC24:  MOVLB  5
....................          } 
....................      } 
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................       if(Menu==106){ // Menu de Ajuste de Ajusten 
0BC26:  MOVF   x9B,W
0BC28:  SUBLW  6A
0BC2A:  BTFSS  FD8.2
0BC2C:  BRA    BE4C
....................        
....................       if(Ajusten>100) 
0BC2E:  MOVF   x8B,W
0BC30:  SUBLW  64
0BC32:  BC    BC36
....................       { 
....................          Ajusten=0; 
0BC34:  CLRF   x8B
....................       } 
....................        
....................       if(visual==1) 
0BC36:  BTFSS  x87.7
0BC38:  BRA    BCA2
....................       { 
....................          glcd_fillScreen(OFF); 
0BC3A:  MOVLB  8
0BC3C:  CLRF   x67
0BC3E:  MOVLB  0
0BC40:  CALL   1410
....................          strcpy(Menus.Letra,"Ajusten"); 
0BC44:  MOVLW  08
0BC46:  MOVWF  FEA
0BC48:  MOVLW  40
0BC4A:  MOVWF  FE9
0BC4C:  MOVFF  FF2,860
0BC50:  BCF    FF2.7
0BC52:  MOVLW  00
0BC54:  CALL   1246
0BC58:  TBLRD*-
0BC5A:  TBLRD*+
0BC5C:  MOVF   FF5,W
0BC5E:  MOVWF  FEE
0BC60:  IORLW  00
0BC62:  BNZ   BC5A
0BC64:  MOVLB  8
0BC66:  BTFSC  x60.7
0BC68:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,0,1,2); 
0BC6A:  MOVLW  08
0BC6C:  MOVWF  x68
0BC6E:  MOVLW  40
0BC70:  MOVWF  x67
0BC72:  CLRF   x69
0BC74:  CLRF   x6A
0BC76:  MOVLW  01
0BC78:  MOVWF  x6B
0BC7A:  MOVLW  02
0BC7C:  MOVWF  x6C
0BC7E:  MOVLB  0
0BC80:  CALL   1A3E
....................           
....................          displayTemperatura(Ajusten,30,30,0,3); 
0BC84:  MOVLB  8
0BC86:  CLRF   x66
0BC88:  MOVFF  58B,865
0BC8C:  MOVLW  1E
0BC8E:  MOVWF  x67
0BC90:  MOVWF  x68
0BC92:  CLRF   x69
0BC94:  MOVLW  03
0BC96:  MOVWF  x6A
0BC98:  MOVLB  0
0BC9A:  CALL   3C64
....................           
....................          visual=0; 
0BC9E:  MOVLB  5
0BCA0:  BCF    x87.7
....................       } 
....................        
....................          if(UP)//Si oprime hacia arriba 
0BCA2:  BSF    F92.5
0BCA4:  BTFSC  F80.5
0BCA6:  BRA    BD32
....................          {   
....................             Buzz_on;delay_ms(10);Buzz_off; 
0BCA8:  BSF    F8B.4
0BCAA:  BCF    F94.4
0BCAC:  MOVLW  0A
0BCAE:  MOVLB  8
0BCB0:  MOVWF  x68
0BCB2:  MOVLB  0
0BCB4:  CALL   1390
0BCB8:  BCF    F8B.4
0BCBA:  BCF    F94.4
....................             if(Ajusten>100) 
0BCBC:  MOVLB  5
0BCBE:  MOVF   x8B,W
0BCC0:  SUBLW  64
0BCC2:  BC    BCD8
....................             { 
....................                Ajusten=100;delay_ms(100);visual=1; 
0BCC4:  MOVLW  64
0BCC6:  MOVWF  x8B
0BCC8:  MOVLB  8
0BCCA:  MOVWF  x68
0BCCC:  MOVLB  0
0BCCE:  CALL   1390
0BCD2:  MOVLB  5
0BCD4:  BSF    x87.7
....................             } 
....................             else 
0BCD6:  BRA    BD32
....................             { 
....................                delay_ms(30);Ajusten+=1.0;visual=1; 
0BCD8:  MOVLW  1E
0BCDA:  MOVLB  8
0BCDC:  MOVWF  x68
0BCDE:  MOVLB  0
0BCE0:  CALL   1390
0BCE4:  MOVLB  8
0BCE6:  CLRF   x67
0BCE8:  MOVFF  58B,866
0BCEC:  MOVLB  0
0BCEE:  CALL   1D46
0BCF2:  BCF    FD8.1
0BCF4:  MOVFF  03,869
0BCF8:  MOVFF  02,868
0BCFC:  MOVFF  01,867
0BD00:  MOVFF  00,866
0BD04:  MOVLB  8
0BD06:  CLRF   x6D
0BD08:  CLRF   x6C
0BD0A:  CLRF   x6B
0BD0C:  MOVLW  7F
0BD0E:  MOVWF  x6A
0BD10:  MOVLB  0
0BD12:  CALL   2B0E
0BD16:  MOVFF  03,863
0BD1A:  MOVFF  02,862
0BD1E:  MOVFF  01,861
0BD22:  MOVFF  00,860
0BD26:  CALL   546C
0BD2A:  MOVFF  01,58B
0BD2E:  MOVLB  5
0BD30:  BSF    x87.7
....................             } 
....................          } 
....................                 
....................          if(DOWN)//Si oprime hacia abajo 
0BD32:  BSF    F96.0
0BD34:  BTFSC  F84.0
0BD36:  BRA    BDAC
....................          {   
....................             Buzz_on;delay_ms(10);Buzz_off; 
0BD38:  BSF    F8B.4
0BD3A:  BCF    F94.4
0BD3C:  MOVLW  0A
0BD3E:  MOVLB  8
0BD40:  MOVWF  x68
0BD42:  MOVLB  0
0BD44:  CALL   1390
0BD48:  BCF    F8B.4
0BD4A:  BCF    F94.4
....................             if(Ajusten>0) 
0BD4C:  MOVLB  5
0BD4E:  MOVF   x8B,F
0BD50:  BZ    BDAC
....................             { 
....................                delay_ms(30);Ajusten-=1.0;visual=1;      
0BD52:  MOVLW  1E
0BD54:  MOVLB  8
0BD56:  MOVWF  x68
0BD58:  MOVLB  0
0BD5A:  CALL   1390
0BD5E:  MOVLB  8
0BD60:  CLRF   x67
0BD62:  MOVFF  58B,866
0BD66:  MOVLB  0
0BD68:  CALL   1D46
0BD6C:  BSF    FD8.1
0BD6E:  MOVFF  03,869
0BD72:  MOVFF  02,868
0BD76:  MOVFF  01,867
0BD7A:  MOVFF  00,866
0BD7E:  MOVLB  8
0BD80:  CLRF   x6D
0BD82:  CLRF   x6C
0BD84:  CLRF   x6B
0BD86:  MOVLW  7F
0BD88:  MOVWF  x6A
0BD8A:  MOVLB  0
0BD8C:  CALL   2B0E
0BD90:  MOVFF  03,863
0BD94:  MOVFF  02,862
0BD98:  MOVFF  01,861
0BD9C:  MOVFF  00,860
0BDA0:  CALL   546C
0BDA4:  MOVFF  01,58B
0BDA8:  MOVLB  5
0BDAA:  BSF    x87.7
....................             } 
....................          } 
....................                 
....................          if(RIGHT)//Si oprime SET 
0BDAC:  BSF    F96.1
0BDAE:  BTFSC  F84.1
0BDB0:  BRA    BDD6
....................          {   
....................             Buzz_on;delay_ms(10);Buzz_off; 
0BDB2:  BSF    F8B.4
0BDB4:  BCF    F94.4
0BDB6:  MOVLW  0A
0BDB8:  MOVLB  8
0BDBA:  MOVWF  x68
0BDBC:  MOVLB  0
0BDBE:  CALL   1390
0BDC2:  BCF    F8B.4
0BDC4:  BCF    F94.4
....................             delay_ms(30);visual=1; 
0BDC6:  MOVLW  1E
0BDC8:  MOVLB  8
0BDCA:  MOVWF  x68
0BDCC:  MOVLB  0
0BDCE:  CALL   1390
0BDD2:  MOVLB  5
0BDD4:  BSF    x87.7
....................          }  
....................                    
....................          if(LEFT)//Si oprime boton de Toma. 
0BDD6:  BSF    F96.2
0BDD8:  BTFSC  F84.2
0BDDA:  BRA    BE4C
....................          { 
....................             Buzz_on;delay_ms(10);Buzz_off; 
0BDDC:  BSF    F8B.4
0BDDE:  BCF    F94.4
0BDE0:  MOVLW  0A
0BDE2:  MOVLB  8
0BDE4:  MOVWF  x68
0BDE6:  MOVLB  0
0BDE8:  CALL   1390
0BDEC:  BCF    F8B.4
0BDEE:  BCF    F94.4
....................             delay_ms(700);Menu=100;glcd_fillscreen(OFF);Opcion=1;visual=1; 
0BDF0:  MOVLW  04
0BDF2:  MOVLB  8
0BDF4:  MOVWF  x60
0BDF6:  MOVLW  AF
0BDF8:  MOVWF  x68
0BDFA:  MOVLB  0
0BDFC:  CALL   1390
0BE00:  MOVLB  8
0BE02:  DECFSZ x60,F
0BE04:  BRA    BDF6
0BE06:  MOVLW  64
0BE08:  MOVLB  5
0BE0A:  MOVWF  x9B
0BE0C:  MOVLB  8
0BE0E:  CLRF   x67
0BE10:  MOVLB  0
0BE12:  CALL   1410
0BE16:  MOVLW  01
0BE18:  MOVLB  5
0BE1A:  MOVWF  xA2
0BE1C:  BSF    x87.7
....................             write_eeprom(453,Ajusten); 
0BE1E:  MOVWF  FAA
0BE20:  MOVLW  C5
0BE22:  MOVWF  FA9
0BE24:  MOVFF  58B,FA8
0BE28:  BCF    FA6.6
0BE2A:  BCF    FA6.7
0BE2C:  BSF    FA6.2
0BE2E:  MOVF   FF2,W
0BE30:  MOVWF  00
0BE32:  BCF    FF2.7
0BE34:  MOVLB  F
0BE36:  MOVLW  55
0BE38:  MOVWF  FA7
0BE3A:  MOVLW  AA
0BE3C:  MOVWF  FA7
0BE3E:  BSF    FA6.1
0BE40:  BTFSC  FA6.1
0BE42:  BRA    BE40
0BE44:  BCF    FA6.2
0BE46:  MOVF   00,W
0BE48:  IORWF  FF2,F
0BE4A:  MOVLB  5
....................          } 
....................      } 
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................       if(Menu==107){ // Menu de Ajuste de Media Movil 
0BE4C:  MOVF   x9B,W
0BE4E:  SUBLW  6B
0BE50:  BTFSS  FD8.2
0BE52:  BRA    C078
....................        
....................       if(MediaMovil>80) 
0BE54:  MOVF   x8C,W
0BE56:  SUBLW  50
0BE58:  BC    BE5E
....................       { 
....................          MediaMovil=10; 
0BE5A:  MOVLW  0A
0BE5C:  MOVWF  x8C
....................       } 
....................        
....................       if(visual==1) 
0BE5E:  BTFSS  x87.7
0BE60:  BRA    BECA
....................       { 
....................          glcd_fillScreen(OFF); 
0BE62:  MOVLB  8
0BE64:  CLRF   x67
0BE66:  MOVLB  0
0BE68:  CALL   1410
....................          strcpy(Menus.Letra,"Media"); 
0BE6C:  MOVLW  08
0BE6E:  MOVWF  FEA
0BE70:  MOVLW  40
0BE72:  MOVWF  FE9
0BE74:  MOVFF  FF2,860
0BE78:  BCF    FF2.7
0BE7A:  MOVLW  00
0BE7C:  CALL   126C
0BE80:  TBLRD*-
0BE82:  TBLRD*+
0BE84:  MOVF   FF5,W
0BE86:  MOVWF  FEE
0BE88:  IORLW  00
0BE8A:  BNZ   BE82
0BE8C:  MOVLB  8
0BE8E:  BTFSC  x60.7
0BE90:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,0,1,2); 
0BE92:  MOVLW  08
0BE94:  MOVWF  x68
0BE96:  MOVLW  40
0BE98:  MOVWF  x67
0BE9A:  CLRF   x69
0BE9C:  CLRF   x6A
0BE9E:  MOVLW  01
0BEA0:  MOVWF  x6B
0BEA2:  MOVLW  02
0BEA4:  MOVWF  x6C
0BEA6:  MOVLB  0
0BEA8:  CALL   1A3E
....................           
....................          displayTemperatura(MediaMovil,30,30,0,3); 
0BEAC:  MOVLB  8
0BEAE:  CLRF   x66
0BEB0:  MOVFF  58C,865
0BEB4:  MOVLW  1E
0BEB6:  MOVWF  x67
0BEB8:  MOVWF  x68
0BEBA:  CLRF   x69
0BEBC:  MOVLW  03
0BEBE:  MOVWF  x6A
0BEC0:  MOVLB  0
0BEC2:  CALL   3C64
....................           
....................          visual=0; 
0BEC6:  MOVLB  5
0BEC8:  BCF    x87.7
....................       } 
....................        
....................          if(UP)//Si oprime hacia arriba 
0BECA:  BSF    F92.5
0BECC:  BTFSC  F80.5
0BECE:  BRA    BF5C
....................          {   
....................             Buzz_on;delay_ms(10);Buzz_off; 
0BED0:  BSF    F8B.4
0BED2:  BCF    F94.4
0BED4:  MOVLW  0A
0BED6:  MOVLB  8
0BED8:  MOVWF  x68
0BEDA:  MOVLB  0
0BEDC:  CALL   1390
0BEE0:  BCF    F8B.4
0BEE2:  BCF    F94.4
....................             if(MediaMovil>79) 
0BEE4:  MOVLB  5
0BEE6:  MOVF   x8C,W
0BEE8:  SUBLW  4F
0BEEA:  BC    BF02
....................             { 
....................                MediaMovil=79;delay_ms(100);visual=1; 
0BEEC:  MOVLW  4F
0BEEE:  MOVWF  x8C
0BEF0:  MOVLW  64
0BEF2:  MOVLB  8
0BEF4:  MOVWF  x68
0BEF6:  MOVLB  0
0BEF8:  CALL   1390
0BEFC:  MOVLB  5
0BEFE:  BSF    x87.7
....................             } 
....................             else 
0BF00:  BRA    BF5C
....................             { 
....................                delay_ms(30);MediaMovil+=1.0;visual=1; 
0BF02:  MOVLW  1E
0BF04:  MOVLB  8
0BF06:  MOVWF  x68
0BF08:  MOVLB  0
0BF0A:  CALL   1390
0BF0E:  MOVLB  8
0BF10:  CLRF   x67
0BF12:  MOVFF  58C,866
0BF16:  MOVLB  0
0BF18:  CALL   1D46
0BF1C:  BCF    FD8.1
0BF1E:  MOVFF  03,869
0BF22:  MOVFF  02,868
0BF26:  MOVFF  01,867
0BF2A:  MOVFF  00,866
0BF2E:  MOVLB  8
0BF30:  CLRF   x6D
0BF32:  CLRF   x6C
0BF34:  CLRF   x6B
0BF36:  MOVLW  7F
0BF38:  MOVWF  x6A
0BF3A:  MOVLB  0
0BF3C:  CALL   2B0E
0BF40:  MOVFF  03,863
0BF44:  MOVFF  02,862
0BF48:  MOVFF  01,861
0BF4C:  MOVFF  00,860
0BF50:  CALL   546C
0BF54:  MOVFF  01,58C
0BF58:  MOVLB  5
0BF5A:  BSF    x87.7
....................             } 
....................          } 
....................                 
....................          if(DOWN)//Si oprime hacia abajo 
0BF5C:  BSF    F96.0
0BF5E:  BTFSC  F84.0
0BF60:  BRA    BFD8
....................          {   
....................             Buzz_on;delay_ms(10);Buzz_off; 
0BF62:  BSF    F8B.4
0BF64:  BCF    F94.4
0BF66:  MOVLW  0A
0BF68:  MOVLB  8
0BF6A:  MOVWF  x68
0BF6C:  MOVLB  0
0BF6E:  CALL   1390
0BF72:  BCF    F8B.4
0BF74:  BCF    F94.4
....................             if(MediaMovil>1) 
0BF76:  MOVLB  5
0BF78:  MOVF   x8C,W
0BF7A:  SUBLW  01
0BF7C:  BC    BFD8
....................             { 
....................                delay_ms(30);MediaMovil-=1.0;visual=1;      
0BF7E:  MOVLW  1E
0BF80:  MOVLB  8
0BF82:  MOVWF  x68
0BF84:  MOVLB  0
0BF86:  CALL   1390
0BF8A:  MOVLB  8
0BF8C:  CLRF   x67
0BF8E:  MOVFF  58C,866
0BF92:  MOVLB  0
0BF94:  CALL   1D46
0BF98:  BSF    FD8.1
0BF9A:  MOVFF  03,869
0BF9E:  MOVFF  02,868
0BFA2:  MOVFF  01,867
0BFA6:  MOVFF  00,866
0BFAA:  MOVLB  8
0BFAC:  CLRF   x6D
0BFAE:  CLRF   x6C
0BFB0:  CLRF   x6B
0BFB2:  MOVLW  7F
0BFB4:  MOVWF  x6A
0BFB6:  MOVLB  0
0BFB8:  CALL   2B0E
0BFBC:  MOVFF  03,863
0BFC0:  MOVFF  02,862
0BFC4:  MOVFF  01,861
0BFC8:  MOVFF  00,860
0BFCC:  CALL   546C
0BFD0:  MOVFF  01,58C
0BFD4:  MOVLB  5
0BFD6:  BSF    x87.7
....................             } 
....................          } 
....................                 
....................          if(RIGHT)//Si oprime SET 
0BFD8:  BSF    F96.1
0BFDA:  BTFSC  F84.1
0BFDC:  BRA    C002
....................          {   
....................             Buzz_on;delay_ms(10);Buzz_off; 
0BFDE:  BSF    F8B.4
0BFE0:  BCF    F94.4
0BFE2:  MOVLW  0A
0BFE4:  MOVLB  8
0BFE6:  MOVWF  x68
0BFE8:  MOVLB  0
0BFEA:  CALL   1390
0BFEE:  BCF    F8B.4
0BFF0:  BCF    F94.4
....................             delay_ms(30);visual=1; 
0BFF2:  MOVLW  1E
0BFF4:  MOVLB  8
0BFF6:  MOVWF  x68
0BFF8:  MOVLB  0
0BFFA:  CALL   1390
0BFFE:  MOVLB  5
0C000:  BSF    x87.7
....................          }  
....................                    
....................          if(LEFT)//Si oprime boton de Toma. 
0C002:  BSF    F96.2
0C004:  BTFSC  F84.2
0C006:  BRA    C078
....................          { 
....................             Buzz_on;delay_ms(10);Buzz_off; 
0C008:  BSF    F8B.4
0C00A:  BCF    F94.4
0C00C:  MOVLW  0A
0C00E:  MOVLB  8
0C010:  MOVWF  x68
0C012:  MOVLB  0
0C014:  CALL   1390
0C018:  BCF    F8B.4
0C01A:  BCF    F94.4
....................             delay_ms(700);Menu=100;glcd_fillscreen(OFF);Opcion=1;visual=1; 
0C01C:  MOVLW  04
0C01E:  MOVLB  8
0C020:  MOVWF  x60
0C022:  MOVLW  AF
0C024:  MOVWF  x68
0C026:  MOVLB  0
0C028:  CALL   1390
0C02C:  MOVLB  8
0C02E:  DECFSZ x60,F
0C030:  BRA    C022
0C032:  MOVLW  64
0C034:  MOVLB  5
0C036:  MOVWF  x9B
0C038:  MOVLB  8
0C03A:  CLRF   x67
0C03C:  MOVLB  0
0C03E:  CALL   1410
0C042:  MOVLW  01
0C044:  MOVLB  5
0C046:  MOVWF  xA2
0C048:  BSF    x87.7
....................             write_eeprom(454,(int8)MediaMovil); 
0C04A:  MOVWF  FAA
0C04C:  MOVLW  C6
0C04E:  MOVWF  FA9
0C050:  MOVFF  58C,FA8
0C054:  BCF    FA6.6
0C056:  BCF    FA6.7
0C058:  BSF    FA6.2
0C05A:  MOVF   FF2,W
0C05C:  MOVWF  00
0C05E:  BCF    FF2.7
0C060:  MOVLB  F
0C062:  MOVLW  55
0C064:  MOVWF  FA7
0C066:  MOVLW  AA
0C068:  MOVWF  FA7
0C06A:  BSF    FA6.1
0C06C:  BTFSC  FA6.1
0C06E:  BRA    C06C
0C070:  BCF    FA6.2
0C072:  MOVF   00,W
0C074:  IORWF  FF2,F
0C076:  MOVLB  5
....................          } 
....................      } 
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................       if(Menu==108){ // Menu de Ajuste de Coeficiente Regulador 
0C078:  MOVF   x9B,W
0C07A:  SUBLW  6C
0C07C:  BTFSS  FD8.2
0C07E:  BRA    C32A
....................        
....................       if(Coeficiente>250) 
0C080:  MOVLB  8
0C082:  CLRF   x63
0C084:  CLRF   x62
0C086:  MOVLW  7A
0C088:  MOVWF  x61
0C08A:  MOVLW  86
0C08C:  MOVWF  x60
0C08E:  MOVFF  61B,867
0C092:  MOVFF  61A,866
0C096:  MOVFF  619,865
0C09A:  MOVFF  618,864
0C09E:  MOVLB  0
0C0A0:  CALL   1D7C
0C0A4:  BNC   C0B4
....................       { 
....................          Coeficiente=100; 
0C0A6:  MOVLB  6
0C0A8:  CLRF   x1B
0C0AA:  CLRF   x1A
0C0AC:  MOVLW  48
0C0AE:  MOVWF  x19
0C0B0:  MOVLW  85
0C0B2:  MOVWF  x18
....................       } 
....................        
....................       if(visual==1) 
0C0B4:  MOVLB  5
0C0B6:  BTFSS  x87.7
0C0B8:  BRA    C140
....................       { 
....................          glcd_fillScreen(OFF); 
0C0BA:  MOVLB  8
0C0BC:  CLRF   x67
0C0BE:  MOVLB  0
0C0C0:  CALL   1410
....................          strcpy(Menus.Letra,"Coeficiente"); 
0C0C4:  MOVLW  08
0C0C6:  MOVWF  FEA
0C0C8:  MOVLW  40
0C0CA:  MOVWF  FE9
0C0CC:  MOVFF  FF2,860
0C0D0:  BCF    FF2.7
0C0D2:  MOVLW  00
0C0D4:  CALL   10EE
0C0D8:  TBLRD*-
0C0DA:  TBLRD*+
0C0DC:  MOVF   FF5,W
0C0DE:  MOVWF  FEE
0C0E0:  IORLW  00
0C0E2:  BNZ   C0DA
0C0E4:  MOVLB  8
0C0E6:  BTFSC  x60.7
0C0E8:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,0,1,2); 
0C0EA:  MOVLW  08
0C0EC:  MOVWF  x68
0C0EE:  MOVLW  40
0C0F0:  MOVWF  x67
0C0F2:  CLRF   x69
0C0F4:  CLRF   x6A
0C0F6:  MOVLW  01
0C0F8:  MOVWF  x6B
0C0FA:  MOVLW  02
0C0FC:  MOVWF  x6C
0C0FE:  MOVLB  0
0C100:  CALL   1A3E
....................           
....................          displayTemperatura(Coeficiente,30,30,0,3); 
0C104:  MOVFF  61B,863
0C108:  MOVFF  61A,862
0C10C:  MOVFF  619,861
0C110:  MOVFF  618,860
0C114:  CALL   546C
0C118:  MOVFF  02,861
0C11C:  MOVFF  01,860
0C120:  MOVFF  02,866
0C124:  MOVFF  01,865
0C128:  MOVLW  1E
0C12A:  MOVLB  8
0C12C:  MOVWF  x67
0C12E:  MOVWF  x68
0C130:  CLRF   x69
0C132:  MOVLW  03
0C134:  MOVWF  x6A
0C136:  MOVLB  0
0C138:  CALL   3C64
....................           
....................          visual=0; 
0C13C:  MOVLB  5
0C13E:  BCF    x87.7
....................       } 
....................        
....................          if(UP)//Si oprime hacia arriba 
0C140:  BSF    F92.5
0C142:  BTFSC  F80.5
0C144:  BRA    C1E6
....................          {   
....................             Buzz_on;delay_ms(10);Buzz_off; 
0C146:  BSF    F8B.4
0C148:  BCF    F94.4
0C14A:  MOVLW  0A
0C14C:  MOVLB  8
0C14E:  MOVWF  x68
0C150:  MOVLB  0
0C152:  CALL   1390
0C156:  BCF    F8B.4
0C158:  BCF    F94.4
....................             if(Coeficiente>250) 
0C15A:  MOVLB  8
0C15C:  CLRF   x63
0C15E:  CLRF   x62
0C160:  MOVLW  7A
0C162:  MOVWF  x61
0C164:  MOVLW  86
0C166:  MOVWF  x60
0C168:  MOVFF  61B,867
0C16C:  MOVFF  61A,866
0C170:  MOVFF  619,865
0C174:  MOVFF  618,864
0C178:  MOVLB  0
0C17A:  CALL   1D7C
0C17E:  BNC   C1A2
....................             { 
....................                Coeficiente=250;delay_ms(100);visual=1; 
0C180:  MOVLB  6
0C182:  CLRF   x1B
0C184:  CLRF   x1A
0C186:  MOVLW  7A
0C188:  MOVWF  x19
0C18A:  MOVLW  86
0C18C:  MOVWF  x18
0C18E:  MOVLW  64
0C190:  MOVLB  8
0C192:  MOVWF  x68
0C194:  MOVLB  0
0C196:  CALL   1390
0C19A:  MOVLB  5
0C19C:  BSF    x87.7
....................             } 
....................             else 
0C19E:  BRA    C1E6
0C1A0:  MOVLB  0
....................             { 
....................                delay_ms(30);Coeficiente+=1.0;visual=1; 
0C1A2:  MOVLW  1E
0C1A4:  MOVLB  8
0C1A6:  MOVWF  x68
0C1A8:  MOVLB  0
0C1AA:  CALL   1390
0C1AE:  BCF    FD8.1
0C1B0:  MOVFF  61B,869
0C1B4:  MOVFF  61A,868
0C1B8:  MOVFF  619,867
0C1BC:  MOVFF  618,866
0C1C0:  MOVLB  8
0C1C2:  CLRF   x6D
0C1C4:  CLRF   x6C
0C1C6:  CLRF   x6B
0C1C8:  MOVLW  7F
0C1CA:  MOVWF  x6A
0C1CC:  MOVLB  0
0C1CE:  CALL   2B0E
0C1D2:  MOVFF  03,61B
0C1D6:  MOVFF  02,61A
0C1DA:  MOVFF  01,619
0C1DE:  MOVFF  00,618
0C1E2:  MOVLB  5
0C1E4:  BSF    x87.7
....................             } 
....................          } 
....................                 
....................          if(DOWN)//Si oprime hacia abajo 
0C1E6:  BSF    F96.0
0C1E8:  BTFSC  F84.0
0C1EA:  BRA    C268
....................          {   
....................             Buzz_on;delay_ms(10);Buzz_off; 
0C1EC:  BSF    F8B.4
0C1EE:  BCF    F94.4
0C1F0:  MOVLW  0A
0C1F2:  MOVLB  8
0C1F4:  MOVWF  x68
0C1F6:  MOVLB  0
0C1F8:  CALL   1390
0C1FC:  BCF    F8B.4
0C1FE:  BCF    F94.4
....................             if(Coeficiente>1) 
0C200:  MOVLB  8
0C202:  CLRF   x63
0C204:  CLRF   x62
0C206:  CLRF   x61
0C208:  MOVLW  7F
0C20A:  MOVWF  x60
0C20C:  MOVFF  61B,867
0C210:  MOVFF  61A,866
0C214:  MOVFF  619,865
0C218:  MOVFF  618,864
0C21C:  MOVLB  0
0C21E:  CALL   1D7C
0C222:  BNC   C26A
....................             { 
....................                delay_ms(30);Coeficiente-=1.0;visual=1;      
0C224:  MOVLW  1E
0C226:  MOVLB  8
0C228:  MOVWF  x68
0C22A:  MOVLB  0
0C22C:  CALL   1390
0C230:  BSF    FD8.1
0C232:  MOVFF  61B,869
0C236:  MOVFF  61A,868
0C23A:  MOVFF  619,867
0C23E:  MOVFF  618,866
0C242:  MOVLB  8
0C244:  CLRF   x6D
0C246:  CLRF   x6C
0C248:  CLRF   x6B
0C24A:  MOVLW  7F
0C24C:  MOVWF  x6A
0C24E:  MOVLB  0
0C250:  CALL   2B0E
0C254:  MOVFF  03,61B
0C258:  MOVFF  02,61A
0C25C:  MOVFF  01,619
0C260:  MOVFF  00,618
0C264:  MOVLB  5
0C266:  BSF    x87.7
0C268:  MOVLB  0
....................             } 
....................          } 
....................                 
....................          if(RIGHT)//Si oprime SET 
0C26A:  BSF    F96.1
0C26C:  BTFSC  F84.1
0C26E:  BRA    C296
....................          {   
....................             Buzz_on;delay_ms(10);Buzz_off; 
0C270:  BSF    F8B.4
0C272:  BCF    F94.4
0C274:  MOVLW  0A
0C276:  MOVLB  8
0C278:  MOVWF  x68
0C27A:  MOVLB  0
0C27C:  CALL   1390
0C280:  BCF    F8B.4
0C282:  BCF    F94.4
....................             delay_ms(30);visual=1; 
0C284:  MOVLW  1E
0C286:  MOVLB  8
0C288:  MOVWF  x68
0C28A:  MOVLB  0
0C28C:  CALL   1390
0C290:  MOVLB  5
0C292:  BSF    x87.7
0C294:  MOVLB  0
....................          }  
....................                    
....................          if(LEFT)//Si oprime boton de Toma. 
0C296:  BSF    F96.2
0C298:  BTFSC  F84.2
0C29A:  BRA    C328
....................          { 
....................             Buzz_on;delay_ms(10);Buzz_off; 
0C29C:  BSF    F8B.4
0C29E:  BCF    F94.4
0C2A0:  MOVLW  0A
0C2A2:  MOVLB  8
0C2A4:  MOVWF  x68
0C2A6:  MOVLB  0
0C2A8:  CALL   1390
0C2AC:  BCF    F8B.4
0C2AE:  BCF    F94.4
....................             delay_ms(700);Menu=100;glcd_fillscreen(OFF);Opcion=1;visual=1; 
0C2B0:  MOVLW  04
0C2B2:  MOVLB  8
0C2B4:  MOVWF  x60
0C2B6:  MOVLW  AF
0C2B8:  MOVWF  x68
0C2BA:  MOVLB  0
0C2BC:  CALL   1390
0C2C0:  MOVLB  8
0C2C2:  DECFSZ x60,F
0C2C4:  BRA    C2B6
0C2C6:  MOVLW  64
0C2C8:  MOVLB  5
0C2CA:  MOVWF  x9B
0C2CC:  MOVLB  8
0C2CE:  CLRF   x67
0C2D0:  MOVLB  0
0C2D2:  CALL   1410
0C2D6:  MOVLW  01
0C2D8:  MOVLB  5
0C2DA:  MOVWF  xA2
0C2DC:  BSF    x87.7
....................             write_eeprom(455,(int8)Coeficiente); 
0C2DE:  MOVFF  61B,863
0C2E2:  MOVFF  61A,862
0C2E6:  MOVFF  619,861
0C2EA:  MOVFF  618,860
0C2EE:  MOVLB  0
0C2F0:  CALL   546C
0C2F4:  MOVFF  01,860
0C2F8:  MOVLW  01
0C2FA:  MOVWF  FAA
0C2FC:  MOVLW  C7
0C2FE:  MOVWF  FA9
0C300:  MOVFF  860,FA8
0C304:  BCF    FA6.6
0C306:  BCF    FA6.7
0C308:  BSF    FA6.2
0C30A:  MOVF   FF2,W
0C30C:  MOVWF  00
0C30E:  BCF    FF2.7
0C310:  MOVLB  F
0C312:  MOVLW  55
0C314:  MOVWF  FA7
0C316:  MOVLW  AA
0C318:  MOVWF  FA7
0C31A:  BSF    FA6.1
0C31C:  BTFSC  FA6.1
0C31E:  BRA    C31C
0C320:  BCF    FA6.2
0C322:  MOVF   00,W
0C324:  IORWF  FF2,F
0C326:  MOVLB  0
0C328:  MOVLB  5
....................          } 
....................      } 
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................       if(Menu==109){ // Menu de Alarma Sobretemperatura 
0C32A:  MOVF   x9B,W
0C32C:  SUBLW  6D
0C32E:  BTFSS  FD8.2
0C330:  BRA    C5C8
....................        
....................       if(AlTem>500) 
0C332:  MOVF   xB7,W
0C334:  SUBLW  00
0C336:  BC    C34A
0C338:  XORLW  FF
0C33A:  BNZ   C342
0C33C:  MOVF   xB6,W
0C33E:  SUBLW  F4
0C340:  BC    C34A
....................          AlTem=500; 
0C342:  MOVLW  01
0C344:  MOVWF  xB7
0C346:  MOVLW  F4
0C348:  MOVWF  xB6
....................        
....................        
....................       if(visual==1) 
0C34A:  BTFSS  x87.7
0C34C:  BRA    C3B8
....................       { 
....................          glcd_fillScreen(OFF); 
0C34E:  MOVLB  8
0C350:  CLRF   x67
0C352:  MOVLB  0
0C354:  CALL   1410
....................          strcpy(Menus.Letra,"Alarma"); 
0C358:  MOVLW  08
0C35A:  MOVWF  FEA
0C35C:  MOVLW  40
0C35E:  MOVWF  FE9
0C360:  MOVFF  FF2,860
0C364:  BCF    FF2.7
0C366:  MOVLW  00
0C368:  CALL   1290
0C36C:  TBLRD*-
0C36E:  TBLRD*+
0C370:  MOVF   FF5,W
0C372:  MOVWF  FEE
0C374:  IORLW  00
0C376:  BNZ   C36E
0C378:  MOVLB  8
0C37A:  BTFSC  x60.7
0C37C:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,0,1,2); 
0C37E:  MOVLW  08
0C380:  MOVWF  x68
0C382:  MOVLW  40
0C384:  MOVWF  x67
0C386:  CLRF   x69
0C388:  CLRF   x6A
0C38A:  MOVLW  01
0C38C:  MOVWF  x6B
0C38E:  MOVLW  02
0C390:  MOVWF  x6C
0C392:  MOVLB  0
0C394:  CALL   1A3E
....................           
....................          displayTemperatura(AlTem,30,30,0,3); 
0C398:  MOVFF  5B7,866
0C39C:  MOVFF  5B6,865
0C3A0:  MOVLW  1E
0C3A2:  MOVLB  8
0C3A4:  MOVWF  x67
0C3A6:  MOVWF  x68
0C3A8:  CLRF   x69
0C3AA:  MOVLW  03
0C3AC:  MOVWF  x6A
0C3AE:  MOVLB  0
0C3B0:  CALL   3C64
....................           
....................          visual=0; 
0C3B4:  MOVLB  5
0C3B6:  BCF    x87.7
....................       } 
....................        
....................          if(UP)//Si oprime hacia arriba 
0C3B8:  BSF    F92.5
0C3BA:  BTFSC  F80.5
0C3BC:  BRA    C45A
....................          {   
....................             Buzz_on;delay_ms(10);Buzz_off; 
0C3BE:  BSF    F8B.4
0C3C0:  BCF    F94.4
0C3C2:  MOVLW  0A
0C3C4:  MOVLB  8
0C3C6:  MOVWF  x68
0C3C8:  MOVLB  0
0C3CA:  CALL   1390
0C3CE:  BCF    F8B.4
0C3D0:  BCF    F94.4
....................             if(AlTem>500) 
0C3D2:  MOVLB  5
0C3D4:  MOVF   xB7,W
0C3D6:  SUBLW  00
0C3D8:  BC    C3FE
0C3DA:  XORLW  FF
0C3DC:  BNZ   C3E4
0C3DE:  MOVF   xB6,W
0C3E0:  SUBLW  F4
0C3E2:  BC    C3FE
....................             { 
....................                AlTem=500;delay_ms(100);visual=1; 
0C3E4:  MOVLW  01
0C3E6:  MOVWF  xB7
0C3E8:  MOVLW  F4
0C3EA:  MOVWF  xB6
0C3EC:  MOVLW  64
0C3EE:  MOVLB  8
0C3F0:  MOVWF  x68
0C3F2:  MOVLB  0
0C3F4:  CALL   1390
0C3F8:  MOVLB  5
0C3FA:  BSF    x87.7
....................             } 
....................             else 
0C3FC:  BRA    C45A
....................             { 
....................                delay_ms(30);AlTem+=1.0;visual=1; 
0C3FE:  MOVLW  1E
0C400:  MOVLB  8
0C402:  MOVWF  x68
0C404:  MOVLB  0
0C406:  CALL   1390
0C40A:  MOVFF  5B7,867
0C40E:  MOVFF  5B6,866
0C412:  CALL   1D46
0C416:  BCF    FD8.1
0C418:  MOVFF  03,869
0C41C:  MOVFF  02,868
0C420:  MOVFF  01,867
0C424:  MOVFF  00,866
0C428:  MOVLB  8
0C42A:  CLRF   x6D
0C42C:  CLRF   x6C
0C42E:  CLRF   x6B
0C430:  MOVLW  7F
0C432:  MOVWF  x6A
0C434:  MOVLB  0
0C436:  CALL   2B0E
0C43A:  MOVFF  03,863
0C43E:  MOVFF  02,862
0C442:  MOVFF  01,861
0C446:  MOVFF  00,860
0C44A:  CALL   546C
0C44E:  MOVFF  02,5B7
0C452:  MOVFF  01,5B6
0C456:  MOVLB  5
0C458:  BSF    x87.7
....................             } 
....................          } 
....................                 
....................          if(DOWN)//Si oprime hacia abajo 
0C45A:  BSF    F96.0
0C45C:  BTFSC  F84.0
0C45E:  BRA    C4DA
....................          {   
....................             Buzz_on;delay_ms(10);Buzz_off; 
0C460:  BSF    F8B.4
0C462:  BCF    F94.4
0C464:  MOVLW  0A
0C466:  MOVLB  8
0C468:  MOVWF  x68
0C46A:  MOVLB  0
0C46C:  CALL   1390
0C470:  BCF    F8B.4
0C472:  BCF    F94.4
....................             if(AlTem>0) 
0C474:  MOVLB  5
0C476:  MOVF   xB6,F
0C478:  BNZ   C47E
0C47A:  MOVF   xB7,F
0C47C:  BZ    C4DA
....................             { 
....................                delay_ms(30);AlTem-=1.0;visual=1;      
0C47E:  MOVLW  1E
0C480:  MOVLB  8
0C482:  MOVWF  x68
0C484:  MOVLB  0
0C486:  CALL   1390
0C48A:  MOVFF  5B7,867
0C48E:  MOVFF  5B6,866
0C492:  CALL   1D46
0C496:  BSF    FD8.1
0C498:  MOVFF  03,869
0C49C:  MOVFF  02,868
0C4A0:  MOVFF  01,867
0C4A4:  MOVFF  00,866
0C4A8:  MOVLB  8
0C4AA:  CLRF   x6D
0C4AC:  CLRF   x6C
0C4AE:  CLRF   x6B
0C4B0:  MOVLW  7F
0C4B2:  MOVWF  x6A
0C4B4:  MOVLB  0
0C4B6:  CALL   2B0E
0C4BA:  MOVFF  03,863
0C4BE:  MOVFF  02,862
0C4C2:  MOVFF  01,861
0C4C6:  MOVFF  00,860
0C4CA:  CALL   546C
0C4CE:  MOVFF  02,5B7
0C4D2:  MOVFF  01,5B6
0C4D6:  MOVLB  5
0C4D8:  BSF    x87.7
....................             } 
....................          } 
....................                 
....................          if(RIGHT)//Si oprime SET 
0C4DA:  BSF    F96.1
0C4DC:  BTFSC  F84.1
0C4DE:  BRA    C504
....................          {   
....................             Buzz_on;delay_ms(10);Buzz_off; 
0C4E0:  BSF    F8B.4
0C4E2:  BCF    F94.4
0C4E4:  MOVLW  0A
0C4E6:  MOVLB  8
0C4E8:  MOVWF  x68
0C4EA:  MOVLB  0
0C4EC:  CALL   1390
0C4F0:  BCF    F8B.4
0C4F2:  BCF    F94.4
....................             delay_ms(30);visual=1; 
0C4F4:  MOVLW  1E
0C4F6:  MOVLB  8
0C4F8:  MOVWF  x68
0C4FA:  MOVLB  0
0C4FC:  CALL   1390
0C500:  MOVLB  5
0C502:  BSF    x87.7
....................          }  
....................                    
....................          if(LEFT)//Si oprime boton de Toma. 
0C504:  BSF    F96.2
0C506:  BTFSC  F84.2
0C508:  BRA    C5C8
....................          { 
....................             Buzz_on;delay_ms(10);Buzz_off; 
0C50A:  BSF    F8B.4
0C50C:  BCF    F94.4
0C50E:  MOVLW  0A
0C510:  MOVLB  8
0C512:  MOVWF  x68
0C514:  MOVLB  0
0C516:  CALL   1390
0C51A:  BCF    F8B.4
0C51C:  BCF    F94.4
....................             delay_ms(700);Menu=100;glcd_fillscreen(OFF);Opcion=1;visual=1; 
0C51E:  MOVLW  04
0C520:  MOVLB  8
0C522:  MOVWF  x60
0C524:  MOVLW  AF
0C526:  MOVWF  x68
0C528:  MOVLB  0
0C52A:  CALL   1390
0C52E:  MOVLB  8
0C530:  DECFSZ x60,F
0C532:  BRA    C524
0C534:  MOVLW  64
0C536:  MOVLB  5
0C538:  MOVWF  x9B
0C53A:  MOVLB  8
0C53C:  CLRF   x67
0C53E:  MOVLB  0
0C540:  CALL   1410
0C544:  MOVLW  01
0C546:  MOVLB  5
0C548:  MOVWF  xA2
0C54A:  BSF    x87.7
....................             write_eeprom(472,make8(AlTem,0)); 
0C54C:  MOVFF  5B6,860
0C550:  MOVWF  FAA
0C552:  MOVLW  D8
0C554:  MOVWF  FA9
0C556:  MOVFF  860,FA8
0C55A:  BCF    FA6.6
0C55C:  BCF    FA6.7
0C55E:  BSF    FA6.2
0C560:  MOVF   FF2,W
0C562:  MOVWF  00
0C564:  BCF    FF2.7
0C566:  MOVLB  F
0C568:  MOVLW  55
0C56A:  MOVWF  FA7
0C56C:  MOVLW  AA
0C56E:  MOVWF  FA7
0C570:  BSF    FA6.1
0C572:  BTFSC  FA6.1
0C574:  BRA    C572
0C576:  BCF    FA6.2
0C578:  MOVF   00,W
0C57A:  IORWF  FF2,F
....................             delay_ms(10); 
0C57C:  MOVLW  0A
0C57E:  MOVLB  8
0C580:  MOVWF  x68
0C582:  MOVLB  0
0C584:  CALL   1390
....................             write_eeprom(473,make8(AlTem,1)); 
0C588:  MOVFF  5B7,860
0C58C:  MOVLW  01
0C58E:  MOVWF  FAA
0C590:  MOVLW  D9
0C592:  MOVWF  FA9
0C594:  MOVFF  860,FA8
0C598:  BCF    FA6.6
0C59A:  BCF    FA6.7
0C59C:  BSF    FA6.2
0C59E:  MOVF   FF2,W
0C5A0:  MOVWF  00
0C5A2:  BCF    FF2.7
0C5A4:  MOVLB  F
0C5A6:  MOVLW  55
0C5A8:  MOVWF  FA7
0C5AA:  MOVLW  AA
0C5AC:  MOVWF  FA7
0C5AE:  BSF    FA6.1
0C5B0:  BTFSC  FA6.1
0C5B2:  BRA    C5B0
0C5B4:  BCF    FA6.2
0C5B6:  MOVF   00,W
0C5B8:  IORWF  FF2,F
....................             delay_ms(10); 
0C5BA:  MOVLW  0A
0C5BC:  MOVLB  8
0C5BE:  MOVWF  x68
0C5C0:  MOVLB  0
0C5C2:  CALL   1390
0C5C6:  MOVLB  5
....................          } 
....................      } 
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................       if(Menu==110){ // Menu de Resistencia conversora I/V 
0C5C8:  MOVF   x9B,W
0C5CA:  SUBLW  6E
0C5CC:  BTFSS  FD8.2
0C5CE:  BRA    CA7C
....................        
....................       if(resistencia>260)       
0C5D0:  MOVLB  8
0C5D2:  CLRF   x63
0C5D4:  CLRF   x62
0C5D6:  MOVLW  02
0C5D8:  MOVWF  x61
0C5DA:  MOVLW  87
0C5DC:  MOVWF  x60
0C5DE:  MOVFF  61F,867
0C5E2:  MOVFF  61E,866
0C5E6:  MOVFF  61D,865
0C5EA:  MOVFF  61C,864
0C5EE:  MOVLB  0
0C5F0:  CALL   1D7C
0C5F4:  BNC   C606
....................          resistencia=240; 
0C5F6:  MOVLB  6
0C5F8:  CLRF   x1F
0C5FA:  CLRF   x1E
0C5FC:  MOVLW  70
0C5FE:  MOVWF  x1D
0C600:  MOVLW  86
0C602:  MOVWF  x1C
....................       else if(resistencia<230) 
0C604:  BRA    C63A
0C606:  MOVFF  61F,863
0C60A:  MOVFF  61E,862
0C60E:  MOVFF  61D,861
0C612:  MOVFF  61C,860
0C616:  MOVLB  8
0C618:  CLRF   x67
0C61A:  CLRF   x66
0C61C:  MOVLW  66
0C61E:  MOVWF  x65
0C620:  MOVLW  86
0C622:  MOVWF  x64
0C624:  MOVLB  0
0C626:  CALL   1D7C
0C62A:  BNC   C63A
....................          resistencia=240; 
0C62C:  MOVLB  6
0C62E:  CLRF   x1F
0C630:  CLRF   x1E
0C632:  MOVLW  70
0C634:  MOVWF  x1D
0C636:  MOVLW  86
0C638:  MOVWF  x1C
....................        
....................       if(visual==1){ 
0C63A:  MOVLB  5
0C63C:  BTFSS  x87.7
0C63E:  BRA    C6C6
....................          glcd_fillScreen(OFF); 
0C640:  MOVLB  8
0C642:  CLRF   x67
0C644:  MOVLB  0
0C646:  CALL   1410
....................          strcpy(Menus.Letra,"Resis."); 
0C64A:  MOVLW  08
0C64C:  MOVWF  FEA
0C64E:  MOVLW  40
0C650:  MOVWF  FE9
0C652:  MOVFF  FF2,860
0C656:  BCF    FF2.7
0C658:  MOVLW  00
0C65A:  CALL   12B6
0C65E:  TBLRD*-
0C660:  TBLRD*+
0C662:  MOVF   FF5,W
0C664:  MOVWF  FEE
0C666:  IORLW  00
0C668:  BNZ   C660
0C66A:  MOVLB  8
0C66C:  BTFSC  x60.7
0C66E:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,0,1,2); 
0C670:  MOVLW  08
0C672:  MOVWF  x68
0C674:  MOVLW  40
0C676:  MOVWF  x67
0C678:  CLRF   x69
0C67A:  CLRF   x6A
0C67C:  MOVLW  01
0C67E:  MOVWF  x6B
0C680:  MOVLW  02
0C682:  MOVWF  x6C
0C684:  MOVLB  0
0C686:  CALL   1A3E
....................           
....................          displayTemperatura(resistencia,30,30,0,3); 
0C68A:  MOVFF  61F,863
0C68E:  MOVFF  61E,862
0C692:  MOVFF  61D,861
0C696:  MOVFF  61C,860
0C69A:  CALL   546C
0C69E:  MOVFF  02,861
0C6A2:  MOVFF  01,860
0C6A6:  MOVFF  02,866
0C6AA:  MOVFF  01,865
0C6AE:  MOVLW  1E
0C6B0:  MOVLB  8
0C6B2:  MOVWF  x67
0C6B4:  MOVWF  x68
0C6B6:  CLRF   x69
0C6B8:  MOVLW  03
0C6BA:  MOVWF  x6A
0C6BC:  MOVLB  0
0C6BE:  CALL   3C64
....................           
....................          visual=0; 
0C6C2:  MOVLB  5
0C6C4:  BCF    x87.7
....................       } 
....................        
....................          if(UP)//Si oprime hacia arriba 
0C6C6:  BSF    F92.5
0C6C8:  BTFSC  F80.5
0C6CA:  BRA    C726
....................          {   
....................             Buzz_on;delay_ms(10);Buzz_off; 
0C6CC:  BSF    F8B.4
0C6CE:  BCF    F94.4
0C6D0:  MOVLW  0A
0C6D2:  MOVLB  8
0C6D4:  MOVWF  x68
0C6D6:  MOVLB  0
0C6D8:  CALL   1390
0C6DC:  BCF    F8B.4
0C6DE:  BCF    F94.4
....................             visual=1; 
0C6E0:  MOVLB  5
0C6E2:  BSF    x87.7
....................             resistencia+=1.0; 
0C6E4:  BCF    FD8.1
0C6E6:  MOVFF  61F,869
0C6EA:  MOVFF  61E,868
0C6EE:  MOVFF  61D,867
0C6F2:  MOVFF  61C,866
0C6F6:  MOVLB  8
0C6F8:  CLRF   x6D
0C6FA:  CLRF   x6C
0C6FC:  CLRF   x6B
0C6FE:  MOVLW  7F
0C700:  MOVWF  x6A
0C702:  MOVLB  0
0C704:  CALL   2B0E
0C708:  MOVFF  03,61F
0C70C:  MOVFF  02,61E
0C710:  MOVFF  01,61D
0C714:  MOVFF  00,61C
....................             delay_ms(30); 
0C718:  MOVLW  1E
0C71A:  MOVLB  8
0C71C:  MOVWF  x68
0C71E:  MOVLB  0
0C720:  CALL   1390
0C724:  MOVLB  5
....................          } 
....................                 
....................          if(DOWN)//Si oprime hacia abajo 
0C726:  BSF    F96.0
0C728:  BTFSC  F84.0
0C72A:  BRA    C786
....................          {   
....................             Buzz_on;delay_ms(10);Buzz_off; 
0C72C:  BSF    F8B.4
0C72E:  BCF    F94.4
0C730:  MOVLW  0A
0C732:  MOVLB  8
0C734:  MOVWF  x68
0C736:  MOVLB  0
0C738:  CALL   1390
0C73C:  BCF    F8B.4
0C73E:  BCF    F94.4
....................             visual=1; 
0C740:  MOVLB  5
0C742:  BSF    x87.7
....................             resistencia-=1.0; 
0C744:  BSF    FD8.1
0C746:  MOVFF  61F,869
0C74A:  MOVFF  61E,868
0C74E:  MOVFF  61D,867
0C752:  MOVFF  61C,866
0C756:  MOVLB  8
0C758:  CLRF   x6D
0C75A:  CLRF   x6C
0C75C:  CLRF   x6B
0C75E:  MOVLW  7F
0C760:  MOVWF  x6A
0C762:  MOVLB  0
0C764:  CALL   2B0E
0C768:  MOVFF  03,61F
0C76C:  MOVFF  02,61E
0C770:  MOVFF  01,61D
0C774:  MOVFF  00,61C
....................             delay_ms(30); 
0C778:  MOVLW  1E
0C77A:  MOVLB  8
0C77C:  MOVWF  x68
0C77E:  MOVLB  0
0C780:  CALL   1390
0C784:  MOVLB  5
....................          } 
....................                 
....................          if(RIGHT)//Si oprime SET 
0C786:  BSF    F96.1
0C788:  BTFSC  F84.1
0C78A:  BRA    C7B0
....................          {   
....................             Buzz_on;delay_ms(10);Buzz_off; 
0C78C:  BSF    F8B.4
0C78E:  BCF    F94.4
0C790:  MOVLW  0A
0C792:  MOVLB  8
0C794:  MOVWF  x68
0C796:  MOVLB  0
0C798:  CALL   1390
0C79C:  BCF    F8B.4
0C79E:  BCF    F94.4
....................             delay_ms(30);visual=1; 
0C7A0:  MOVLW  1E
0C7A2:  MOVLB  8
0C7A4:  MOVWF  x68
0C7A6:  MOVLB  0
0C7A8:  CALL   1390
0C7AC:  MOVLB  5
0C7AE:  BSF    x87.7
....................          }  
....................                    
....................          if(LEFT)//Si oprime boton de Toma. 
0C7B0:  BSF    F96.2
0C7B2:  BTFSC  F84.2
0C7B4:  BRA    CA7C
....................          { 
....................             Buzz_on;delay_ms(10);Buzz_off; 
0C7B6:  BSF    F8B.4
0C7B8:  BCF    F94.4
0C7BA:  MOVLW  0A
0C7BC:  MOVLB  8
0C7BE:  MOVWF  x68
0C7C0:  MOVLB  0
0C7C2:  CALL   1390
0C7C6:  BCF    F8B.4
0C7C8:  BCF    F94.4
....................             delay_ms(700);Menu=100;glcd_fillscreen(OFF);Opcion=1;visual=1; 
0C7CA:  MOVLW  04
0C7CC:  MOVLB  8
0C7CE:  MOVWF  x60
0C7D0:  MOVLW  AF
0C7D2:  MOVWF  x68
0C7D4:  MOVLB  0
0C7D6:  CALL   1390
0C7DA:  MOVLB  8
0C7DC:  DECFSZ x60,F
0C7DE:  BRA    C7D0
0C7E0:  MOVLW  64
0C7E2:  MOVLB  5
0C7E4:  MOVWF  x9B
0C7E6:  MOVLB  8
0C7E8:  CLRF   x67
0C7EA:  MOVLB  0
0C7EC:  CALL   1410
0C7F0:  MOVLW  01
0C7F2:  MOVLB  5
0C7F4:  MOVWF  xA2
0C7F6:  BSF    x87.7
....................             write_eeprom(457,(int8)resistencia); 
0C7F8:  MOVFF  61F,863
0C7FC:  MOVFF  61E,862
0C800:  MOVFF  61D,861
0C804:  MOVFF  61C,860
0C808:  MOVLB  0
0C80A:  CALL   546C
0C80E:  MOVFF  01,860
0C812:  MOVLW  01
0C814:  MOVWF  FAA
0C816:  MOVLW  C9
0C818:  MOVWF  FA9
0C81A:  MOVFF  860,FA8
0C81E:  BCF    FA6.6
0C820:  BCF    FA6.7
0C822:  BSF    FA6.2
0C824:  MOVF   FF2,W
0C826:  MOVWF  00
0C828:  BCF    FF2.7
0C82A:  MOVLB  F
0C82C:  MOVLW  55
0C82E:  MOVWF  FA7
0C830:  MOVLW  AA
0C832:  MOVWF  FA7
0C834:  BSF    FA6.1
0C836:  BTFSC  FA6.1
0C838:  BRA    C836
0C83A:  BCF    FA6.2
0C83C:  MOVF   00,W
0C83E:  IORWF  FF2,F
....................             delay_ms(10); 
0C840:  MOVLW  0A
0C842:  MOVLB  8
0C844:  MOVWF  x68
0C846:  MOVLB  0
0C848:  CALL   1390
....................             adcInf=(0.004*resistencia*1023)/5.0; 
0C84C:  MOVLW  6F
0C84E:  MOVLB  8
0C850:  MOVWF  x80
0C852:  MOVLW  12
0C854:  MOVWF  x7F
0C856:  MOVLW  03
0C858:  MOVWF  x7E
0C85A:  MOVLW  77
0C85C:  MOVWF  x7D
0C85E:  MOVFF  61F,884
0C862:  MOVFF  61E,883
0C866:  MOVFF  61D,882
0C86A:  MOVFF  61C,881
0C86E:  MOVLB  0
0C870:  CALL   2EE4
0C874:  MOVFF  00,860
0C878:  MOVFF  01,861
0C87C:  MOVFF  02,862
0C880:  MOVFF  03,863
0C884:  MOVFF  03,880
0C888:  MOVFF  02,87F
0C88C:  MOVFF  01,87E
0C890:  MOVFF  00,87D
0C894:  MOVLB  8
0C896:  CLRF   x84
0C898:  MOVLW  C0
0C89A:  MOVWF  x83
0C89C:  MOVLW  7F
0C89E:  MOVWF  x82
0C8A0:  MOVLW  88
0C8A2:  MOVWF  x81
0C8A4:  MOVLB  0
0C8A6:  CALL   2EE4
0C8AA:  MOVFF  00,860
0C8AE:  MOVFF  01,861
0C8B2:  MOVFF  02,862
0C8B6:  MOVFF  03,863
0C8BA:  MOVFF  03,867
0C8BE:  MOVFF  02,866
0C8C2:  MOVFF  01,865
0C8C6:  MOVFF  00,864
0C8CA:  MOVLB  8
0C8CC:  CLRF   x6B
0C8CE:  CLRF   x6A
0C8D0:  MOVLW  20
0C8D2:  MOVWF  x69
0C8D4:  MOVLW  81
0C8D6:  MOVWF  x68
0C8D8:  MOVLB  0
0C8DA:  CALL   2D86
0C8DE:  MOVFF  03,64B
0C8E2:  MOVFF  02,64A
0C8E6:  MOVFF  01,649
0C8EA:  MOVFF  00,648
....................             adcSup=(0.02*resistencia*1023)/5.0; 
0C8EE:  MOVLW  0A
0C8F0:  MOVLB  8
0C8F2:  MOVWF  x80
0C8F4:  MOVLW  D7
0C8F6:  MOVWF  x7F
0C8F8:  MOVLW  23
0C8FA:  MOVWF  x7E
0C8FC:  MOVLW  79
0C8FE:  MOVWF  x7D
0C900:  MOVFF  61F,884
0C904:  MOVFF  61E,883
0C908:  MOVFF  61D,882
0C90C:  MOVFF  61C,881
0C910:  MOVLB  0
0C912:  CALL   2EE4
0C916:  MOVFF  00,860
0C91A:  MOVFF  01,861
0C91E:  MOVFF  02,862
0C922:  MOVFF  03,863
0C926:  MOVFF  03,880
0C92A:  MOVFF  02,87F
0C92E:  MOVFF  01,87E
0C932:  MOVFF  00,87D
0C936:  MOVLB  8
0C938:  CLRF   x84
0C93A:  MOVLW  C0
0C93C:  MOVWF  x83
0C93E:  MOVLW  7F
0C940:  MOVWF  x82
0C942:  MOVLW  88
0C944:  MOVWF  x81
0C946:  MOVLB  0
0C948:  CALL   2EE4
0C94C:  MOVFF  00,860
0C950:  MOVFF  01,861
0C954:  MOVFF  02,862
0C958:  MOVFF  03,863
0C95C:  MOVFF  03,867
0C960:  MOVFF  02,866
0C964:  MOVFF  01,865
0C968:  MOVFF  00,864
0C96C:  MOVLB  8
0C96E:  CLRF   x6B
0C970:  CLRF   x6A
0C972:  MOVLW  20
0C974:  MOVWF  x69
0C976:  MOVLW  81
0C978:  MOVWF  x68
0C97A:  MOVLB  0
0C97C:  CALL   2D86
0C980:  MOVFF  03,647
0C984:  MOVFF  02,646
0C988:  MOVFF  01,645
0C98C:  MOVFF  00,644
....................             m=(Tsup-Tinf)/(adcSup-adcInf); 
0C990:  BSF    FD8.1
0C992:  MOVFF  64F,869
0C996:  MOVFF  64E,868
0C99A:  MOVFF  64D,867
0C99E:  MOVFF  64C,866
0C9A2:  MOVFF  653,86D
0C9A6:  MOVFF  652,86C
0C9AA:  MOVFF  651,86B
0C9AE:  MOVFF  650,86A
0C9B2:  CALL   2B0E
0C9B6:  MOVFF  00,860
0C9BA:  MOVFF  01,861
0C9BE:  MOVFF  02,862
0C9C2:  MOVFF  03,863
0C9C6:  BSF    FD8.1
0C9C8:  MOVFF  647,869
0C9CC:  MOVFF  646,868
0C9D0:  MOVFF  645,867
0C9D4:  MOVFF  644,866
0C9D8:  MOVFF  64B,86D
0C9DC:  MOVFF  64A,86C
0C9E0:  MOVFF  649,86B
0C9E4:  MOVFF  648,86A
0C9E8:  CALL   2B0E
0C9EC:  MOVFF  863,867
0C9F0:  MOVFF  862,866
0C9F4:  MOVFF  861,865
0C9F8:  MOVFF  860,864
0C9FC:  MOVFF  03,86B
0CA00:  MOVFF  02,86A
0CA04:  MOVFF  01,869
0CA08:  MOVFF  00,868
0CA0C:  CALL   2D86
0CA10:  MOVFF  03,63F
0CA14:  MOVFF  02,63E
0CA18:  MOVFF  01,63D
0CA1C:  MOVFF  00,63C
....................             b=Tsup-(m*adcSup); 
0CA20:  MOVFF  63F,880
0CA24:  MOVFF  63E,87F
0CA28:  MOVFF  63D,87E
0CA2C:  MOVFF  63C,87D
0CA30:  MOVFF  647,884
0CA34:  MOVFF  646,883
0CA38:  MOVFF  645,882
0CA3C:  MOVFF  644,881
0CA40:  CALL   2EE4
0CA44:  BSF    FD8.1
0CA46:  MOVFF  64F,869
0CA4A:  MOVFF  64E,868
0CA4E:  MOVFF  64D,867
0CA52:  MOVFF  64C,866
0CA56:  MOVFF  03,86D
0CA5A:  MOVFF  02,86C
0CA5E:  MOVFF  01,86B
0CA62:  MOVFF  00,86A
0CA66:  CALL   2B0E
0CA6A:  MOVFF  03,643
0CA6E:  MOVFF  02,642
0CA72:  MOVFF  01,641
0CA76:  MOVFF  00,640
0CA7A:  MOVLB  5
....................          } 
....................      } 
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................  
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------       
....................       if(Menu==111){ // Menu de Pendiente de calentamiento de mufla 
0CA7C:  MOVF   x9B,W
0CA7E:  SUBLW  6F
0CA80:  BTFSS  FD8.2
0CA82:  BRA    CCFE
....................        
....................       if(penMufla>255)       
0CA84:  MOVLB  8
0CA86:  CLRF   x63
0CA88:  CLRF   x62
0CA8A:  MOVLW  7F
0CA8C:  MOVWF  x61
0CA8E:  MOVLW  86
0CA90:  MOVWF  x60
0CA92:  MOVFF  657,867
0CA96:  MOVFF  656,866
0CA9A:  MOVFF  655,865
0CA9E:  MOVFF  654,864
0CAA2:  MOVLB  0
0CAA4:  CALL   1D7C
0CAA8:  BNC   CAB8
....................          penMufla=1; 
0CAAA:  MOVLB  6
0CAAC:  CLRF   x57
0CAAE:  CLRF   x56
0CAB0:  CLRF   x55
0CAB2:  MOVLW  7F
0CAB4:  MOVWF  x54
....................       else if(penMufla<1) 
0CAB6:  BRA    CAEA
0CAB8:  MOVFF  657,863
0CABC:  MOVFF  656,862
0CAC0:  MOVFF  655,861
0CAC4:  MOVFF  654,860
0CAC8:  MOVLB  8
0CACA:  CLRF   x67
0CACC:  CLRF   x66
0CACE:  CLRF   x65
0CAD0:  MOVLW  7F
0CAD2:  MOVWF  x64
0CAD4:  MOVLB  0
0CAD6:  CALL   1D7C
0CADA:  BNC   CAEA
....................          penMufla=255; 
0CADC:  MOVLB  6
0CADE:  CLRF   x57
0CAE0:  CLRF   x56
0CAE2:  MOVLW  7F
0CAE4:  MOVWF  x55
0CAE6:  MOVLW  86
0CAE8:  MOVWF  x54
....................        
....................       if(visual==1){ 
0CAEA:  MOVLB  5
0CAEC:  BTFSS  x87.7
0CAEE:  BRA    CB76
....................          glcd_fillScreen(OFF); 
0CAF0:  MOVLB  8
0CAF2:  CLRF   x67
0CAF4:  MOVLB  0
0CAF6:  CALL   1410
....................          strcpy(Menus.Letra,"m Mufla"); 
0CAFA:  MOVLW  08
0CAFC:  MOVWF  FEA
0CAFE:  MOVLW  40
0CB00:  MOVWF  FE9
0CB02:  MOVFF  FF2,860
0CB06:  BCF    FF2.7
0CB08:  MOVLW  00
0CB0A:  CALL   116E
0CB0E:  TBLRD*-
0CB10:  TBLRD*+
0CB12:  MOVF   FF5,W
0CB14:  MOVWF  FEE
0CB16:  IORLW  00
0CB18:  BNZ   CB10
0CB1A:  MOVLB  8
0CB1C:  BTFSC  x60.7
0CB1E:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,0,1,2); 
0CB20:  MOVLW  08
0CB22:  MOVWF  x68
0CB24:  MOVLW  40
0CB26:  MOVWF  x67
0CB28:  CLRF   x69
0CB2A:  CLRF   x6A
0CB2C:  MOVLW  01
0CB2E:  MOVWF  x6B
0CB30:  MOVLW  02
0CB32:  MOVWF  x6C
0CB34:  MOVLB  0
0CB36:  CALL   1A3E
....................           
....................          displayTemperatura(penMufla,30,30,0,3); 
0CB3A:  MOVFF  657,863
0CB3E:  MOVFF  656,862
0CB42:  MOVFF  655,861
0CB46:  MOVFF  654,860
0CB4A:  CALL   546C
0CB4E:  MOVFF  02,861
0CB52:  MOVFF  01,860
0CB56:  MOVFF  02,866
0CB5A:  MOVFF  01,865
0CB5E:  MOVLW  1E
0CB60:  MOVLB  8
0CB62:  MOVWF  x67
0CB64:  MOVWF  x68
0CB66:  CLRF   x69
0CB68:  MOVLW  03
0CB6A:  MOVWF  x6A
0CB6C:  MOVLB  0
0CB6E:  CALL   3C64
....................           
....................          visual=0; 
0CB72:  MOVLB  5
0CB74:  BCF    x87.7
....................       } 
....................        
....................          if(UP)//Si oprime hacia arriba 
0CB76:  BSF    F92.5
0CB78:  BTFSC  F80.5
0CB7A:  BRA    CBD6
....................          {   
....................             Buzz_on;delay_ms(10);Buzz_off; 
0CB7C:  BSF    F8B.4
0CB7E:  BCF    F94.4
0CB80:  MOVLW  0A
0CB82:  MOVLB  8
0CB84:  MOVWF  x68
0CB86:  MOVLB  0
0CB88:  CALL   1390
0CB8C:  BCF    F8B.4
0CB8E:  BCF    F94.4
....................             visual=1; 
0CB90:  MOVLB  5
0CB92:  BSF    x87.7
....................             penMufla+=1.0; 
0CB94:  BCF    FD8.1
0CB96:  MOVFF  657,869
0CB9A:  MOVFF  656,868
0CB9E:  MOVFF  655,867
0CBA2:  MOVFF  654,866
0CBA6:  MOVLB  8
0CBA8:  CLRF   x6D
0CBAA:  CLRF   x6C
0CBAC:  CLRF   x6B
0CBAE:  MOVLW  7F
0CBB0:  MOVWF  x6A
0CBB2:  MOVLB  0
0CBB4:  CALL   2B0E
0CBB8:  MOVFF  03,657
0CBBC:  MOVFF  02,656
0CBC0:  MOVFF  01,655
0CBC4:  MOVFF  00,654
....................             delay_ms(30); 
0CBC8:  MOVLW  1E
0CBCA:  MOVLB  8
0CBCC:  MOVWF  x68
0CBCE:  MOVLB  0
0CBD0:  CALL   1390
0CBD4:  MOVLB  5
....................          } 
....................                 
....................          if(DOWN)//Si oprime hacia abajo 
0CBD6:  BSF    F96.0
0CBD8:  BTFSC  F84.0
0CBDA:  BRA    CC36
....................          {   
....................             Buzz_on;delay_ms(10);Buzz_off; 
0CBDC:  BSF    F8B.4
0CBDE:  BCF    F94.4
0CBE0:  MOVLW  0A
0CBE2:  MOVLB  8
0CBE4:  MOVWF  x68
0CBE6:  MOVLB  0
0CBE8:  CALL   1390
0CBEC:  BCF    F8B.4
0CBEE:  BCF    F94.4
....................             visual=1; 
0CBF0:  MOVLB  5
0CBF2:  BSF    x87.7
....................             penMufla-=1.0; 
0CBF4:  BSF    FD8.1
0CBF6:  MOVFF  657,869
0CBFA:  MOVFF  656,868
0CBFE:  MOVFF  655,867
0CC02:  MOVFF  654,866
0CC06:  MOVLB  8
0CC08:  CLRF   x6D
0CC0A:  CLRF   x6C
0CC0C:  CLRF   x6B
0CC0E:  MOVLW  7F
0CC10:  MOVWF  x6A
0CC12:  MOVLB  0
0CC14:  CALL   2B0E
0CC18:  MOVFF  03,657
0CC1C:  MOVFF  02,656
0CC20:  MOVFF  01,655
0CC24:  MOVFF  00,654
....................             delay_ms(30); 
0CC28:  MOVLW  1E
0CC2A:  MOVLB  8
0CC2C:  MOVWF  x68
0CC2E:  MOVLB  0
0CC30:  CALL   1390
0CC34:  MOVLB  5
....................          } 
....................                 
....................          if(RIGHT)//Si oprime SET 
0CC36:  BSF    F96.1
0CC38:  BTFSC  F84.1
0CC3A:  BRA    CC60
....................          {   
....................             Buzz_on;delay_ms(10);Buzz_off; 
0CC3C:  BSF    F8B.4
0CC3E:  BCF    F94.4
0CC40:  MOVLW  0A
0CC42:  MOVLB  8
0CC44:  MOVWF  x68
0CC46:  MOVLB  0
0CC48:  CALL   1390
0CC4C:  BCF    F8B.4
0CC4E:  BCF    F94.4
....................             delay_ms(30);visual=1; 
0CC50:  MOVLW  1E
0CC52:  MOVLB  8
0CC54:  MOVWF  x68
0CC56:  MOVLB  0
0CC58:  CALL   1390
0CC5C:  MOVLB  5
0CC5E:  BSF    x87.7
....................          }  
....................                    
....................          if(LEFT)//Si oprime boton de Toma. 
0CC60:  BSF    F96.2
0CC62:  BTFSC  F84.2
0CC64:  BRA    CCFE
....................          { 
....................             Buzz_on;delay_ms(10);Buzz_off; 
0CC66:  BSF    F8B.4
0CC68:  BCF    F94.4
0CC6A:  MOVLW  0A
0CC6C:  MOVLB  8
0CC6E:  MOVWF  x68
0CC70:  MOVLB  0
0CC72:  CALL   1390
0CC76:  BCF    F8B.4
0CC78:  BCF    F94.4
....................             delay_ms(700);Menu=100;glcd_fillscreen(OFF);Opcion=1;visual=1; 
0CC7A:  MOVLW  04
0CC7C:  MOVLB  8
0CC7E:  MOVWF  x60
0CC80:  MOVLW  AF
0CC82:  MOVWF  x68
0CC84:  MOVLB  0
0CC86:  CALL   1390
0CC8A:  MOVLB  8
0CC8C:  DECFSZ x60,F
0CC8E:  BRA    CC80
0CC90:  MOVLW  64
0CC92:  MOVLB  5
0CC94:  MOVWF  x9B
0CC96:  MOVLB  8
0CC98:  CLRF   x67
0CC9A:  MOVLB  0
0CC9C:  CALL   1410
0CCA0:  MOVLW  01
0CCA2:  MOVLB  5
0CCA4:  MOVWF  xA2
0CCA6:  BSF    x87.7
....................             write_eeprom(458,(int8)penMufla); 
0CCA8:  MOVFF  657,863
0CCAC:  MOVFF  656,862
0CCB0:  MOVFF  655,861
0CCB4:  MOVFF  654,860
0CCB8:  MOVLB  0
0CCBA:  CALL   546C
0CCBE:  MOVFF  01,860
0CCC2:  MOVLW  01
0CCC4:  MOVWF  FAA
0CCC6:  MOVLW  CA
0CCC8:  MOVWF  FA9
0CCCA:  MOVFF  860,FA8
0CCCE:  BCF    FA6.6
0CCD0:  BCF    FA6.7
0CCD2:  BSF    FA6.2
0CCD4:  MOVF   FF2,W
0CCD6:  MOVWF  00
0CCD8:  BCF    FF2.7
0CCDA:  MOVLB  F
0CCDC:  MOVLW  55
0CCDE:  MOVWF  FA7
0CCE0:  MOVLW  AA
0CCE2:  MOVWF  FA7
0CCE4:  BSF    FA6.1
0CCE6:  BTFSC  FA6.1
0CCE8:  BRA    CCE6
0CCEA:  BCF    FA6.2
0CCEC:  MOVF   00,W
0CCEE:  IORWF  FF2,F
....................             delay_ms(10); 
0CCF0:  MOVLW  0A
0CCF2:  MOVLB  8
0CCF4:  MOVWF  x68
0CCF6:  MOVLB  0
0CCF8:  CALL   1390
0CCFC:  MOVLB  5
....................          } 
....................      } 
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................  
....................  
....................       if(Lectura2==1) 
0CCFE:  DECFSZ x8F,W
0CD00:  BRA    CD20
....................       { 
....................          Temperatura=Leer_Sensor(MediaMovil); 
0CD02:  MOVFF  58C,860
0CD06:  MOVLB  0
0CD08:  CALL   2FDA
0CD0C:  MOVFF  03,627
0CD10:  MOVFF  02,626
0CD14:  MOVFF  01,625
0CD18:  MOVFF  00,624
....................          Lectura2=0; 
0CD1C:  MOVLB  5
0CD1E:  CLRF   x8F
....................       }  
....................  
....................       if(tiemporeset>=60) 
0CD20:  MOVF   x97,W
0CD22:  SUBLW  3B
0CD24:  BC    CD40
....................       { 
....................          if(Menu!=0 && Menu<100){ 
0CD26:  MOVF   x9B,F
0CD28:  BZ    CD40
0CD2A:  MOVF   x9B,W
0CD2C:  SUBLW  63
0CD2E:  BNC   CD40
....................             glcd_init(ON); 
0CD30:  MOVLW  01
0CD32:  MOVLB  8
0CD34:  MOVWF  x60
0CD36:  MOVLB  0
0CD38:  CALL   1522
....................             tiemporeset=0; 
0CD3C:  MOVLB  5
0CD3E:  CLRF   x97
....................          } 
....................       }  
....................  
....................  
....................    } 
0CD40:  MOVLB  6
0CD42:  GOTO   6F20
.................... } 
0CD46:  SLEEP 

Configuration Fuses:
   Word  1: 0200   HS NOIESO NOFCMEN
   Word  2: 1E1F   BROWNOUT NOWDT BORV20 NOPUT WDT32768
   Word  3: 0000   NOPBADEN NOLPT1OSC NOMCLR
   Word  4: 00B0   NOSTVREN NODEBUG NOLVP NOXINST BBSIZ4K
   Word  5: C03F   NOPROTECT NOCPD NOCPB
   Word  6: E03F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 403F   NOEBTR NOEBTRB
